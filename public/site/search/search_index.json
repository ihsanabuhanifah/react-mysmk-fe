{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"0.%20HTML%20%26%20CSS/HTML/1.%20Pengenalan%20HTML/A.%20Pengenalan%20HTML/","title":"A. Pengenalan HTML","text":""},{"location":"0.%20HTML%20%26%20CSS/HTML/1.%20Pengenalan%20HTML/A.%20Pengenalan%20HTML/#website","title":"Website","text":"<p>Website adalah sebuah halaman yang menampilkan informasi berupa teks atau gambar. Website dapat diakses melalui internet menggunakan browser. Website ini unik karena tiap halaman dapat saling terhubung dengan menggunakan hypertext links. Umumnya sebuah website memuat informasi yang disediakan secara perorangan, kelompok, atau organisasi. Semua informasi yang tersedia pada halaman website disimpan pada server.</p> <p>Website sudah berkembang sangat pesat. Sekarang, website digunakan tidak hanya untuk media berbagi informasi atau berita. Layaknya sebuah aplikasi pada komputer dan handphone kita, website dapat digunakan untuk komunikasi secara real-time, mendengarkan sebuah lagu, bahkan photo editing sekarang dapat dilakukan pada sebuah website.</p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/1.%20Pengenalan%20HTML/A.%20Pengenalan%20HTML/#anatomi-website","title":"Anatomi Website","text":"<p>Kita terbiasa dengan tampilan website yang nampak pada browser. Namun apakah kalian tahu bagaimana website dapat tampil demikian? Terdapat 3 (tiga) fondasi penting dalam membuat website. Pertama adalah HTML, salah satu markup language yang digunakan untuk membuat struktur dan menampilkan konten pada World Wide Web (Website). CSS dan JavaScript merupakan fondasi lainnya yang digunakan untuk mempercantik dan menjadikan website lebih dinamis dan interaktif. </p> <p></p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/1.%20Pengenalan%20HTML/A.%20Pengenalan%20HTML/#apa-itu-html","title":"Apa itu HTML ?","text":"<p>HTML sebenarnya bukanlah bahasa pemrograman, artinya HTML tidak punya kemampuan untuk membuat fungsionalitas yang dinamis. HTML atau singkatan dari Hyper Text Markup Language merupakan kode - kode yang biasanya digunakan browser dalam menampilkan tampilan halaman website yang terdiri dari teks, gambar, audio, vidio. Untuk belajar HTML ada beberapa referensi yang bisa kita pelajari :  </p> <ol> <li>Website pembelajaran seperti W3 School, Free Codecamp, Skilvull, dll  </li> <li>Modul Pembelajaran </li> <li>Youtube Channel seperti Web Programming Unpas, Cara Fajar, dll</li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/1.%20Pengenalan%20HTML/B.%20HTML%20Pertama/","title":"B. HTML Pertama","text":"<p>Sebelum kita membuat website hal yang harus dilakukan adalah kita mempersiapkan apa yang kita butuhkan yaitu:  </p> <ol> <li> <p>Buat Folder     Pada direktori C (atau bisa dimana saja) buat folder baru bernama HTML &amp; pada folder HTML buat folder kembali dengan nama WebDasar  </p> <p></p> </li> <li> <p>Masuk Ke Command Prompt     Pada Folder WebDasar Klik Pada area seperti dibawah ini, lalu ketikan cmd (lalu tekan enter)  </p> <p> </p> </li> <li> <p>Jalankan Texteditor     Pada jendela cmd ketikan \u2018code .\u2019 untuk menjalankan visual studio code</p> <p> </p> </li> <li> <p>Buat File Baru     Pada webdasar buat file baru dengan nama index.html , fitur new file ada pada sebelah kiri visual studio code atau tepatnya di samping nama folder kalian masing - masing  </p> <p> </p> </li> <li> <p>Buat konten     Setelah kita berhasil membuat filenya sekarang kita akan membuat isi konten dari website kita, silahkan tulis text ini di index.html  </p> <p></p> <p></p> </li> </ol> <p>Untuk menjalankannya kita dapat melihat gambar dibawah ini  </p> <p></p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/1.%20Pengenalan%20HTML/C.%20Struktur%20HTML/","title":"C. Struktur HTML","text":"<p>Keterangan</p> <ul> <li>HTML Terkenal dengan kurung nya jadi kita bisa perhatikan di semua barisnya awalnya di mulai dengan &lt; dan diakhiri dengan &gt;</li> <li>Didalam kurung tersebut diberikan istilah elemen / tag contoh <code>&lt;html&gt;</code> disebut tag html</li> <li>Bisa kita lihat bahwasannya html menggunakan bahasa inggris tapi hanya dasar saja seperti head (kepala), body (badan), dllnya.</li> <li><code>&lt;html&gt;</code> : Untuk memberitahukan kpd browser bahwa ini adalah file HTML</li> <li><code>&lt;head&gt;</code> : Berfungsi sebagai tempat disimpannya informasi dari dokumen HTML. Informasi dapat berupa elemen\u00a0meta,\u00a0style,\u00a0atau\u00a0link</li> <li><code>&lt;title&gt;</code> : Judul halaman</li> <li><code>&lt;body&gt;</code> : Seluruh konten yang terdapat pada elemen ini akan ditampilkan pada halaman website. Maka dari itu, elemen ini digunakan untuk menampung seluruh konten atau elemen yang ditampilkan ke dalam jendela browser.</li> <li><code>&lt;h1&gt;</code> : Digunakan untuk membuat tampilan judul. h adalah header / judul sedangan 1 sebagai ukuran huruf (selain h1 ada juga h2,h3,h4,h5,h6)</li> <li><code>&lt;p&gt;</code> : Digunakan untuk membuat tampilan paragraf</li> </ul> <p>Contoh Kode nya:  </p> <p></p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/1.%20Pengenalan%20HTML/D.%20Latihan/","title":"D. Latihan","text":"<p>Setelah kita mempelajari struktur html, heading, paragraf sekarang kita akan mempraktekannya:  </p> <ol> <li>Pada <code>index.html</code> blok semua tulisan</li> <li>Cut atau Potong</li> <li>tekan ! (tanda seru) langsung enter</li> <li>Pastekan tulisan yang tadi di cut ke dalam body</li> <li>Lalu masukkanlah beberapa tag ke dalam tulisannya seperti instruksi dibawah ini  </li> </ol> <p> </p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/A.%20Atribut/","title":"A. Atribut","text":"<p>Atribut pada HTML adalah properti yang ditambahkan ke elemen HTML untuk memberikan informasi lebih lanjut atau mengontrol perilaku elemen tersebut. Contoh penulisan atribut adalah sebagai berikut:  </p> <p></p> <p>contoh lain  </p> <p> </p> <p>Keterangan</p> <ul> <li>Disini ada 2 atribut</li> <li><code>lang</code> : atribut untuk menginformasikan bahwasannya tulisan ini adalah <code>ID</code> atau menggunakan bahasa indonesia</li> <li><code>translate</code> : atribut untuk menginformasikan bahwa tulisan ini tidak bias untuk diartikan  </li> </ul>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/B.%20Paragraf/","title":"B. Paragraf","text":"<p>Paragraf adalah elemen paling mendasar dari sebuah dokumen teks. Pada HTML, kita bisa menunjukkan sebuah paragraf dengan menggunakan elemen <code>&lt;p&gt;</code>, Contoh penulisan paragraf  </p> <p> </p> <p>Ketika menggunakan paragraf pada browser, teks selalu ditampilkan dengan baris baru dan terdapat sedikit jarak (space) antar elemennya.  </p> <p></p> <p>Warning</p> <p>\u201cPastikan kita selalu menggunakan elemen (tags) saat menuliskan teks pada dokumen HTML. Teks yang berada pada dokumen HTML tanpa tags disebut \u201canonymous text\u201d dan ini dapat menyebabkan dokumen HTML menjadi tidak valid.\u201d</p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/C.%20List/1.%20Pengertian%20List/","title":"1. Pengertian List","text":"<p>Tidak semua teks dibungkus oleh paragraf, salah satunya kita dapat menggunakan list. Kita pun terbiasa membuat list dalam kehidupan sehari-hari, baik membuat to-do list atau daftar yang terstruktur sekalipun.  Ada tiga jenis utama list dalam HTML:  </p> <ol> <li>Unordered List (<code>&lt;ul&gt;</code>)</li> <li>Ordered List (<code>&lt;ol&gt;</code>)</li> <li>Description List (<code>&lt;dl&gt;</code>)</li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/C.%20List/2.%20Unordered%20List/","title":"2. Unordered List","text":"<p>Seperti namanya, unordered list merupakan daftar yang tidak mementingkan urutan. Standarnya, unordered list menampilkan bullet pada tiap item list-nya (tetapi kita bisa mengubahnya dengan styling).  </p> <p>Untuk menetapkan konten sebagai unordered list kita gunakan <code>&lt;ul&gt;&lt;/ul&gt;</code> kemudian di dalam elemen tersebut kita gunakan tags <code>&lt;li&gt;&lt;/li&gt;</code> untuk menetapkan item pada list tersebut  </p> <p>Silahkan buat file baru bernama latihanList.html lalu ketikan seperti ini :  </p> <p> </p> <p>Di antara tag elemen <code>&lt;li&gt;</code>, kita dapat mengisikan konten apapun termasuk elemen HTML lain. Contohnya kita dapat memasukan sebuah heading atau paragraf pada item. (Masukkan koding ini dibawah tag penutup ul)</p> <p> </p> <p>Kita juga bisa menyimpan kembali elemen <code>&lt;ul&gt;</code> untuk membuat sebuah nested list  </p> <p></p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/C.%20List/3.%20Ordered%20List/","title":"3. Ordered List","text":"<p>Ordered list digunakan untuk membuat list yang mementingkan urutan. Contohnya, membuat daftar instruksi langkah demi langkah sehingga dibutuhkan urutan yang sesuai. Ordered list bekerja seperti unordered list, namun perbedaanya pada tiap item menampilkan angka bukan sebuah bullet atau simbol. Angka yang ditampilkan, otomatis berurut tiap itemnya, sehingga kita tidak perlu menuliskan secara kasar urutan nomornya. Hal ini tentu mempermudah kita untuk mengorganisir tiap itemnya.</p> <p>Untuk menetapkan konten sebagai ordered list kita gunakan <code>&lt;ol&gt;&lt;/ol&gt;</code>. Sama seperti Unordered list, tiap item dalam list ditetapkan dengan menggunakan tags <code>&lt;li&gt;&lt;/li&gt;</code>.</p> <p>Contoh kode odered list seperti ini :  </p> <p></p> <p>Kita juga dapat memberikan atribut <code>type</code> pada tag <code>&lt;ol&gt;</code> untuk mengganti angka menjadi huruf atau yang lainnya,Beberapa tipe odered list :  </p> Type Attribute Format Contoh <code>1</code> (default) Angka 1, 2, 3, 4, 5 <code>A</code> Huruf besar A, B, C, D, E <code>a</code> Huruf kecil a, b, c, d, e <code>I</code> Angka Romawi besar I, II, III, IV, V <code>i</code> Angka Romawi kecil i, ii, iii, iv, v"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/C.%20List/4.%20Description%20List/","title":"4. Description List","text":"<p>Digunakan untuk menampilkan daftar deskripsi. Terdiri dari istilah dan definisi. Biasanya digunakan untuk kamus atau daftar definisi.  </p> <p>Contoh kode odered list seperti ini :</p> <p> </p> <p>Keterangan</p> <ul> <li><code>&lt;dl&gt;</code> : mendefinisikan description list.</li> <li><code>&lt;dt&gt;</code> : (definition term) untuk istilah.</li> <li><code>&lt;dd&gt;</code> : (definition description) untuk penjelasan atau deskripsi istilah tersebut.</li> </ul>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/C.%20List/5.%20Implementasi/","title":"5. Implementasi","text":"<p>Setelah kita mempelajari list sekarang kita akan menerapkannya pada latihan kita sebelumnya. Tambahkan kode ini:  </p> <p></p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/D.%20Image/1.%20Image/","title":"1. Image","text":"<p>Tanpa gambar sebuah website tentu tidak akan menarik, bukan? Ada beberapa alasan mengapa website perlu gambar. Contohnya kita perlu menampilkan logo perusahaan, ilustrasi, diagram, dan sebagainya. </p> <p>Pada HTML untuk menampilkan sebuah gambar kita bisa menggunakan tag <code>&lt;img&gt;</code>. Berbeda dengan elemen lain, elemen <code>&lt;img&gt;</code> tidak menuliskan konten diantara tag pembuka dan tag penutup sebagaimana tag lainnya. Namun untuk menetapkan gambar yang ditampilkan kita gunakan sebuah atribut src</p> <p>Atribut umum yang biasa digunakan di <code>&lt;img&gt;</code> : - <code>src</code> (source) :  Menentukan sumber atau lokasi gambar - <code>alt</code> (alternatif) : Menyediakan teks alternatif jika gambar tidak bisa ditampilkanberhasil ditampilkan - <code>width</code> dan <code>height</code> : Mengatur lebar dan tinggi gambar (opsional) - <code>title</code> : Menambahkan teks yang muncul saat pengguna mengarahkan kursor ke gambar  </p> <p>Contohnya </p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/D.%20Image/2.%20Image%20Offline/","title":"2. Image Offline","text":"<p>Untuk menampilkan gambar yang disimpan secara lokal (offline), Anda perlu memastikan bahwa jalur (path) menuju gambar sesuai dengan struktur folder proyek  </p> <ol> <li> <p>Jika gambar berada di folder yang sama dengan file HTML:</p> <p>Misalkan file HTML dan gambar berada di folder yang sama, cukup gunakan nama file gambar dalam atribut src:  </p> <p> </p> </li> <li> <p>Jika gambar berada di folder berbeda:  </p> <p>Jika gambar berada di subfolder, jalur relatif harus menyertakan nama folder. Misalnya, jika gambar berada di dalam folder bernama images:  </p> <p> </p> <p>Atau, jika Anda ingin menampilkan gambar dari folder tingkat atas (di luar folder saat ini), Anda bisa menggunakan <code>../</code> untuk menuju folder sebelumnya:  </p> <p></p> </li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/D.%20Image/3.%20Image%20Online/","title":"3. Image Online","text":"<p>Untuk menampilkan gambar secara online kita dapat mencari gambar dari internet bisa melalui google gambar atau referensi gambar yang lainnya. Kenapa gambar online karena biar kita gampang untuk mempraktekan, mudah untuk menggunakannya dan tentunya akan hemat storage atau penyimpanan. Cara mencarinya seperti ini:  </p> <ol> <li> <p>Buka Google Gambar &gt; cari gambar yang diinginkan  </p> <p> </p> </li> <li> <p>Pilih 1 gambar &gt; klik kanan pada gambar (kalau di hp ditekan yang lama) &gt; pilih open image in new tab (kalau di hp buka gambar di tab baru)  </p> <p></p> </li> <li> <p>Buka tab baru yang berisikan gambar lalu perhatikan pada link atau urlnya  </p> </li> <li> <p>Pastikan url tersebut bertipe atau ektensi gambar (jpg, png, gif, semacamnya)  </p> <p></p> </li> <li> <p>Copy url  </p> </li> <li> <p>Masukkan pada kode urlnya bisa di taruh pada atribut src contoh kodenya seperti ini:  </p> <p></p> </li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/D.%20Image/4.%20Implementasi/","title":"4. Implementasi","text":"<p>Setelah kita mempelajari image sekarang kita akan menerapkannya pada latihan kita sebelumnya. Masukkan gambar - gambar ini:  </p> <ol> <li> <p>Untuk di bawah judul sejarah </p> </li> <li> <p>Untuk di bawah judul geografis </p> </li> <li> <p>Untuk di bawah judul Taman Buah Mekarsari </p> </li> <li> <p>Untuk di bawah judul Villa Khayangan </p> </li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/E.%20Text%20Format/1.%20Text%20Format/","title":"1. Text Format","text":"<p>Pada HTML, teks dapat diformat menggunakan berbagai tag yang mengontrol tampilan teks di halaman web. Berikut adalah beberapa tag teks format dasar dalam HTML :  </p> <ol> <li>Heading (h1)</li> <li>Paragraf (p)</li> <li> <p>Bold (tebal)  </p> <p>Membuat teks menjadi tebal. Contohnya Tulisan Bold<pre><code>&lt;b&gt;Teks ini tebal&lt;/b&gt;\n</code></pre></p> <p>Atau bisa juga menggunakan <code>&lt;strong&gt;</code> </p> Tulisan Strong<pre><code>&lt;strong&gt;Teks ini juga tebal&lt;/strong&gt;\n</code></pre> </li> <li> <p>Italic (Miring)  </p> <p>Membuat teks menjadi miring. Contohnya  </p> Tulisan Miring<pre><code>&lt;i&gt;Teks ini miring&lt;/i&gt;\n</code></pre> <p>Atau bisa juga menggunakan <code>&lt;em&gt;</code> </p> Tulisan Miring<pre><code>&lt;em&gt;Teks ini juga miring&lt;/em&gt;\n</code></pre> </li> <li> <p>Underline (Garis Bawah)  </p> <p>Menambahkan garis bawah pada teks. Contohnya  </p> Tulisan Underline<pre><code>&lt;u&gt;Teks ini bergaris bawah&lt;/u&gt;\n</code></pre> </li> <li> <p>Strikethrough (Garis Tengah)  </p> <p>Memberi garis di tengah teks. Contohnya  </p> Tulisan Coret<pre><code>&lt;s&gt;Teks ini tercoret&lt;/s&gt;\n</code></pre> <p>Atau bisa juga menggunakan <code>&lt;del&gt;</code>.</p> Tulisan Coret<pre><code>&lt;del&gt;Teks ini juga tercoret&lt;/del&gt;\n</code></pre> </li> <li> <p>Superscript (Teks Atas)  </p> <p>Digunakan untuk menampilkan teks di atas garis teks normal. Contohnya  </p> Tulisan Atas<pre><code>&lt;sup&gt;Teks atas&lt;/sup&gt;\n</code></pre> </li> <li> <p>Subscript (Teks Bawah)  </p> <p>Digunakan untuk menampilkan teks di bawah garis teks normal. Contohnya  </p> Tulisan Bawah<pre><code>&lt;sub&gt;Teks bawah&lt;/sub&gt;\n</code></pre> </li> <li> <p>Blockquote  </p> <p>Digunakan untuk mengutip teks dengan indentasi. Contohnya  </p> Tulisan Kutipan<pre><code>&lt;blockquote&gt;Ini adalah kutipan.&lt;/blockquote&gt;\n</code></pre> </li> <li> <p>Preformatted Text (Teks Praformat)  </p> <p>Menampilkan teks dengan format asli, termasuk spasi dan baris baru. Contohnya</p> Tulisan Praformat<pre><code>&lt;pre&gt;\nTeks ini \nakan tampil persis \nseperti ditulis.\n&lt;/pre&gt;\n</code></pre> </li> <li> <p>Code  </p> <p>Untuk menampilkan kode atau teks yang perlu ditampilkan seperti kode. Contohnya  </p> Tulisan Code<pre><code>&lt;code&gt;console.log('Hello World');&lt;/code&gt;\n</code></pre> </li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/1.%20Pengenalan%20Link/","title":"1. Pengenalan Link","text":"<p>Dalam HTML, link atau tautan digunakan untuk menghubungkan satu halaman web dengan halaman lainnya atau dengan sumber daya lainnya, seperti file, gambar, atau dokumen. Elemen HTML yang digunakan untuk membuat link adalah <code>&lt;a&gt;</code>, yang dikenal sebagai \"anchor\" tag.</p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/1.%20Pengenalan%20Link/#struktur-dasar-tag-link","title":"Struktur Dasar Tag Link","text":"<p>Berikut adalah struktur dasar dari tag link HTML:</p> Contoh Link / Anchor<pre><code>&lt;a href=\"URL tujuan\"&gt;Teks Link&lt;/a&gt;\n</code></pre> <p>Penjelasan</p> <ul> <li><code>&lt;a&gt;</code>         : Tag pembuka untuk anchor, yang digunakan untuk membuat link.  </li> <li><code>href</code>        : Atribut yang menentukan tujuan dari link, misalnya URL atau jalur file.  </li> <li><code>Teks Link</code>   : Teks yang akan ditampilkan kepada pengguna dan dapat diklik</li> <li>Selain teks link anchor bisa juga diisi dengan tag atau elemen lainnya seperti gambar, video, dll.</li> </ul>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/1.%20Pengenalan%20Link/#atribut-tambahan","title":"Atribut Tambahan","text":"<ol> <li> <p>Target: Menentukan bagaimana link akan dibuka.  </p> <ul> <li>_self: Membuka link di tab atau jendela yang sama (default).</li> <li>_blank: Membuka link di tab atau jendela baru.  Contoh: Buka di Tab Baru</li> </ul> </li> <li> <p>rel: Menentukan hubungan antara halaman saat ini dan halaman yang ditautkan.</p> <p>Contoh penggunaan: rel=\"noopener\" atau rel=\"nofollow\".</p> </li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/1.%20Pengenalan%20Link/#jenis-link","title":"Jenis Link","text":"<p>Terdapat 4 jenis link yang bisa dijadikan sebagai tujuan yakni:  </p> <ol> <li>Internal Link (file)  </li> <li>Eksternal Link (URL)  </li> <li>Link Buntu  </li> <li>Link Anchor</li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/2.%20Internal%20Link/","title":"2. Internal Link","text":"<p>Internal Link adalah link yang menuju ke domain atau halaman web itu sendiri. Internal link biasanya digunakan untuk menghubungkan halaman yang satu dengan yang lainnya dalam satu website atau domain. Contohnya :  </p> <p>Buat 3 buah file baru yang bernama :</p> <ol> <li>halaman1.html  </li> <li>halaman2.html </li> <li>halaman3.html </li> </ol> <p>lalu masukkan kode ini  </p> Halaman 1<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Halaman 1&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n        Halaman 1\n    &lt;/center&gt;\n&lt;p&gt;\n&lt;a href=\"halaman1.html\"&gt;Halaman 1&lt;/a&gt;\n&lt;a href=\"halaman2.html\"&gt;Halaman 2&lt;/a&gt;\n&lt;a href=\"halaman3.html\"&gt;Halaman 3&lt;/a&gt;\n&lt;/p&gt;\n&lt;br&gt;\n&lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed fermentum, ipsum sed finibus scelerisque, velit dui\n        rutrum enim, a tristique nisi velit et neque. Donec vel justo a justo facilisis dignissim. Donec pharetra\n        facilisis neque, ut luctus ipsum pulvinar id. Nulla facilisi. Integer vel nulla ut risus sagittis auctor. Sed\n        non felis vel velit semper luctus. Nulla facilisi. Sed vel justo a justo facilisis dignissim. Donec pharetra\n        facilisis neque, ut luctus ipsum pulvinar id. Nulla facilisi.\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Halaman 2<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Halaman 2&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n        Halaman 2\n    &lt;/center&gt;\n&lt;p&gt;\n&lt;a href=\"halaman1.html\"&gt;Halaman 1&lt;/a&gt;\n&lt;a href=\"halaman2.html\"&gt;Halaman 2&lt;/a&gt;\n&lt;a href=\"halaman3.html\"&gt;Halaman 3&lt;/a&gt;\n&lt;/p&gt;\n&lt;br&gt;\n&lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed fermentum, ipsum sed finibus scelerisque, velit dui\n        rutrum enim, a tristique nisi velit et neque. Donec vel justo a justo facilisis dignissim. Donec pharetra\n        facilisis neque, ut luctus ipsum pulvinar id. Nulla facilisi. Integer vel nulla ut risus sagittis auctor. Sed\n        non felis vel velit semper luctus. Nulla facilisi. Sed vel justo a justo facilisis dignissim. Donec pharetra\n        facilisis neque, ut luctus ipsum pulvinar id. Nulla facilisi.\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> Halaman 3<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Halaman 3&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n        Halaman 3\n    &lt;/center&gt;\n&lt;p&gt;\n&lt;a href=\"halaman1.html\"&gt;Halaman 1&lt;/a&gt;\n&lt;a href=\"halaman2.html\"&gt;Halaman 2&lt;/a&gt;\n&lt;a href=\"halaman3.html\"&gt;Halaman 3&lt;/a&gt;\n&lt;/p&gt;\n&lt;br&gt;\n&lt;p&gt;\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed fermentum, ipsum sed finibus scelerisque, velit dui\n        rutrum enim, a tristique nisi velit et neque. Donec vel justo a justo facilisis dignissim. Donec pharetra\n        facilisis neque, ut luctus ipsum pulvinar id. Nulla facilisi. Integer vel nulla ut risus sagittis auctor. Sed\n        non felis vel velit semper luctus. Nulla facilisi. Sed vel justo a justo facilisis dignissim. Donec pharetra\n        facilisis neque, ut luctus ipsum pulvinar id. Nulla facilisi.\n    &lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Penjelasan</p> <ul> <li><code>&lt;a href=\"halaman1.html\"&gt;Halaman 1&lt;/a&gt;</code> : Ketika halaman 1 di klik maka akan diarahkan ke halaman <code>halaman1.html</code> </li> <li><code>br</code> : Break atau digunakan untuk memberikan enter pada HTML</li> </ul>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/3.%20Eksternal%20Link/","title":"3. Eksternal Link","text":"<p>Eksternal Link adalah link yang menuju ke sebuah url atau domain lain. Contohnya :  </p> Contoh eksternal link<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Eksternal LINK&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n        Eksternal LINK\n    &lt;/center&gt;\n&lt;p&gt;\n&lt;a href=\"halaman1.html\"&gt;Halaman 1&lt;/a&gt;\n&lt;a href=\"halaman2.html\"&gt;Halaman 2&lt;/a&gt;\n&lt;a href=\"halaman3.html\"&gt;Halaman 3&lt;/a&gt;\n&lt;/p&gt;\n&lt;br&gt;\n&lt;p&gt;Follow &amp; Subscribe Sosmed SMK MQ&lt;/p&gt;\n&lt;p&gt;IG : &lt;a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwjRv8Xn27iIAxVGXGwGHXN5DMUQFnoECBgQAQ&amp;url=https%3A%2F%2Fwww.instagram.com%2Fsmkmadinatulquran%2F&amp;usg=AOvVaw23fOjYxQ65vjGxIYpDRp5E&amp;opi=89978449\" target=\"_blank\"&gt;@smkmadinatulquran&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;FB : &lt;a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwiRwJf927iIAxWuUGcHHfnWIFYQFnoECBYQAQ&amp;url=https%3A%2F%2Fwww.facebook.com%2Fsmkmadinatulquran%2F&amp;usg=AOvVaw2kJ9Bur0fDQtu94mjmW2z3&amp;opi=89978449\" target=\"_blank\"&gt;SMK Madinatul Qur'an&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;YT : &lt;a href=\"https://www.google.com/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=&amp;cad=rja&amp;uact=8&amp;ved=2ahUKEwi9up2e3LiIAxVUUGwGHQITKR8QFnoECBUQAQ&amp;url=https%3A%2F%2Fwww.youtube.com%2Fchannel%2FUCLQ2_4V-t11pUG0pATDXK6g&amp;usg=AOvVaw3S1K9WJhr211rkU1j_AtbB&amp;opi=89978449\" target=\"_blank\"&gt;SMK Madinatulquran&lt;/a&gt;&lt;/p&gt;\n&lt;br&gt;\n&lt;a href=\"https://wa.me/621111111111111?text=Hallo\" target=\"_blank\"&gt;&lt;img src=\"https://res.cloudinary.com/dlztfnjur/image/upload/v1725983497/Pngtree_whatsapp_icon_logo_3560534_cmugnm.png\" alt=\"Send Wa\" width=\"50\"&gt;&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Penjelasan</p> <ul> <li>Semua url bisa dimasukkan asal di depannya harus diberikan http atau https</li> <li>Target blank akan membuat ketika anchor di klik akan membuka tab baru</li> <li><code>https://wa.me/621111111111111?text=Hallo</code> : url ini akan mengirim wa ke nomor 621111111111111 (nomor ini bisa diganti menjadi nomor masing - masing) dan mengirim tulisan hallo</li> </ul>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/4.%20Link%20Buntu/","title":"4. Link Buntu","text":"<p>Link buntu adalah link yang tidak akan membuka apa-pun. Ia biasanya digunakan sebagai placeholder atau sampel saja. Untuk membuat link buntu kita dapat mengisi anchor dengan simbol <code>#</code>. Contohnya  </p> Contoh link buntu<pre><code>&lt;a href=\"#\"&gt;Link Buntu&lt;/a&gt;\n</code></pre>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/F.%20Link/5.%20Link%20Anchor/","title":"5. Link Anchor","text":"<p>Link anchor adalah link yang termasuk ke dalam internal link tetapi perbedaannya link anchor ini akan mengarahkan ke suatu section atau bagian tertentu dalam website melalui atribut id.</p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/G.%20Table/1.%20Table/","title":"1. Table","text":"<p>Dalam HTML, Kita dapat membuat tabel menggunakan elemen <code>&lt;table&gt;</code>. Tabel terdiri dari beberapa elemen utama, yaitu:  </p> <ol> <li><code>&lt;table&gt;</code> : elemen induk untuk tabel</li> <li><code>&lt;tr&gt;</code> (Table Row) : digunakan untuk mendefinisikan baris di tabel</li> <li><code>&lt;th&gt;</code> (Table Header) : digunakan untuk mendefinisikan sel di baris header atau digunakan untuk judul di dalam tabelnya.</li> <li><code>&lt;td&gt;</code> (Table Data) : digunakan untuk mendefinisikan sel data di dalam tabel.  </li> </ol> <p>Berikut Contoh sederhananya:  </p> table.html<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;title&gt;Belajar Tabel&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table border=\"1\"&gt;\n&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;No&lt;/th&gt;\n&lt;th&gt;Mapel&lt;/th&gt;\n&lt;th&gt;Catatan&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;1&lt;/td&gt;\n&lt;td&gt;Matematika&lt;/td&gt;\n&lt;td&gt;Belajar aljabar&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;2&lt;/td&gt;\n&lt;td&gt;Bahasa Inggris&lt;/td&gt;\n&lt;td&gt;Grammar&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;3&lt;/td&gt;\n&lt;td&gt;P5&lt;/td&gt;\n&lt;td&gt;Membuat Sabun&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Penjelasan</p> <ul> <li>Bagian <code>&lt;thead&gt;</code> digunakan untuk header tabel.  </li> <li>Bagian <code>&lt;tbody&gt;</code> berisi baris data yang ingin ditampilkan.</li> </ul> <p>Kita juga bisa menambahkan lebih banyak baris atau menyesuaikan dengan data yang diperlukan</p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/H.%20Form/1.%20Penjelasan%20Form/","title":"1. Penjelasan Form","text":"<p>Form dalam HTML adalah salah satu elemen utama yang digunakan untuk interaksi dengan pengguna. Formulir ini memungkinkan pengguna untuk memasukkan informasi seperti teks, pilihan, dan file yang kemudian dapat dikirim ke server untuk diproses. Form biasanya digunakan dalam kombinasi dengan tag HTML lainnya dan memiliki berbagai jenis input untuk memenuhi kebutuhan yang berbeda. Untuk menggunakan form kita dapat menggunakan tag / elemen <code>&lt;form&gt;</code>. Ada beberapa atribut dalam form yaitu:  </p> <ol> <li> <p>Action     Menentukan URL di mana data form akan dikirim setelah disubmit.  </p> contoh form action<pre><code>&lt;form action=\"/submit_form\"&gt;\n</code></pre> </li> <li> <p>Method     Menentukan metode HTTP yang digunakan untuk mengirimkan data (biasanya GET atau POST). Get pengiriman data yang dikirim menggunakan URL sedangkan Post pengiriman data yang dirahasiakan atau tidak diperlihatkan data yang dikirimnya  </p> contoh form method<pre><code>&lt;form method=\"POST\"&gt;\n</code></pre> </li> <li> <p>Enctype     Untuk mengatur tipe encoding saat form dikirim. Ini penting ketika form berisi upload file.  </p> contoh form method<pre><code>&lt;form enctype=\"multipart/form-data\"&gt;\n</code></pre> </li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/H.%20Form/2.%20Input/","title":"2. Input","text":"<p><code>&lt;input&gt;</code> adalah elemen yang paling umum digunakan untuk menerima input / masukkan pengguna. Beberapa tipe input yang dapat digunakan:  </p> <ol> <li> <p>Tipe Text (type=\"text\")  </p> <p>Input ini digunakan untuk memasukkan teks sederhana. Contohnya :  </p> contoh tipe form<pre><code>&lt;input type=\"text\" name=\"username\" placeholder=\"Enter your username\"&gt;\n</code></pre> <p>Penjelasan</p> <ul> <li><code>name=\"username\"</code> : Menamai data input dengan nama username</li> <li><code>placeholder</code> : Menampilkan informasi sebelum input diisi oleh pengguna</li> </ul> </li> <li> <p>Tipe Password (type=\"password\")  </p> <p>Digunakan untuk memasukkan password, di mana teks yang dimasukkan akan disembunyikan. Contohnya :  </p> contoh tipe password<pre><code>&lt;input type=\"password\" name=\"password\" placeholder=\"Enter your password\"&gt;\n</code></pre> </li> <li> <p>Tipe email (type=\"email\")  </p> <p>Input ini memvalidasi apakah pengguna memasukkan alamat email dengan benar. Contohnya :  </p> contoh tipe email<pre><code>&lt;input type=\"email\" name=\"email\" placeholder=\"Enter your email\"&gt;\n</code></pre> </li> <li> <p>Tipe number (type=\"number\")  </p> <p>Membatasi input ke angka saja, bisa menambahkan atribut seperti min, max, dan step. Contohnya :  </p> contoh tipe number<pre><code>&lt;input type=\"number\" name=\"age\" min=\"1\" max=\"100\"&gt;\n</code></pre> </li> <li> <p>Tipe file (type=\"file\")  </p> <p>Untuk mengunggah file. Contohnya :</p> contoh tipe file<pre><code>&lt;input type=\"file\" name=\"file\"&gt;\n</code></pre> </li> <li> <p>Tipe radio (type=\"radio\")  </p> <p>Untuk membuat pilihan tunggal dari beberapa opsi. Contohnya :  </p> contoh tipe radio<pre><code>&lt;input type=\"radio\" name=\"gender\" value=\"male\"&gt; Male\n&lt;input type=\"radio\" name=\"gender\" value=\"female\"&gt; Female\n</code></pre> </li> <li> <p>Tipe checkbox (type=\"checkbox\")  </p> <p>Untuk pilihan yang memungkinkan lebih dari satu opsi dipilih. Contohnya :  </p> contoh tipe checkbox<pre><code>&lt;input type=\"checkbox\" name=\"subscribe\" value=\"newsletter\"&gt; Subscribe to newsletter\n</code></pre> </li> <li> <p>Tipe date (type=\"date\")  </p> <p>Input ini menyediakan pilihan untuk memasukkan tanggal. Contohnya :  </p> contoh tipe file<pre><code>&lt;input type=\"date\" name=\"birthday\"&gt;\n</code></pre> </li> <li> <p>Tipe color (type=\"color\")</p> <p>Menyediakan input untuk memilih warna. Contohnya :  </p> contoh tipe color<pre><code>&lt;input type=\"color\" name=\"favcolor\"&gt;\n</code></pre> </li> <li> <p>Tipe Hidden (type=\"hidden\")</p> <p>Input ini tidak terlihat oleh pengguna dan digunakan untuk menyimpan data yang diperlukan untuk pengolahan, tetapi tidak perlu dimodifikasi oleh pengguna. Contohnya :  </p> contoh tipe hidden<pre><code>&lt;input type=\"hidden\" name=\"userid\" value=\"12345\"&gt;\n</code></pre> </li> </ol> <p>Masih terdapat beberapa input yang belum dijelaskan namun input - input tersebut jarang digunakan.</p>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/H.%20Form/3.%20Isi%20Lainnya/","title":"3. Isi Lainnya","text":"<p>Selain tag input ada beberapa tag yang juga yang sejenis dengan input yakni:  </p> <ol> <li> <p>Textarea  </p> <p>digunakan untuk input teks multi-baris, seperti komentar atau deskripsi panjang. Contohnya :  </p> contoh textarea<pre><code>&lt;textarea name=\"message\" rows=\"4\" cols=\"50\" placeholder=\"Write your message here\"&gt;&lt;/textarea&gt;\n</code></pre> <p>Penjelasan</p> <ul> <li><code>rows</code> : jumlah baris pada textarea atau untuk mengatur tinggi pada textarea  </li> <li><code>cols</code> : jumlah kolom pada textarea atau untuk mengatur lebar pada textarea  </li> </ul> </li> <li> <p>Select (Dropdown)  </p> <p>Elemen <code>&lt;select&gt;</code> memungkinkan pengguna memilih satu atau lebih pilihan dari daftar. Contohnya :  </p> contoh select dropdown<pre><code>&lt;select name=\"kelas\"&gt;\n&lt;option value=\"xrpl\"&gt;X RPL&lt;/option&gt;\n&lt;option value=\"xirpl\"&gt;XI RPL&lt;/option&gt;\n&lt;option value=\"xiirpl\"&gt;XII RPL&lt;/option&gt;\n&lt;/select&gt;\n</code></pre> </li> <li> <p>Button  </p> <p>Digunakan untuk membuat tombol dalam form. Tombol bisa berfungsi sebagai submit (mengirim data), reset (menghapus data yang sudah diinput), atau hanya sebagai tombol biasa yang dikendalikan oleh JavaScript. Contohnya :  </p> contoh tipe file<pre><code>&lt;button type=\"submit\"&gt;Submit Form&lt;/button&gt;\n</code></pre> </li> <li> <p>Label  </p> <p>Digunakan untuk memberikan deskripsi atau keterangan yang jelas tentang elemen form seperti input teks, tombol radio, atau checkbox. Tujuan utama dari elemen <code>&lt;label&gt;</code> adalah untuk mengaitkan teks deskriptif dengan elemen input yang terkait, sehingga pengguna dapat dengan mudah memahami apa yang harus dimasukkan dan apabila label ini sudah di kaitkan dengan sebuah input atau semacamnya nantinya label bisa di klik dan browser akan merespon dengan mengarahkan (auto focus) ke input yang dikaitkan. Contohnya :  </p> contoh tipe file<pre><code>&lt;label for=\"username\"&gt;Username:&lt;/label&gt;\n&lt;input type=\"text\" id=\"username\" name=\"username\"&gt;\n</code></pre> <p>Penjelasan</p> <ul> <li>Elemen <code>&lt;label&gt;</code> dengan teks \"Username:\" menjelaskan bahwa input berikutnya adalah untuk memasukkan username.  </li> <li>Atribut for pada elemen <code>&lt;label&gt;</code> menghubungkan label dengan elemen input yang memiliki atribut id yang sama (dalam hal ini, id=\"username\"). Ini membantu dalam aksesibilitas, terutama bagi pengguna dengan alat bantu seperti screen reader.</li> </ul> </li> </ol>"},{"location":"0.%20HTML%20%26%20CSS/HTML/2.%20HTML%20Lebih%20Dalam/H.%20Form/4.%20Latihan/","title":"4. Latihan","text":"<p>Latihan dapat dikerjakan pada MySMK</p>"},{"location":"1.%20TypeScript/1.%20Setup/","title":"1. Setup","text":""},{"location":"1.%20TypeScript/1.%20Setup/#apa-itu-typescript","title":"Apa itu TypeScript?","text":"<ol> <li>TypeScript menambahkan sintaks tambahan ke JavaScript untuk mendukung integrasi yang lebih erat dengan editor Anda. Hal ini memungkinkan untuk menangkap kesalahan secara dini di dalam editor Anda.</li> <li>Kode TypeScript akan diubah menjadi JavaScript ketika dijalankan di mana pun baik itu di browser maupun di server.</li> <li>TypeScript membuat JavaScript dapat menggunakan static typing yang berarti tipe data variabel harus ditentukan saat deklarasi, sehingga lebih aman dan mudah dideteksi jika ada kesalahan</li> </ol> <p>Sumber : https://www.typescripttutorial.net/typescript-tutorial/what-is-typescript/</p>"},{"location":"1.%20TypeScript/1.%20Setup/#mengapa-harus-mengguakan-typescript","title":"Mengapa harus mengguakan TypeScript?","text":""},{"location":"1.%20TypeScript/1.%20Setup/#tujuan-utama-mengguakna-typescript","title":"Tujuan Utama mengguakna TypeScript ?","text":"<ol> <li>TypeScript meningkatkan produktivitas dengan membantu menghindari kesalahan (bug) dalam pengembangan perangkat lunak.</li> <li>TypeScript membawa fitur-fitur JavaScript masa depan ke saat ini.</li> </ol>"},{"location":"1.%20TypeScript/1.%20Setup/#setup-typescript","title":"Setup TypeScript","text":"<ol> <li>Install Node.js (https://nodejs.org/en)</li> <li>Install Kompiler TypeScript</li> </ol> <p>terminal<pre><code>npm install -g typescript\ntsc --v\nnpm install -g ts-node\nnpm install -g nodemon\nnpm init\ntsc --init\n</code></pre> </p> <ol> <li>Konfigurasi Basic File tsconfig.json</li> </ol> tsconfig.json<pre><code>{\n\"compilerOptions\": {\n...\n\"rootDir\": \"./src\",\n\"outDir\": \"./build\",\n\"noEmitOnError\": true,\n...\n},\n\"include\": [\"src\"]\n}\n</code></pre> <ol> <li>Konfigurasi File package.json</li> </ol> package.json<pre><code>{\n\"name\": \"typescript\",\n\"version\": \"1.0.0\",\n\"description\": \"\",\n\"main\": \"index.js\",\n\"scripts\": {\n\"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\",\n\"build\" : \"tsc -w\",\n\"dev\" : \"nodemon src/index.ts\"\n},\n\"author\": \"\",\n\"license\": \"ISC\"\n}\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/","title":"2. TypeScript Type","text":""},{"location":"1.%20TypeScript/2.BasicType/#1-apa-itu-type-dalam-typescript","title":"1. Apa itu Type dalam TypeScript?","text":"<p>Dalam TypeScript, tipe (<code>type</code>) merupakan pada fitur yang memungkinkan untuk mendefinisikan tipe data yang dapat digunakan oleh<code>variabel</code>, <code>function</code> , <code>return</code> suatu <code>function</code>, dan struktur data lainnya dalam kode. <code>Type</code> memungkinkan kita untuk menyatakan jenis nilai yang diharapkan atau diperbolehkan dalam berbagai bagian kode.</p> <p>TypeScript menyediakan berbagai jenis tipe data, seperti <code>number</code>, <code>string</code>,<code>boolean</code>, <code>object</code>, <code>array</code>, <code>null</code>, <code>undefine</code>d, dan banyak lagi. Selain itu, kita juga dapat membuat tipe khusus dengan menggunakan <code>interface</code>, <code>union types</code>, <code>tuple types</code>, <code>function types</code>, dan jenis lainnya.</p> <p>contoh penggunakan <code>type</code> dalam typescript</p> contoh type<pre><code>let age: number = 25;\nlet name: string = \"John Doe\";\nlet isStudent: boolean = true;\nlet person: { name: string; age: number } = { name: \"Jane Smith\", age: 30 };\nfunction addNumbers(a: number, b: number): number {\nreturn a + b;\n}\nlet numbers: number[] = [1, 2, 3, 4, 5];\nlet mixedValues: (string | number)[] = [\"Hello\", 10, \"World\", 20];\ninterface User {\nname: string;\nage: number;\nemail: string;\n}\nlet user: User = { name: \"Alice\", age: 28, email: \"alice@example.com\" };\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#2-annotations-type","title":"2. Annotations Type","text":"<p>TypeScript menggunakan type <code>annotations</code> secara eksplisit untuk menentukan tipe data bagi identifikasi seperti <code>variabel</code>, <code>function</code>, objek, dan lain-lain. TypeScript menggunakan sintaksis <code>:</code> sebagai  <code>annotations</code>.</p> contoh penggunaan type annotations<pre><code>// Notasi tipe untuk variabel\nlet age: number = 30;\nlet name: string = \"John Doe\";\nlet isStudent: boolean = true;\n// Notasi tipe untuk parameter fungsi dan tipe kembalian\nfunction addNumbers(a: number, b: number): number {\nreturn a + b;\n}\n// Notasi tipe untuk properti objek\nlet person: { name: string; age: number } = { name: \"Jane Smith\", age: 25 };\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#3-tipe-data-number","title":"3. Tipe Data Number","text":"<p>Tipe data <code>number</code> adalah salah satu tipe data dasar yang ada dalam bahasa pemrograman TypeScript (dan juga JavaScript). Tipe data <code>number</code> digunakan untuk mewakili angka numerik, baik bilangan bulat (integer) maupun bilangan desimal (floating-point).</p> contoh tipe data number<pre><code>let age: number = 30; // Bilangan bulat\nlet pi: number = 3.14; // Bilangan desimal\nlet temperature: number = -10.5; // Bilangan desimal negatif\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#4-tipe-data-string","title":"4. Tipe Data String","text":"<p>Tipe data <code>string</code> adalah salah satu tipe data dasar yang ada dalam bahasa pemrograman TypeScript (dan juga JavaScript). Tipe data <code>string</code> digunakan untuk mewakili data berupa teks atau urutan karakter, seperti kata, kalimat, atau kode yang terdiri dari huruf, angka, atau simbol lainnya.</p> contoh tipe data string<pre><code>let name: string = \"John Doe\"; // Teks dalam tanda kutip ganda\nlet message: string = \"Hello, TypeScript!\"; // Teks dalam tanda kutip satu\nlet code: string = `const x = 10;`; // Teks dalam backticks (template literals)\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#5-tipe-data-boolean","title":"5. Tipe Data Boolean","text":"<p>Tipe data <code>boolean</code> adalah salah satu tipe data dasar yang ada dalam bahasa pemrograman TypeScript (dan juga JavaScript). Tipe data <code>boolean</code> hanya memiliki dua nilai yang mungkin: <code>true</code> (benar) atau <code>false</code> (salah).</p> <p>Variabel dengan tipe data <code>boolean</code> digunakan untuk menyimpan nilai kebenaran dari suatu pernyataan atau kondisi. Biasanya, tipe data ini digunakan dalam situasi di mana kita perlu menyatakan suatu pernyataan sebagai benar atau salah.</p> contoh tipe data boolean<pre><code>let isReady: boolean = true;\nlet isLogged: boolean = false;\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#6-tipe-data-array","title":"6. Tipe Data Array","text":"<p>Dalam bahasa pemrograman TypeScript, tipe data <code>array</code> digunakan untuk menyatakan kumpulan nilai dengan tipe yang sama yang disimpan dalam urutan tertentu. <code>Array</code> adalah struktur data yang memungkinkan kita untuk menyimpan lebih dari satu nilai dalam satu variabel.</p> contoh tipe data array<pre><code>//1. Array of Number\n//type interface\nlet list1 = [1, 2, 3, 4];\n//squere bracket\nlet list1_2: number[] = [1, 2, 2, 3];\n//generic Array\nlet list1_3: Array&lt;number&gt; = [1, 2, 2, 22];\n//2. Array String\n//squere bracket\nlet list2: string[] = [\"satu\", \"dua\", \"tiga\"];\n//3. Array Campuran\n//squere bracket\nlet list3: (number | string | boolean)[] = [1, \"dua\", 2, 3, true];\n//4.Array of Object\n//squere bracket\nlet list4_1: { color: string; index: number }[] = [\n{\ncolor: \"blue\",\nindex: 1,\n},\n{\ncolor: \"red\",\nindex: 2,\n},\n];\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#7-tipe-data-tuple","title":"7. Tipe Data Tuple","text":"<p>Di dalam TypeScript, sebuah <code>tuple</code> adalah tipe data yang mirip dengan <code>array</code>, tetapi dengan beberapa perbedaan penting. <code>Tuple</code> memungkinkan kita untuk menyimpan kumpulan nilai dengan tipe data yang berbeda dan tetap mempertahankan urutan nilai tersebut. Berbeda dengan <code>array</code>, di mana semua elemen harus memiliki tipe data yang sama, <code>tuple</code> memungkinkan kombinasi tipe data yang berbeda untuk setiap elemennya.</p> contoh tipe data tuple<pre><code>let myTuple: [number, string, boolean];\nmyTuple = [10, \"Hello\", true];\nconsole.log(myTuple[0]); // Output: 10\nconsole.log(myTuple[1]); // Output: \"Hello\"\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#8-tipe-data-object","title":"8. Tipe Data Object","text":"<p>Dalam bahasa pemrograman TypeScript, tipe data <code>object</code> adalah tipe yang mewakili struktur data yang kompleks atau objek yang tidak dapat diidentifikasi lebih spesifik dengan tipe data lainnya seperti number, string, boolean, atau array. Tipe data <code>object</code> mencakup objek JavaScript, array, fungsi, null, dan objek lainnya.</p> contoh tipe data object<pre><code>let a = 10;\n//1. Object Literal\nconst product = {\nid: 1,\nname: \"Macbook Air M1\",\nprice: 50000,\nnote: \"\",\n};\n//2. Inline Interface\ninterface Product {\nid: number;\nname: string;\nprice: number;\nnote: string;\n}\nconst product1: Product = {\nid: 1,\nname: \"Macbook Air M1\",\nprice: 13000000,\nnote: \"\",\n};\nconst product2: Product = {\nid: 2,\nname: \"Macbook Pro M1\",\nprice: 1800000,\nnote: \"\",\n};\n//3. Mested Object\ninterface ProductDetail {\nmanufacture: string;\nyear: number;\n}\ninterface ProductItem {\nid: number;\nproductName: string;\nprice: number;\nProductDetail: ProductDetail;\n}\nconst Product4: ProductItem = {\nid: 1,\nproductName: \"Macbook Pro M1\",\nprice: 17000000,\nProductDetail: {\nmanufacture: \"Apple\",\nyear: 2020,\n},\n};\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#9-tipe-data-enum","title":"9. Tipe Data Enum","text":"<p>Tipe data enum (enumeration) adalah salah satu fitur yang ada dalam bahasa pemrograman TypeScript. Enumerasi memungkinkan kita untuk mendefinisikan sekumpulan nama-nama yang terikat dengan nilai-nilai numerik atau string.</p> <p>Dalam TypeScript, enum memberikan cara yang lebih deskriptif untuk menyatakan kumpulan nilai yang tetap dan terbatas. Ini membuat kode lebih mudah dibaca, dipahami, dan dipelihara.</p> <pre><code>enum Days {\nSunday,\nMonday,\nTuesday,\nWednesday,\nThursday,\nFriday,\nSaturday,\n}\nlet today: Days = Days.Monday;\nconsole.log(today); // Output: 1\n// Menggunakan enum untuk mengganti nilai numerik\nfunction getDayName(day: Days): string {\nswitch (day) {\ncase Days.Sunday:\nreturn \"Minggu\";\ncase Days.Monday:\nreturn \"Senin\";\ncase Days.Tuesday:\nreturn \"Selasa\";\ncase Days.Wednesday:\nreturn \"Rabu\";\ncase Days.Thursday:\nreturn \"Kamis\";\ncase Days.Friday:\nreturn \"Jumat\";\ncase Days.Saturday:\nreturn \"Sabtu\";\ndefault:\nreturn \"Hari tidak valid\";\n}\n}\nconsole.log(getDayName(Days.Tuesday)); // Output: \"Selasa\"\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#10-tipe-data-any","title":"10. Tipe Data Any","text":"<p>Dalam bahasa pemrograman TypeScript, tipe data any digunakan untuk menyatakan bahwa nilai dari suatu variabel dapat memiliki tipe apapun.</p> <p>Ketika suatu variabel diberi tipe any, itu berarti variabel tersebut dapat mengandung nilai dari tipe data apa pun, termasuk tipe data primitif seperti number, string, dan boolean, serta tipe data kompleks seperti array, objek, dan fungsi. </p> <p>Penggunaan type data any akan membuat penggunaan TypeScript seperti JavaScript</p> contoh tipe data any<pre><code>let value: any = 10; // Tipe data any untuk bilangan bulat\nconsole.log(value); // Output: 10\nvalue = \"Hello, TypeScript!\"; // Tipe data any untuk teks (string)\nconsole.log(value); // Output: \"Hello, TypeScript!\"\nvalue = true; // Tipe data any untuk boolean\nconsole.log(value); // Output: true\nvalue = [1, 2, 3]; // Tipe data any untuk array\nconsole.log(value); // Output: [1, 2, 3]\nvalue = { name: \"John\", age: 30 }; // Tipe data any untuk objek\nconsole.log(value); // Output: { name: \"John\", age: 30 }\nvalue = function (x: number, y: number): number {\nreturn x + y;\n}; // Tipe data any untuk fungsi\nconsole.log(value(5, 10)); // Output: 15\n</code></pre>"},{"location":"1.%20TypeScript/2.BasicType/#11-type-union","title":"11. Type Union","text":"<p>Type Union merupakan  tipe data yang memungkinkan sebuah variabel memiliki satu dari beberapa tipe data yang mungkin <pre><code>type Operasi = \"perkalian\" | \"penjumlahan\" | \"pengurangan\";\nlet operasiMatematika: Operasi = \"perkalian\";\nlet operasiMatematika: Operasi = \"perkalian2\";\n</code></pre></p> <p>Variabel operasiMatematika sekarang hanya bisa menyimpan salah satu dari tiga nilai: \"perkalian\", \"penjumlahan\", atau \"pembagian\". Jika kita mencoba menyimpan nilai selain yang telah didefinisikan, TypeScript akan menunjukkan kesalahan.</p>"},{"location":"1.%20TypeScript/2.BasicType/#12-type-aliases","title":"12. Type Aliases","text":"<p>Aliases digunakan untuk memberi nama lain atau memperpendek definisi tipe data yang sudah ada, baik itu interface maupun type.</p> <pre><code>interface Person {\nname: string;\nage: number;\n}\ntype PersonTes = Person;\nconst user: PersonTes = {\nname: \"ihsan\",\nage: 20,\n};\n</code></pre>"},{"location":"1.%20TypeScript/3.%20function/","title":"3. Function pada TypeScript","text":"<p>Pada TypeScript, \"function\" mengacu pada sebuah fitur yang digunakan untuk mendefinisikan blok kode yang dapat dipanggil (dijalankan) dengan nama tertentu. Fungsi digunakan untuk mengelompokkan serangkaian pernyataan yang melakukan tugas tertentu atau menghitung nilai kembali (return value) yang kemudian dapat digunakan dalam program.</p>"},{"location":"1.%20TypeScript/3.%20function/#1-function-declaration","title":"1. Function Declaration","text":"<pre><code>//contoh function dengan return tipe data primitive\nfunction sum1(x: number, y: number): number {\nreturn x + y;\n}\nfunction sum1_1(x: number, y: number): string {\nreturn `Hasil Penjumlahan dari ${x} + ${y} adalah ${x + y}`;\n}\nfunction sum1_2(x: number, y: number): boolean {\nif (x === y) {\nreturn true;\n} else {\nreturn false;\n}\n}\n//contoh function tanpa object\ntype Hasil = {\nangkatPertama: number;\nangkaKedua: number;\nhasil: number;\n};\ntype Parameter = {\nx: number;\ny: number;\n};\nfunction sum2(x: number, y: number): Hasil {\nconst z = x + y;\nreturn {\nangkatPertama: x,\nangkaKedua: y,\nhasil: z,\n};\n}\nfunction  (params: Parameter): Hasil {\nconst { x, y } = params;\nconst z = x + y;\nreturn {\nangkatPertama: x,\nangkaKedua: y,\nhasil: z,\n};\n};\n//contoh function dengan return tipe data any\nfunction sum3(x: number, y: number): any {\nreturn x + y;\n}\n//contoh function tanpa return\nfunction sum4(x: number, y: number): void {\nconst z = x + y;\n}\nconsole.log(sum1(1, 2));\nconsole.log(sum2(1, 2));\n</code></pre>"},{"location":"1.%20TypeScript/3.%20function/#2-arrow-function","title":"2. Arrow Function","text":"<pre><code>//contoh function dengan return tipe data primitive\nconst sum1 = (x: number, y: number): number =&gt; {\nreturn x + y;\n};\nconst sum1_1 = (x: number, y: number): string =&gt; {\nreturn `Hasil Penjumlahan dari ${x} + ${y} adalah ${x + y}`;\n};\nconst sum1_2 = (x: number, y: number): boolean =&gt; {\nif (x === y) {\nreturn true;\n} else {\nreturn false;\n}\n};\n//contoh function tanpa object\ntype Hasil = {\nangkatPertama: number;\nangkaKedua: number;\nhasil: number;\n};\ntype Parameter = {\nx: number;\ny: number;\n};\nconst sum2 = (x: number, y: number): Hasil =&gt; {\nconst z = x + y;\nreturn {\nangkatPertama: x,\nangkaKedua: y,\nhasil: z,\n};\n};\nconst sum2_1 = (params: Parameter): Hasil =&gt; {\nconst { x, y } = params;\nconst z = x + y;\nreturn {\nangkatPertama: x,\nangkaKedua: y,\nhasil: z,\n};\n};\n//contoh function dengan return tipe data any\nconst sum3 = (x: number, y: number): any =&gt; {\nreturn x + y;\n};\n//contoh function tanpa return\nconst sum4 = (x: number, y: number): void =&gt; {\nconst z = x + y;\n};\nconsole.log(sum1(1, 2));\nconsole.log(sum2(1, 2));\n</code></pre>"},{"location":"1.%20TypeScript/3.%20function/#3-optional-parameter","title":"3. Optional Parameter","text":"<p>Pada function yang kita buat, kita dapat memberikan optional parameter artinya parameter tsb boleh ada atau tidak pada function</p> <pre><code>function multiply(a: number, b: number, c?: number): number {\nif (typeof c !== \"undefined\") {\nreturn a * b * c;\n}\nreturn a * b;\n}\nconsole.log(multiply(1, 2, 3));\nconsole.log(multiply(1, 2));\n</code></pre>"},{"location":"1.%20TypeScript/3.%20function/#4-default-parameter","title":"4. Default Parameter","text":"<p>Default parameter pada fungsi (default function parameter) adalah nilai yang diberikan sebagai nilai bawaan untuk parameter fungsi jika tidak ada nilai yang diberikan saat pemanggilan fungsi. Default parameter memungkinkan kita untuk menentukan nilai standar yang akan digunakan oleh parameter jika pengguna tidak menyediakan nilai untuk parameter tersebut.</p> <p>Dalam JavaScript dan TypeScript, Anda dapat mendefinisikan default parameter dengan cara menentukan nilai default pada deklarasi fungsi. Saat fungsi dipanggil, jika parameter tersebut tidak diberikan nilai, maka nilai default yang telah ditentukan akan digunakan.</p> <p>Contoh penggunaan default parameter dalam fungsi:</p> <pre><code>function applyDiscount(price: number, discount: number = 0.05): number {\nreturn price * (1 - discount);\n}\nconsole.log(applyDiscount(100)); // 95\n</code></pre>"},{"location":"1.%20TypeScript/4.%20class/","title":"4. Class Pada TypeScript","text":""},{"location":"1.%20TypeScript/4.%20class/#1-class-basic-constructor-properties-method","title":"1. Class Basic (Constructor, Properties, Method)","text":"<p>Di TypeScript, \"class\" adalah sebuah konsep yang digunakan untuk membuat sebuah blueprint atau cetak biru (blueprint) untuk menciptakan objek-objek dengan properti dan metode yang sama. Dalam arti sederhana, class adalah suatu kerangka kerja yang mendefinisikan struktur dan perilaku dari objek-objek yang akan dibuat berdasarkan class tersebut.</p> <pre><code>class User {\n  id: number;\n  firstName: string;\n  lastName: string;\n\n  constructor(id: number, firstName: string, lastName: string) {\n    (this.id = id), (this.firstName = firstName), (this.lastName = lastName);\n  }\n\n  login(): boolean {\n    return true;\n  }\n  register(): string {\n    return \"Register Berhasil\";\n  }\n}\n\nconst myUser = new User(1, \"ihsan\", \"santana\"); // instance\nconsole.log(myUser.firstName);\n</code></pre>"},{"location":"1.%20TypeScript/4.%20class/#2-class-modifiers-private-public-protected","title":"2. Class Modifiers (private, public, protected)","text":"<p>Class modifiers adalah kata kunci yang digunakan untuk mengatur aksesibilitas dan perilaku anggota (properti dan metode) dari suatu class dalam TypeScript. Dengan menggunakan class modifiers, Anda dapat mengontrol bagaimana anggota kelas dapat diakses dan dimanipulasi oleh kode di luar kelas tersebut.</p> <p>Berikut adalah beberapa class modifiers yang dapat digunakan dalam TypeScript:</p> <ol> <li> <p>public: Ini adalah modifier default untuk anggota kelas. Jika tidak diberikan modifier, maka anggota tersebut secara otomatis dianggap sebagai public. Anggota yang diberi modifier public dapat diakses dari mana saja, baik dari dalam kelas itu sendiri maupun dari luar kelas.</p> </li> <li> <p>private: Anggota kelas yang diberi modifier private hanya dapat diakses dari dalam kelas itu sendiri. Anggota yang bersifat private tidak dapat diakses dari luar kelas, termasuk turunan kelas (subclass).</p> </li> <li> <p>protected: Anggota kelas yang diberi modifier protected dapat diakses dari dalam kelas itu sendiri dan juga dari turunan kelas (subclass). Namun, anggota yang bersifat protected tetap tidak dapat diakses dari luar kelas atau dari luar turunan kelas.</p> </li> <li> <p>readonly: Modifier ini digunakan untuk mendefinisikan anggota kelas (properti) yang hanya dapat dibaca dan nilainya tidak dapat diubah setelah inisialisasi. Properti yang bersifat readonly hanya boleh diatur nilai awalnya di konstruktor atau pada saat deklarasi.</p> </li> </ol> access modifier class sub-class instance public \u2705 \u2705 \u2705 protected \u2705 \u2705 \u274c private \u2705 \u274c \u274c <pre><code>class User {\n  id: number;\n  firstName: string;\n  lastName: string;\n  protected isActive: boolean;\n  private token: number;\n\n  constructor(id: number, firstName: string, lastName: string) {\n    this.id = id,\n    this.firstName = firstName,\n    this.lastName = lastName,\n    this.isActive = true;\n    this.token = new Date().getTime();\n  }\n\n  login(): boolean {\n    return true;\n  }\n  register(): string {\n    return \"Register Berhasil\";\n  }\n\n  getToken(): number {\n    return this.token;\n  }\n}\n\nconst myUser = new User(1, \"ihsan\", \"santana\"); // instance\nconsole.log(myUser.firstName);\nconsole.log(myUser.getToken());\n\nclass DetailUser extends User {\n  age: number;\n  constructor(age: number, id: number, firstName: string, lastName: string) {\n    super(id, firstName, lastName);\n    this.age = age;\n    this.isActive = false;\n  }\n\n  getIsActive(): boolean {\n    return this.isActive;\n  }\n}\n\nconst myDetailUser = new DetailUser(12, 1, \"ihsdan\", \"santana\");\nconsole.log(myDetailUser.age);\nconsole.log(myDetailUser.getIsActive());\n</code></pre>"},{"location":"1.%20TypeScript/4.%20class/#3-class-modifier-readonly","title":"3. Class Modifier ReadOnly","text":"<p>Dalam TypeScript,  readonly digunakan untuk mendefinisikan properti pada suatu objek agar nilainya tidak dapat diubah setelah objek dibuat. Artinya, setelah nilai properti ditetapkan maka  tidak bisa mengubahnya kembali.</p> <pre><code>class User {\n readonly id : number\n  firstName : string;\n\n  constructor (id : number , firstName : string){\n    this.id = id\n    this.firstName = firstName\n  }\n\n}\n\nconst myUser = new User(1, \"ihsan\")\nconsole.log(myUser.id)\nconsole.log(myUser.firstName)\nmyUser.firstName = \"kaka\"\nconsole.log(myUser.firstName)\nmyUser.id = 20 //terjadi error Cannot assign to 'id' because it is a read-only property.\nconsole.log(myUser.id)\n</code></pre> <p>Error di atas disebabkan karena property id bersifat readonly</p>"},{"location":"1.%20TypeScript/4.%20class/#4-static-property","title":"4. Static Property","text":"<p>Berbeda dengan instance property, static property dibagi di antara semua instances dari sebuah class.</p> <p>Untuk mendeklarasikan static property, kita dapat menambahkan kata kuncu static. Untuk mengakses properti statis dan di akses dengan className.propertyName</p> <pre><code>class User {\n  id: number;\n  firstName: string;\n  lastName: string;\n  protected isActive: boolean;\n  private token: number;\n  static max_limit: number = 3\n  private retryLogin: number;\n\n  constructor(id: number, firstName: string, lastName: string) {\n    this.id = id,\n    this.firstName = firstName,\n    this.lastName = lastName,\n    this.isActive = true;\n    this.token = new Date().getTime();\n    this.retryLogin = 0;\n  }\n\n  login(username: string, password: string): boolean | string {\n    this.retryLogin += 1;\n\n    if(this.retryLogin &gt; User.max_limit){\n      return \"Coba beberapa saat lagi\"\n    }\n    if (username === \"admin\" &amp;&amp; password === \"admin\") {\n      return true;\n    }\n\n    if(this.retryLogin === User.max_limit){\n      return \"Maximal Attemp\"\n    }\n\n    return false;\n  }\n  register(): string {\n    return \"Register Berhasil\";\n  }\n\n  getToken(): number {\n    return this.token;\n  }\n}\n\nconst myUser = new User(1, \"ihsan\", \"santana\"); // instance\nconsole.log(myUser.firstName);\n\nconsole.log('max limit', User.max_limit);\nconsole.log(myUser.login(\"admin\", \"tes\"));\nconsole.log(myUser.login(\"admin\", \"tes\"));\nconsole.log(myUser.login(\"admin\", \"tes\"));\nconsole.log(myUser.login(\"admin\", \"tes\"));\n</code></pre>"},{"location":"1.%20TypeScript/4.%20class/#5-abstrack-classes","title":"5. Abstrack Classes","text":"<p>Abstrack Classes biasanya digunakan untuk mendefinisikan perilaku umum yang akan diperluas oleh class turunannya. Berbeda dengan class biasa, Abstrack Classes tidak dapat diinstansiasi secara langsung.</p> <p>Abstrack Classes adalah class yang tidak dapat dibuat objeknya sendiri. Ini berarti kita tidak dapat membuat instance langsung dari Abstrack Classes. Sebaliknya, Abstrack Classes berfungsi sebagai blue print untuk class turunannya, memberikan struktur dan perilaku yang umum untuk class turunan.</p> <pre><code>abstract class Identitas {\n  name: string;\n\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  abstract getSalary() : number\n}\n\nclass User extends Identitas {\n  alamat: string;\n\n  constructor(name: string, alamat: string) {\n    super(name);\n    this.alamat = alamat;\n  }\n\n  getSalary() : number {\nreturn 200000\n  }\n}\n\nconst myUser = new User(\"ihsan\", \"bogor\");\nconsole.log(myUser.name);\nconsole.log(myUser.getSalary())\n</code></pre>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/","title":"5. Interface dan Type","text":"Feature Interface Type aliases \u274c \u2705 object \u2705 \u2705 merge \u2705 \u274c Intersection &amp; Union \u274c \u2705 implementes \u2705 \u2705 extend \u2705 \u274c"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#1-aliases","title":"1. Aliases","text":"<p>Aliases digunakan untuk memberi nama lain atau memperpendek definisi tipe data yang sudah ada, baik itu interface maupun type. Pada TypeScript alies harus bisa digunakan pada type</p> <pre><code>interface Person {\n  name: string;\n  age: number;\n}\n\ntype PersonTes = Person;\n\nconst user: PersonTes = {\n  name: \"ihsan\",\n  age: 20,\n};\n</code></pre>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#2-object","title":"2. Object","text":"<p>Inteface dan Type sama-sama didefinikan mengggukana object</p> <pre><code>interface Product {\n  id: number;\n  namaProduck: string;\n}\n\ntype ProductDetail = {\n  harga: number;\n  manufactur: string;\n};\n</code></pre>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#3-merge","title":"3. Merge","text":"<p>Intercafe dengan nama yang sama akan digabungkan menjadi satu definisi yang lengkap.TypeScript akan menggabungkan definisi-properti dan definisi-metode dari kedua interface tersebut menjadi satu.</p> <pre><code>interface User {\n  name: string;\n  age: number;\n}\n\ninterface User {\n  alamat: string;\n}\n\nconst myUser: User = {\n  name: \"ihsan\",\n  age: 12,\n  alamat: \"kebonjati\",\n};\n</code></pre>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#4-intersection-union","title":"4. Intersection &amp; Union","text":"<pre><code>type TypeA = {\n  id: number;\n  propA: string;\n};\n\ntype TypeB = {\n  id: number;\n  propB: string;\n};\n</code></pre> <p>intersection ('&amp;')</p> <p>Intersection digambarkan dengan simbol &amp; dan memungkinkan kita untuk menggabungkan dua atau lebih tipe data menjadi satu tipe data yang lebih kompleks. Dalam intersection, tipe data yang dibentuk akan berisi properti dan metode dari semua tipe data yang terlibat.</p> <pre><code>type intersectionAB = TypeA &amp; TypeB;\nconst myData2: intersectionAB = {\n  id: 1,\n  propA: \"test A\",\n  propB: \"test B\",\n};\n\nconst myData2: intersectionAB = {\n  id: 1,\n  propA: \"test A\",  //akan terjadi error karena propB tidak ada\n\n};\n</code></pre> <p>Union ('|')</p> <p>Union digambarkan dengan simbol | dan memungkinkana kita untuk mendefinisikan tipe data yang bisa berisi salah satu dari beberapa tipe data yang berbeda. kita dapat menyatakan bahwa nilai atau variabel bisa memiliki beberapa tipe yang berbeda.</p> <pre><code>type UnionAB = TypeA | TypeB;\n\nconst myData1: UnionAB = {\n  id: 1,\n  propA: \"test A\",\n};\n\ntype Operasi= \"perkalian\" | \"penjumlahan\" | \"pengurangan\";\n\nconst operasiMatematika: Operasi = 'perkalian'\nconst operasiMatematika: Operasi = 'perkalian2' //error karena tidak ada pada option\n</code></pre>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#5-implements","title":"5. implements","text":"<p>Pada TypeScript, \"implements\" digunakan untuk menyatakan bahwa sebuah kelas telah mengimplementasikan (menyediakan implementasi untuk) sebuah interface tertentu. Dengan menggunakan \"implements\", Kita dapat memastikan bahwa class tersebut menyediakan seluruh struktur dan perilaku yang didefinisikan dalam interface yang diimplementasikan.</p>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#interface","title":"interface","text":"<pre><code>interface Person {\n  name: string;\n  age: number;\n  getName(id: number): string;\n}\n\nclass Identias implements Person {\n  name: string;\n  age: number;\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  getName(id: number): string {\n    return \"ihsan\";\n  }\n}\n</code></pre>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#type","title":"Type","text":"<pre><code>type Person = {\n  name: string;\n  age: number;\n  getName(id: number): string;\n};\n\nclass Identias implements Person {\n  name: string;\n  age: number;\n  constructor(name: string, age: number) {\n    this.name = name;\n    this.age = age;\n  }\n\n  getName(id: number): string {\n    return \"ihsan\";\n  }\n}\n</code></pre>"},{"location":"1.%20TypeScript/5.%20Type_dan_interface/#6-extend","title":"6. Extend","text":"<p>Interface memungkinkan kita untuk membuat sebuah interface baru yang meng-extend atau memperluas fungsionalitas dari interface yang sudah ada sebelumnya</p> <pre><code>interface Person {\n  name: string;\n  age: number;\n  getName(id: number): string;\n}\n\ninterface User extends Person {\n  alamat: string;\n}\n</code></pre>"},{"location":"1.%20TypeScript/6.%20%20Advance%20_Type/","title":"6. Advanced Type","text":""},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/","title":"1. Instalasi","text":""},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#1-apa-itu-nestjs","title":"1. Apa itu NestJs ?","text":"<p>NestJS adalah sebuah framework untuk membuat aplikasi <code>server-side (back-end)</code> dengan menggunakan bahasa pemrograman <code>TypeScript</code>, yang dibangun di atas platform <code>Node.js</code>.</p> <p>NestJS memiliki konsep arsitektur yang terinspirasi dari Angular, yaitu menggunakan <code>Dependency Injection</code>, <code>module</code>, dan <code>controller</code>. NestJS juga menyediakan fitur-fitur yang berguna untuk memudahkan pengembangan aplikasi seperti <code>middleware</code>, <code>pipes</code>, <code>guards</code>, <code>interceptors</code>, dan lain-lain. Selain itu, NestJS juga dapat digunakan dengan berbagai database seperti <code>MySQL</code>, <code>PostgreSQL</code>, <code>MongoDB</code>, dan sebagainya.</p> <p></p> <p>Dokumentasi resmi : https://nestjs.com/</p>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#2-instalasi-project-nestjs","title":"2. Instalasi Project NestJS","text":"<p>Sebelum memulai mempelajari NestJs ada beberapa tools yang harus dipersiapkan</p>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#instalasi-nodejs-dan-npm","title":"Instalasi nodejs dan npm","text":"terminal<pre><code>node -v\nnpm -v\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#instalasi-nest-cli","title":"Instalasi Nest CLI","text":"terminal<pre><code>npm install -g @nestjs/cli\nnest --help\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#instalasi-postman","title":"Instalasi Postman","text":"<p>Postman adalah aplikasi yang digunakan untuk pengujian api / service pada BE Download <code>https://www.postman.com/downloads/</code></p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/1.%20Instalasi/#3-buat-project-nestjs","title":"3. Buat Project NestJS","text":"<p>Pertama Kali untuk membuat Project NestJS , kita akan membuat folder baru kemudian kita akan buka dengan Visual Code Studio terminal<pre><code>ihsanabuhanifah@ihsanabnifahMBP FullstackDev % nest new backend-nestjs\n\u26a1  We will scaffold your app in a few seconds..\nCREATE backend-nestjs/.eslintrc.js (665 bytes)\nCREATE backend-nestjs/.prettierrc (51 bytes)\nCREATE backend-nestjs/README.md (3340 bytes)\nCREATE backend-nestjs/nest-cli.json (118 bytes)\nCREATE backend-nestjs/package.json (1999 bytes)\nCREATE backend-nestjs/tsconfig.build.json (97 bytes)\nCREATE backend-nestjs/tsconfig.json (546 bytes)\nCREATE backend-nestjs/src/app.controller.spec.ts (617 bytes)\nCREATE backend-nestjs/src/app.controller.ts (274 bytes)\nCREATE backend-nestjs/src/app.module.ts (249 bytes)\nCREATE backend-nestjs/src/app.service.ts (142 bytes)\nCREATE backend-nestjs/src/main.ts (208 bytes)\nCREATE backend-nestjs/test/app.e2e-spec.ts (630 bytes)\nCREATE backend-nestjs/test/jest-e2e.json (183 bytes)\n? Which package manager would you \u2764\ufe0f  to use? npm\n\u25b9\u25b8\u25b9\u25b9\u25b9 Installation in progress... \u2615\n</code></pre> kita tinggal penunggu sampai proses intalasi selesai.  Setelah selesai proses instalasi, kemudian jalankann <code>npm run start:dev</code> untuk memulai proses intalasi</p> terminal<pre><code>npm run start:dev\n</code></pre> <p></p> <p>Apabila dibuka pada browser maka akan tampil sebagai berikut.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/","title":"2. Struktur NestJS","text":""},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#1-struktur-folder-nestjs","title":"1. Struktur Folder NestJS","text":"<p>Pada saat pertama kali install Nest JS di project , maka akan mendapatkan seperti gambar di atas.</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#dist","title":"dist","text":"<p>folder dist merupakan hasil compile dari typescript ke javascript dari folder src , folder dist akan muncul ketika kita jalankan</p> terminal<pre><code>npm run start:dev\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#node_module","title":"node_module","text":"<p><code>node_module</code> berisi <code>depedencies</code> yang di install pada project kita. Ukuran folder <code>node_module</code> besar tergantung banyak libary yang di install. folder <code>node_module</code> tidak ikut di push ke githab/gitlab.</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#src","title":"src","text":"<p>folder <code>src</code> adalah lokasi dimana kita akan melakuakn proses koding, di dalam folder <code>src</code> secara default terdapat beberapa file</p> <ul> <li>`app.controller.ts`` yang digunakan sebagai controller dan juga sebagai Routing yang berhubungan langsung dengan client</li> <li><code>app.service.ts</code> adalah service yang di panggil oleh Controller dan berisi logic - logic</li> <li><code>app.module.ts</code> adalah configurasi yang menampung Controller dan Service</li> <li><code>app.controller.spec.ts</code> adalah Unit Testing untuk controller yang digunakan untuk melakukan test pada controller</li> <li><code>main.ts</code> adalah file yang menjalankan Nest JS diatas Express JS maupun Fastify</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#test","title":"test","text":"<p>Folder test merupakan folder yang berisi file untuk melakukan testing, secara default folder test terdapat file</p> <ul> <li><code>app.e2e-spec.ts</code> adalah file untuk melakukan End to End Testing terhadap Controller melalui HTTP</li> <li><code>jest-e2e.json</code> adalah file configurasi End to End Testing yang menggunakan Jest secara defaultnya.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#eslintrcjs","title":"eslintrc.js","text":"<p>file <code>eslintrc.js</code> merupakan default dari <code>eslint</code>, dimana kita dapat mengkonfigurasi sesuai kebutuhan</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#gitignore","title":".gitignore","text":"<p><code>.gitignore</code> merupakan file untuk mendefiniskan file atau folder mana saya yang tidak akan kita push ke dalam github/gitlab nest-cli.json  merupakan file konfigurasi untuk <code>nest cli</code></p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#packagejson","title":"package.json","text":"<p>package.json<pre><code>{\n\"name\": \"backend-nestjs\",\n\"version\": \"0.0.1\",\n\"description\": \"\",\n\"author\": \"\",\n\"private\": true,\n\"license\": \"UNLICENSED\",\n\"scripts\": {\n\"prebuild\": \"rimraf dist\",\n\"build\": \"nest build\",\n\"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\n\"start\": \"nest start\",\n\"start:dev\": \"nest start --watch\",\n\"start:debug\": \"nest start --debug --watch\",\n\"start:prod\": \"node dist/main\",\n\"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\n\"test\": \"jest\",\n\"test:watch\": \"jest --watch\",\n\"test:cov\": \"jest --coverage\",\n\"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\n\"test:e2e\": \"jest --config ./test/jest-e2e.json\"\n},\n\"dependencies\": {\n\"@nestjs-modules/mailer\": \"^1.9.1\",\n\"@nestjs/common\": \"^9.0.0\",\n\"@nestjs/config\": \"^3.0.0\",\n\"@nestjs/core\": \"^9.0.0\",\n\"@nestjs/jwt\": \"^10.1.0\",\n\"@nestjs/mapped-types\": \"^2.0.2\",\n\"@nestjs/passport\": \"^10.0.0\",\n\"@nestjs/platform-express\": \"^9.0.0\",\n\"@nestjs/serve-static\": \"^4.0.0\",\n\"@nestjs/typeorm\": \"^10.0.0\",\n\"bcrypt\": \"^5.1.0\",\n\"class-transformer\": \"^0.5.1\",\n\"class-validator\": \"^0.14.0\",\n\"handlebars\": \"^4.7.7\",\n\"mysql2\": \"^3.5.2\",\n\"nodemailer\": \"^6.9.4\",\n\"passport\": \"^0.6.0\",\n\"passport-jwt\": \"^4.0.1\",\n\"reflect-metadata\": \"^0.1.13\",\n\"rimraf\": \"^3.0.2\",\n\"rxjs\": \"^7.2.0\",\n\"typeorm\": \"^0.3.17\"\n},\n\"devDependencies\": {\n\"@nestjs/cli\": \"^9.0.0\",\n\"@nestjs/schematics\": \"^9.0.0\",\n\"@nestjs/testing\": \"^9.0.0\",\n\"@types/bcrypt\": \"^5.0.0\",\n\"@types/express\": \"^4.17.13\",\n\"@types/jest\": \"28.1.8\",\n\"@types/multer\": \"^1.4.7\",\n\"@types/node\": \"^16.0.0\",\n\"@types/nodemailer\": \"^6.4.9\",\n\"@types/passport-jwt\": \"^3.0.9\",\n\"@types/supertest\": \"^2.0.11\",\n\"@typescript-eslint/eslint-plugin\": \"^5.0.0\",\n\"@typescript-eslint/parser\": \"^5.0.0\",\n\"eslint\": \"^8.0.1\",\n\"eslint-config-prettier\": \"^8.3.0\",\n\"eslint-plugin-prettier\": \"^4.0.0\",\n\"jest\": \"28.1.3\",\n\"prettier\": \"^2.3.2\",\n\"source-map-support\": \"^0.5.20\",\n\"supertest\": \"^6.1.3\",\n\"ts-jest\": \"28.0.8\",\n\"ts-loader\": \"^9.2.3\",\n\"ts-node\": \"^10.0.0\",\n\"tsconfig-paths\": \"4.1.0\",\n\"typescript\": \"^4.7.4\"\n},\n\"jest\": {\n\"moduleFileExtensions\": [\n\"js\",\n\"json\",\n\"ts\"\n],\n\"rootDir\": \"src\",\n\"testRegex\": \".*\\\\.spec\\\\.ts$\",\n\"transform\": {\n\"^.+\\\\.(t|j)s$\": \"ts-jest\"\n},\n\"collectCoverageFrom\": [\n\"**/*.(t|j)s\"\n],\n\"coverageDirectory\": \"../coverage\",\n\"testEnvironment\": \"node\"\n}\n}\n</code></pre> file konfigurasi pada environment NestJS memuat file-file berikut.</p> <ul> <li><code>dependencies</code> berisi library-libary yang diperlukan dalam menjalankan aplikasi baik pada mode production maupun development.</li> <li><code>devDependencies</code> berisi library-libary yang diperlukan dalam menjalankan aplikasi pada mode development.</li> <li><code>scripts</code> digunakan untuk membuat aliases perintah tertentu pada <code>terminal</code> dengan <code>npm run nama_script</code>.</li> <li>dan konfigurasi lain yang dibutuhkan.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#2-konsep-modular-dan-service-pattern","title":"2. Konsep Modular dan Service Pattern","text":""},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#apa-itu-modular","title":"Apa itu Modular?","text":"<p>Pada NestJS, <code>modular</code> mengacu pada pendekatan organisasi kode yang membagi aplikasi menjadi modul-modul terpisah. Pendekatan ini membantu dalam mengatur, memisahkan, dan mempermudah pengembangan aplikasi yang lebih kompleks.</p> <p>Penamaan Module tidak terbatas, dan kita bisa menyesuaikan dengan kebutuhan dan di dalam module bisa ada module lain dan seterusnya.</p> <p>Berikut ini adalah contoh gambar Module</p> <p></p> <p>Pada gambar diatas, terlihat bahwa module bisa memiliki child module lain, dan setiap module bisa berinteraksi dengan module lain sehingga setiap module bisa menggunakan service dari module lain seperti gambar di bawah ini:</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#apa-itu-service-pattern","title":"Apa itu Service Pattern?","text":"<p>Service Pattern pada nestjs adalah bahwa setiap module memili Module, Controller, dan Service. Selain Pattern tersebut kita juga dapat membuat pattern lain sesuai dengan kebutuhan</p> <p></p> <p>Pada gambar diatas terlihat bahwa pola di dalam module bisa berbeda - beda, misal ada module yang digunakan untuk Routing dengan menggunakan Controller dan ada juga Module yang diginakan tanpa Controller</p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#mengubah-port-default","title":"Mengubah port Default","text":"<p>Secata default aplikasi nestjs akan berjalan pada port 3000 , namun kita dapat merubah port default dari aplikasi nestjs dengan port lain.</p> <p>untuk merubah port default kita bisa berubah pada file main.ts</p> <p>main.ts<pre><code>import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nasync function bootstrap() {\nconst app = await NestFactory.create(AppModule);\nawait app.listen(5002); // ubah dari 3000 menjadi 5002\n}\nbootstrap();\n</code></pre> </p>"},{"location":"2.%20NestJS%20-%20Backend/2.%20Struktur/#3-basic-routing-pada-nestjs","title":"3. Basic Routing pada NestJS","text":"<p>Pada contoh sebelumnya kita sudah mencoba routing default pada url http://localhost:5002. Selanjutkan kita akan coba untuk membuat routing sederhana pada aplikasi nestjs.</p> <p>Routing pada NestJs sangat mudah, yaitu pada file controller pada setiap module.</p> <p>app.controller.ts<pre><code>import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n@Controller()\nexport class AppController {\nconstructor(private readonly appService: AppService) {}\n@Get()\ngetHello(): string {\nreturn this.appService.getHello();\n}\n@Get('belajar-route')\ngetHello2(): string {\nreturn 'Belajar Routing';\n}\n}\n</code></pre> pada contoh di atas kita membuat routing pada url <code>http://localhost:5002/belajar-route</code> yang akan menampilkan pesan Belajar-Routing, sehingga akan tampil seperti gambar di bawah</p> <p></p> <p>Untuk materi routing yang lain nya kita akan bahas pada materi selanjutnya.</p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/1.%20Redis/","title":"Konsep Redis","text":"<p><code>Redis</code> (Remote Dictionary Server) adalah sistem penyimpanan data dalam memori (RAM) yang bersifat open-source. Redis sering digunakan sebagai cache atau basis data <code>key-value</code> yang sangat cepat, dan mendukung berbagai tipe data seperti:</p> <ul> <li><code>String</code>: tipe data sederhana untuk menyimpan teks atau angka.</li> <li><code>Lists</code>: daftar yang berisi elemen yang terurut.</li> <li><code>Sets</code>: himpunan tanpa elemen yang duplikat.</li> <li><code>Sorted sets</code>: himpunan yang terurut berdasarkan skor.</li> <li><code>Hashes</code>: kumpulan pasangan key-value, seperti objek atau map di bahasa pemrograman.</li> <li><code>Streams</code>, bitmaps, dan hyperloglogs: untuk kebutuhan data yang lebih spesifik.</li> </ul> <p>Redis juga mendukung <code>publishing/subscribing</code>, <code>transactions</code>, dan <code>persistence</code> (dengan menyimpan data ke disk). Redis terkenal karena performanya yang tinggi dan latensinya yang rendah, sehingga sering digunakan dalam aplikasi yang membutuhkan akses data yang sangat cepat, seperti dalam caching, session management, queue, dan streaming data real-time.</p> <p>Silahkan pelajari dasar-dasar dari Redis di youtube Programmer Zaman Now.</p> <ul> <li> Redis Fundamental </li> <li>8 Kesalahan Penggunaan Redis </li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/1.%20Redis/#mengapa-kita-menggunakan-redis","title":"Mengapa Kita Menggunakan Redis?","text":"<ul> <li><code>Scalability</code>: Redis sangat baik dalam menangani lalu lintas yang tinggi dan dapat dengan mudah diskalakan.</li> <li><code>Performance</code>: Redis sangat cepat dalam membaca dan menulis data.</li> <li><code>Flexibilit</code>y: Redis dapat digunakan untuk berbagai keperluan, seperti caching, pub/sub, dan penyimpanan data sederhana.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/1.%20Redis/#penggunaan-redis","title":"Penggunaan Redis","text":"<ul> <li> <p><code>Caching</code>: Redis sering digunakan untuk menyimpan hasil query database atau respons HTTP agar bisa diambil dengan cepat pada permintaan berikutnya.</p> </li> <li> <p><code>Session Management</code>: Redis bisa digunakan untuk menyimpan session data, khususnya pada aplikasi yang membutuhkan autentikasi.</p> </li> <li> <p><code>Pub/Sub</code>: Redis dapat digunakan untuk <code>publish</code> dan <code>subscribe</code> seperti layaknya kafka. Namun data yang dikirimkan ke redis dalam pub/sub tidak disimpan, namun hanya di lewatkan.</p> </li> <li> <p><code>Real-Time Analytics</code>: Redis memungkinkan analitik real-time karena kecepatannya dalam melakukan operasi data secara instan.</p> </li> <li> <p><code>Message Queue</code>: Redis sering digunakan sebagai <code>message queue</code> sederhana untuk mengelola antrian tugas atau pekerjaan yang akan dijalankan secara <code>asyncronous.</code></p> </li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/1.%20Redis/#bagaimana-redis-bekerja","title":"Bagaimana Redis Bekerja?","text":"<p>Redis dikembangkan untuk menjadi cepat dan efisien, dengan menyimpan data di memori (RAM). Ketika ada request data, Redis memeriksa cache-nya untuk melihat apakah data yang diminta sudah tersimpan di memori. Jika data tidak tersedia di cache, Redis mengambilnya dari  database atau API, dan menyimpannya di cache untuk digunakan di masa mendatang.</p> <p>Redis menyimpan data sebagai <code>key-value</code> store, di mana setiap key dipasangkan dengan value. Redis mendukung berbagai macam struktur data, seperti <code>string</code>, <code>hash</code>, <code>list</code>, <code>set</code>, dan <code>sorted set</code>.</p> <p>Hal ini membuat Redis sederhana untuk digunakan dalam caching berbagai tipe dan struktur data. Redis juga menyediakan mekanisme persistensi, yang memungkinkannya untuk menulis data ke disk secara berkala. Ini berarti bahwa dalam kasus sistem mengalami crash atau restart, Redis dapat memulihkan data. Redis juga menawarkan replikasi, yang memungkinkan skalabilitas dan ketersediaan data untuk direplikasi ke berbagai <code>server</code>.</p> <p></p> <p>Pada gambar di atas digambarkan bagaimana memanfaatkan redis dalam project kita.</p> <ul> <li>Ketika <code>client</code> melakukan request yang sama , maka <code>server</code> akan mengecheck terlebih dahulu ke dalam redis berdasarkan parameter/key tertentu</li> <li>Jika terdapat data berdasarkan key yang diminta ada,  maka redis akan memberikan data tersebut dan <code>server</code> akan memberikan response ke <code>client</code> tanpa melakukan query ke database</li> <li>Jika terdapat data berdasarkan key yang diminta tidak ada,  maka <code>server</code> akan melakukan query ke database dan memberikan response ke <code>client</code> serta menyimpan data tersebut ke redis untuk digunakan jika ada request yang sama masuk.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/","title":"Konfigurasi Redis","text":""},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#instalasi-redis","title":"Instalasi Redis","text":"<p>Pada implementasi kali ini, kita akan instalasi redis di docker seperti materi kafka sebelumnya. Langkah pertama kita ubah file <code>docker-compose.yml</code> dengan menambahkan perintah berikut.</p> docker-compose.yml<pre><code>version: '3.8'd\nservices:\n...\nredis:\nimage : redis:latest\ncontainer_name: redis\ncommand : redis-server /usr/local/etc/redis/redis.conf\nrestart:  always\nvolumes:\n- ./config/redis.conf:/usr/local/etc/redis/redis.conf\nports:\n- 6379:6379\nnetworks:\narc_network:\nexternal: true\n</code></pre> <p>Buatlah file <code>redis.config</code> dalam folder <code>config</code> seperti gambar berikut.</p> <p></p> <p>Silahkan <code>copy paste</code> redis.config dari link berikut ke dalam config/redis.config.</p> <p></p> <p>Kemudian tambahkan perintah berikut agar redis kita memiliki authentikasi dengan password <code>rahasia</code></p> config/redis.config<pre><code>   requirepass password\nuser default on +@connection +@all ~* allchannels  &gt;rahasia\n</code></pre> <p></p> <p>Setelah itu kita tambahkan <code>bind 0.0.0.0</code> agar redis dapat diakses dari semua IP. Tentu saja ini hanya dilakukan saat <code>development</code>, adapun pada <code>production</code> harus lebih selektif lagi. config/redis.config<pre><code>bind 127.0.0.1 -::1\nbind 0.0.0.0\n</code></pre></p> <p></p> <p>Untuk membuat container, kita hanya perlu menjalankan perintah <code>docker-compose up -d</code>.</p> docker command<pre><code>docker-compose up -d\n</code></pre> <p>Setelah selesai kita pastikan container sudah dibuat dengan menjalankan perintah <code>docker ps</code></p> docker command<pre><code>docker ps\n</code></pre> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#bagaimana-mengakses-redis","title":"Bagaimana mengakses redis","text":"<p>Redis dapat diakses dengan beberapa cara baik dengan CLI  ataupun dengan aplikasi seperti table plus. </p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#command-line-interface","title":"Command Line Interface","text":"<p>Redis menyediakan Redis CLI (<code>redis-cli</code>), yang merupakan <code>command line interface</code> bawaan di redis. Dengan Redis CLI, Kita dapat menjalankan perintah Redis, melakukan operasi CRUD, dan memantau server Redis.</p> terminal<pre><code>docker exec -it redis /bin/sh\nredis-cli -h localhost\nauth rahasia\nset tes ihsan\nget tes\n</code></pre> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#table-plus","title":"Table Plus","text":"<p>TablePlus adalah  GUI yang mendukung berbagai database, termasuk Redis, yang memudahkan kita untuk berinteraksi dengan Redis tanpa harus menggunakan CLI. Dengan TablePlus, kita dapat melihat, menambah, mengedit, dan menghapus data dalam Redis melalui interface visual.</p> <p></p> <p></p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#instalasi-package-di-nestjs","title":"Instalasi Package di NestJs","text":"<p>Setelah selesai Instalasi Redis, kemudian kita instalasi package yang dibutuhkan.</p> terminal<pre><code>npm install ioredis  cache-manager cache-manager-redis-store\nnpm install @nestjs/cache-manager @types/cache-manager-redis-store\n</code></pre> <p>Penjelasan</p> <ul> <li> <p><code>ioredis</code> merupakan package yang digunakan untuk interaksi Redis dengan aplikasi Node.js, termasuk untuk melakukan operasi read/write, mengelola cache, dan menangani Redis Cluster.</p> </li> <li> <p><code>cache-manager</code> merupakan untuk mengatur dan mengelola cache dengan dukungan berbagai back-end caching seperti Redis, in-memory, atau store lainnya.</p> </li> <li> <p><code>cache-manager-redis-store</code> merupakan store redis untuk package  <code>cache-manager</code>. Dengan menggunakan package ini, cache-manager dapat menggunakan Redis sebagai backend caching.</p> </li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#membuat-environment-variabel-untuk-redis","title":"Membuat <code>environment variabel</code> untuk redis","text":"<p>Kita tambahkan konfigurasi pada <code>env</code> untuk redis seperti berikut</p> env<pre><code>REDIS_HOST=127.0.0.1\nREDIS_PORT=6379\nREDIS_PASSWORD = rahasia\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#membuat-cache-store","title":"Membuat Cache Store","text":"<p><code>Cache store</code> pada Redis di NestJS merupakan mekanisme penyimpanan data sementara menggunakan Redis sebagai media caching. Pada aplikasi NestJS, caching berguna untuk menyimpan hasil dari operasi yang memakan waktu atau sering diulang, seperti query database atau API eksternal, sehingga meningkatkan performa dan mengurangi beban pada server.</p> <p>Dengan menggunakan Redis sebagai cache store, data disimpan dalam memori  untuk waktu yang singkat (sesuai TTL atau Time to Live) dan dapat diakses dengan cepat.</p> <p>Untuk mengkonfigurasi Redis sebagai <code>cache store</code> di NestJS, kita dapat menggunakan <code>cache-manager-redis-store</code> dan mengintegrasikan Redis sebagai penyimpanan cache.</p> <p>Langkah pertama kita buat <code>cache config</code> seperi berikut.</p> config/cache.config.ts<pre><code>import { CacheModuleOptions } from '@nestjs/cache-manager';\nimport * as redisStore from 'cache-manager-redis-store';\nexport const config: CacheModuleOptions = {\nstore: redisStore,\nhost: `${process.env.REDIS_HOST}`,\nport: Number(process.env.REDIS_PORT),\nauth_pass: `${process.env.REDIS_PASSWORD}`,\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#membuat-module-dan-service-redis","title":"Membuat Module dan Service redis","text":"<p>Setelah membuat <code>cache config</code> kita akan membuat <code>module</code> dan <code>service</code> redis yang akan digunakan oleh module lain pada aplikasi nestjs. </p> terminal<pre><code>npx nest g module redis\nnpx nest g service redis\n</code></pre> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#registrasi-redis-cachemodule","title":"Registrasi Redis CacheModule","text":"<p>Redis dapat di integrasikan sebagai cache store menggunakan CacheModule. Pada materi ini, kita akan mempelajari bagaimana regisrasi dan mengonfigurasi Redis sebagai mekanisme cache secara global di aplikasi NestJS melalui modul khusus.</p> redis.module.ts<pre><code>import { Global, Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\nimport { CacheModule } from '@nestjs/cache-manager';\n@Global()\n@Module({\nimports : [CacheModule.registerAsync({\nisGlobal: true,\nuseFactory: async () =&gt; {\nconst { config } = await import(\"../config/cache.config\");\nreturn config;\n},\n})],\nproviders: [RedisService],\nexports:[RedisService]\n})\nexport class RedisModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#method-yang-dimilki-cache-manager","title":"Method yang dimilki cache-manager","text":"<p><code>cache-manager</code> memiliki beberapa method yang bisa kita gunakan untuk implementasi redis sebagai caching. Berikut method-method yang dimiliki <code>cache-manager</code>.</p> Feature Interface Parameter <code>set</code> <code>set(key: string, value: any, options?: CacheOptions)</code> - <code>key</code>: Kunci cache (string). - <code>value</code>: Nilai yang akan disimpan. - <code>options</code>: Opsi tambahan, seperti <code>ttl</code> (time-to-live, waktu kadaluarsa). <code>get</code> <code>get(key: string)</code> - <code>key</code>: Kunci cache (string). Mengambil nilai dari cache berdasarkan kunci. <code>del</code> <code>del(key: string)</code> - <code>key</code>: Kunci cache (string). Menghapus entri cache berdasarkan kunci. <code>reset</code> <code>reset()</code> Menghapus semua entri dalam cache. <code>wrap</code> <code>wrap(key: string, fn: Function, ttl?: number)</code> - <code>key</code>: Kunci cache (string). - <code>fn</code>: Fungsi untuk menghitung atau mengambil nilai baru jika nilai cache tidak ditemukan. - <code>ttl</code>: (Opsional) Time-to-live untuk nilai cache yang disimpan."},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/2.%20Instalasi/#membuat-method-di-redis-service","title":"Membuat Method di Redis Service","text":"<p>Setelah kita tahu apa saja method yang dimiliki <code>cache-manager</code>. Selanjutnya kita akan membuat method-method yang akan digunakan oleh module lain untuk menyimpan, mengambil, dan menghapus cache di Redis.</p> redis.service.ts<pre><code>import { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { Cache } from 'cache-manager';\n@Injectable()\nexport class RedisService {\n@Inject(CACHE_MANAGER) private cacheManager: Cache;\nasync setCacheKey({\nkey: key,\ndata: data,\nttl = 60,\n}: {\nkey: string | number;\ndata: any;\nttl?: number;\n}) {\nreturn await this.cacheManager.set(`${key}`, data, ttl);\n}\nasync getCacheKey(key: string) {\nreturn await this.cacheManager.get(`${key}`);\n}\nasync deleteCacheKey(key: string) {\nreturn await this.cacheManager.del(`${key}`);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/3.%20Implementasi/","title":"Implementasi Redis sebagai Cache Store","text":"<p>Pada contoh ini kita akan coba implementasi redis sebagai cache management dari NestJS. untuk studi kasus kita akan implementasikan pada service order.</p> <p>Pertama kita tambahkan <code>RedisService</code> pada <code>OrderService</code></p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/3.%20Implementasi/#implementasi-redis-di-orderservice","title":"Implementasi Redis di OrderService","text":"order.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInject,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Between, Like, Repository } from 'typeorm';\nimport { Order } from './order.entity';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Workbook } from 'exceljs';\nimport { Response } from 'express';\nimport { KafkaService } from 'src/kafka/kafka.service';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\nimport { RedisService } from 'src/redis/redis.service';\n@Injectable()\nexport class OrderService extends BaseResponse {\nconstructor(\n@InjectRepository(Order)\nprivate readonly orderRepository: Repository&lt;Order&gt;,\n@Inject(REQUEST) private req: any,\nprivate readonly kafkaService: KafkaService,\nprivate readonly redisService: RedisService,\n) {\nsuper();\n}\n</code></pre> <p>Kemudian kita ubah sedikit method <code>findById</code> pada <code>orderService</code> seperti berikut.</p> order.service.ts<pre><code>async findById(id: number): Promise&lt;ResponseSuccess&gt; {\nconst cachedData = await this.redisService.getCacheKey(`order_${id}`);\nif (cachedData) {\nreturn this._success('Getting data from cache!', cachedData);\n}\nconst result = await this.orderRepository.findOne({\nwhere: {\nid: id,\n},\nrelations: [\n'created_by',\n'konsumen',\n'order_detail',\n'order_detail.produk',\n],\nselect: {\nid: true,\nnomor_order: true,\nstatus: true,\ntotal_bayar: true,\ntanggal_order: true,\nkonsumen: {\nid: true,\nnama_konsumen: true,\n},\ncreated_by: {\nid: true,\nnama: true,\n},\norder_detail: {\nid: true,\njumlah: true,\nproduk: {\nid: true,\nnama_produk: true,\nharga: true,\n},\n},\n},\n});\nawait this.redisService.setCacheKey({ key: `order_${id}`, data: result });\nreturn this._success('OK', result);\n}\n</code></pre> <p>Pada kode di atas kita tambahkan perintah agar melakukan pengecekan , apakah data yang diminta berada dalam cache di redis. Jika sudah ada maka data tersebut akan dijadikan response ke client, namun jika tidak akan akan dikakukan query ke database. Setelah mendapatkan data dari database, data tersbut akan disimpan ke dalam redis agar dapat digunakan untuk request selanjutnya.</p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/3.%20Implementasi/#testing-dengan-postman","title":"Testing dengan Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/3.%20Implementasi/#testing-saat-findbyid-pada-detail","title":"Testing saat findById pada Detail","text":""},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/3.%20Implementasi/#testing-saat-update-detail","title":"Testing saat Update Detail","text":"<p>Pada saat testing update data, ternyata masih ada kelemahan dari kode kita.  Ketika kita berhasil update detail id 1 tersebut, kemudian saat get detail kembali maka data yg diberikan masih data yang lama, padahal data sudah diupdate. Untuk menyelesaikan masalah ini, kita tambahkan kode untuk menghapus cache data tersebut di redis jika update berhasil.</p> order.service.ts<pre><code>async updateOrder(\nid: number,\npayload: UpdateOrderDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.orderRepository.findOne({\nwhere: {\nid: id,\n},\n});\nif (!check) {\nthrow new HttpException('Data tidak ditemukan', HttpStatus.NOT_FOUND);\n}\npayload.order_detail &amp;&amp;\npayload.order_detail.forEach((item) =&gt; {\nitem.created_by = this.req.user.id;\n});\nconst order = await this.orderRepository.save({ ...payload, id: id });\nthis.redisService.deleteCacheKey(`order_${id}`)\nreturn this._success('OK', order);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/3.%20Implementasi/#testing-kembali","title":"Testing Kembali","text":""},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/4.%20Implementasi%20Pubsuv/","title":"Implementasi Redis sebagai Publish Subscribe","text":"<p>Selain sebagai sebuah cache manager, redis juga bisa digunkan sebagai Redis Pub/Sub. <code>Publish/Subscribe</code> adalah fitur Redis yang memungkinkan komunikasi real-time antar sistem atau aplikasi seperti kafka yang kita pelajari sebelumnya. Ini digunakan untuk pengiriman pesan secara <code>asyncronous</code> antara <code>publisher</code> (pengirim pesan) dan <code>subscriber</code> (penerima pesan).</p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/4.%20Implementasi%20Pubsuv/#bagaimana-redis-pubsub-bekerja","title":"Bagaimana Redis Pub/Sub Bekerja:","text":"<p><code>Publisher</code>akan  mngirim pesan ke channel tertentu, kemudian <code>Subscriber</code>akan Mendengarkan (<code>subscribe</code>) channel tertentu dan menerima pesan yang diterbitkan oleh<code>publisher</code> ke channel tersebut. Ketika sebuah pesan dikirimkan oleh <code>publisher</code> ke channel Redis, Redis akan mengirimkan pesan tersebut ke semua<code>subscriber</code> yang listen channel yang sama.</p>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/4.%20Implementasi%20Pubsuv/#penggunaan-redis-pubsub","title":"Penggunaan Redis Pub/Sub:","text":"<ul> <li><code>Real-time communication</code>: Digunakan untuk membangun sistem real-time seperti notifikasi, chat aplikasi, atau streaming data.</li> <li><code>Event-driven architecture</code>: Cocok untuk aplikasi yang menggunakan arsitektur berbasis <code>event</code>, di mana satu layanan dapat menerbitkan <code>event</code> dan layanan lain mendengarkannya.</li> </ul> <p>Perbedaan <code>Redis Pub/Sub</code> dan <code>Redis Cache</code></p> Fitur Redis Pub/Sub Redis Cache Fungsi utama Komunikasi real-time antar sistem (publish/subscribe) Penyimpanan sementara data untuk akses cepat (caching) Cara kerja Pesan dikirim ke channel dan diterima oleh subscriber Data disimpan dengan kunci dan dapat diambil kembali melalui cache Penyimpanan data Tidak menyimpan pesan, pesan hanya diteruskan ke subscriber Data disimpan dalam memori untuk diambil kembali dalam waktu tertentu Contoh penggunaan Chat aplikasi, notifikasi real-time, event-driven systems Menyimpan hasil kueri database untuk mengurangi beban akses Skalabilitas Terbatas dalam skala besar, lebih cocok untuk skenario kecil Bisa digunakan di aplikasi besar untuk mengurangi latensi"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/4.%20Implementasi%20Pubsuv/#nestjs-sebagai-redis-subscribe","title":"NestJS sebagai Redis Subscribe","text":"<p>Untuk membuat<code>Redis Subscribe</code> kita harus konfigurasi terlebih dahulu seperti pada kafka sebelumnya.  Pertama kita buat sebuah file <code>redis.config.ts</code> untuk menyimpan konfigurasi global untuk redis di nestjs.</p> config/redis.config.ts<pre><code>import { RedisOptions, Transport } from '@nestjs/microservices';\nimport { config as dotenv } from 'dotenv';\ndotenv();\nexport const redisConfig: RedisOptions = {\ntransport: Transport.REDIS,\noptions: {\nhost: `${process.env.REDIS_HOST}`,\nport: Number(process.env.REDIS_PORT),\npassword: `${process.env.REDIS_PASSWORD}`,\n},\n};\n</code></pre> <p>Kemudian kita implementasi config tersebut untuk menghubungkan nestjs ke dalam <code>microservice</code> yang menggunakan redis.</p> main.ts<pre><code>import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\nimport { useContainer } from 'class-validator';\nimport { kafkaConfig } from './config/kafka.config';\nimport { MicroserviceOptions } from '@nestjs/microservices';\nimport { redisConfig } from './config/redis.config';\nasync function bootstrap() {\nconst app = await NestFactory.create(AppModule, {\ncors: true,\n});\napp.enableCors();\napp.useGlobalPipes(\nnew ValidationPipe({\nwhitelist: true,\nforbidUnknownValues: true,\ntransform: true,\nvalidateCustomDecorators: true,\ntransformOptions: {\nenableImplicitConversion: true,\n},\n}),\n);\napp.connectMicroservice&lt;MicroserviceOptions&gt;(redisConfig);\napp.connectMicroservice&lt;MicroserviceOptions&gt;(kafkaConfig);\napp.startAllMicroservices();\nuseContainer(app.select(AppModule), { fallbackOnErrors: true });\nawait app.listen(process.env.APP_PORT);\n}\nbootstrap();\n</code></pre> <p>Info</p> <ul> <li><code>app.connectMicroservice</code>: Ini adalah method dari NestJS yang digunakan untuk menghubungkan aplikasi ke sebuah microservice.</li> <li><code>&lt;MicroserviceOptions&gt;</code>: Ini adalah generic type yang menandakan bahwa kita akan memberikan opsi konfigurasi untuk microservice. Opsi ini harus sesuai dengan interface MicroserviceOptions yang disediakan oleh @nestjs/microservices.</li> <li>r<code>edisConfig</code>: Ini adalah objek yang berisi konfigurasi untuk menghubungkan ke Redis. Objek ini biasanya berisi informasi seperti host Redis, port, dan mungkin juga password jika Redis Anda diproteksi dengan password.</li> </ul> <p>Setelah kita menjadikan nest sebagai <code>subscribe</code>, selanjutkan kita buat controller untuk mendengar dan menerima apabila ada message yang dikirim dari publish. Pada contoh ini kita buat channel bernama notifikasi</p> order.controller.ts<pre><code> @MessagePattern(\"notifikasi\")\nasync handleOrderCrated(data) {\nconst pesan = {\nto: data.id,\nmessage: `Update berhasil`,\n};\nconsole.log(pesan);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/4.%20Implementasi%20Pubsuv/#nestjs-sebagai-redis-publisher","title":"NestJS sebagai Redis Publisher","text":"<p>Untuk membaut redis sebagai publisher , kita daftarkan redis config tersebut di <code>redis.module.ts</code></p> redis.module.ts<pre><code>import { Global, Module } from '@nestjs/common';\nimport { RedisService } from './redis.service';\nimport { CacheModule } from '@nestjs/cache-manager';\nimport { ClientsModule } from '@nestjs/microservices';\nimport { redisConfig } from 'src/config/redis.config';\n@Global()\n@Module({\nimports: [\nClientsModule.register([\n{\nname: 'LATIHAN_REDIS_PUBSUB',\n...redisConfig,\n},\n]),\nCacheModule.registerAsync({\nisGlobal: true,\nuseFactory: async () =&gt; {\nconst { config } = await import('../config/cache.config');\nreturn config;\n},\n}),\n],\nproviders: [RedisService],\nexports: [RedisService],\n})\nexport class RedisModule {}\n</code></pre> redis.service.ts<pre><code>import { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { ClientProxy } from '@nestjs/microservices';\nimport { Cache } from 'cache-manager';\n@Injectable()\nexport class RedisService {\n@Inject(CACHE_MANAGER) private cacheManager: Cache;\n@Inject('LATIHAN_REDIS_PUBSUB') private client: ClientProxy;\nasync setCacheKey({\nkey: key,\ndata: data,\nttl = 60,\n}: {\nkey: string | number;\ndata: any;\nttl?: number;\n}) {\nreturn await this.cacheManager.set(`${key}`, data, ttl);\n}\nasync getCacheKey(key: string) {\nreturn await this.cacheManager.get(`${key}`);\n}\nasync deleteCacheKey(key: string) {\nreturn await this.cacheManager.del(`${key}`);\n}\nasync sendNotification(channel: string, data: any) {\nthis.client.emit(channel, { ...data });\nreturn data;\n}\n}\n</code></pre> order.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInject,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Between, Like, Repository } from 'typeorm';\nimport { Order } from './order.entity';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Workbook } from 'exceljs';\nimport { Response } from 'express';\nimport { KafkaService } from 'src/kafka/kafka.service';\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Cache } from 'cache-manager';\nimport { RedisService } from 'src/redis/redis.service';\n@Injectable()\nexport class OrderService extends BaseResponse {\nconstructor(\n@InjectRepository(Order)\nprivate readonly orderRepository: Repository&lt;Order&gt;,\n@Inject(REQUEST) private req: any,\nprivate readonly kafkaService: KafkaService,\nprivate readonly redisService: RedisService,\n) {\nsuper();\n}\n...\nasync updateOrder(\nid: number,\npayload: UpdateOrderDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.orderRepository.findOne({\nwhere: {\nid: id,\n},\n});\nif (!check) {\nthrow new HttpException('Data tidak ditemukan', HttpStatus.NOT_FOUND);\n}\npayload.order_detail &amp;&amp;\npayload.order_detail.forEach((item) =&gt; {\nitem.created_by = this.req.user.id;\n});\nconst order = await this.orderRepository.save({ ...payload, id: id });\nthis.redisService.deleteCacheKey(`order_${id}`);\nconst hasil = await this.redisService.sendNotification('notifikasi', {\nid: id,\n});\nreturn this._success('OK', order;\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/10.%20Redis/4.%20Implementasi%20Pubsuv/#testing-pada-postman","title":"Testing pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/1.%20Konsep/","title":"Konsep WebSocket","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/1.%20Konsep/#apa-itu-websocket","title":"Apa itu WebSocket?","text":"<p>WebSocket (WS) adalah sebuah protokol komunikasi komputer yang memungkinkan untuk berkomunikasi secara 2 arah diatas 1 koneksi TCP. WebSocket mengizinkan interaksi antara client dengan server secara <code>real-time</code>. Dengan protokol ini dapat mengirim request secara terus menerus tanpa harus membuka koneksi untuk 1 koneksi seperti protokol HTTP.</p> <p>Berikut beberapa kelebihan WebSocket dibandingkan menggunakan HTTP </p> <ul> <li>Koneksi 2 arah secara asynchronous, baik client maupun server dapat mengirim pesan ke masing-masing tujuan secara langsung tanpa pihak yang menerima data harus request terlebih dahulu</li> <li><code>Latency time</code> yang sangat rendah</li> <li><code>Stream data</code> secara <code>real-time</code> Beberapa aplikasi yang lebih baik menggunakan websocket Realtime Notification Aplikasi chat Aplikasi yang memerlukan realtime perubahan data</li> </ul> <p>Beberapa aplikasi yang lebih baik menggunakan websocket </p> <ul> <li>Realtime Notification </li> <li>Aplikasi chat </li> <li>Aplikasi yang memerlukan realtime perubahan data</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/1.%20Konsep/#koneksi-http-vs-websocket","title":"Koneksi HTTP vs WebSocket","text":"<p>Sumber Gambar klik disini</p> <p>Perbandingan dengan protokol HTTP dan WebSocket HTTP :</p> <ul> <li>HTTP : Client hanya bisa mengirim request, dan server mengirim balik response ke client. </li> <li>WebSocket : Ketika koneksi antara client dan server terhubung, maka kedua pihak dapat saling mengirim data tanpa membuka koneksi baru, sampai koneksi tersebut putus.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/1.%20Konsep/#apa-itu-socketio","title":"Apa itu Socket.io ?","text":"<p><code>Socket.io</code> adalah <code>real-time engine opensource</code> yang dibangun di atas Node.js. Dengan <code>Socket.io</code> kita dapat berkomunikasi secara <code>real-time</code>, dua arah dan komunikasi berbasis <code>event</code>. Dengan komunikasi berbasis <code>event</code>, kita tidak perlu <code>request</code> untuk mendapatkan data terbaru, yang perlu kita lakukan hanyalah <code>listen</code> / <code>subcribe</code> ke suatu topik. Jadi selama <code>WebSocket</code> tetap aktif dan listen ke suatu topik. Jika terdapat data baru di <code>topic</code> tersebut, kita akan mendapatkan datanya secara otomatis.</p> <p>Dokumentasi socket.io disini</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/1.%20Konsep/#event-socketio","title":"Event Socket.io","text":"<ul> <li><code>emit</code> berfungsi untuk mengirimkan sebuah pesan dari server ke client atau sebaliknya. </li> <li><code>on</code> berfungsi untuk menerima data atau informasi yang dikirimkan dari emmit event yang akan segera di proses oleh method yang sudah dibuat.</li> <li><code>Broadcast</code>, merupakan fitur untuk mengirim data/pesan seperti event emitter, namun broadcast mengirim ke semua alamat socket yang aktif kecuali pengirimnya sendiri. </li> <li><code>join</code> berfungsi untuk memasukkan klien (socket) ke dalam sebuah \"room\" . Dengan konsep room, kita bisa mengelompokkan beberapa klien yang terhubung ke dalam grup tertentu, sehingga memungkinkan pengiriman pesan yang lebih terfokus hanya kepada klien di dalam room tersebut. Hal ini dapat kita gunakan misalnya dalam percakapan grup atau chat pribadi.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/1.%20Konsep/#keuntungan-socketio","title":"Keuntungan Socket.io","text":"<ul> <li><code>Komunikasi real-time</code>: Socket.IO memungkinkan pengiriman dan penerimaan data secara langsung antara klien dan server, sehingga aplikasi dapat merespons perubahan data secara instan.</li> <li><code>Kompabilitas</code> yang baik: Socket.IO bekerja di berbagai browser dan platform dengan dukungan fallback untuk teknik polling jika WebSocket tidak tersedia.</li> <li><code>Event-based communication</code>: Socket.IO menggunakan model komunikasi yang berbasis event, di mana klien dan server dapat saling mengirim dan menerima event.</li> <li><code>Skalabilitas</code>: Socket.IO dirancang untuk dapat digunakan dalam sistem yang dapat diskalakan, sehingga dapat menangani banyak koneksi secara bersamaan.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/2.%20Websocker%20Server/","title":"Implementasi Websocket di Server","text":"<p>NestJS bisa digunakan untuk menangani koneksi dan komunikasi dengan websocket.  Dalam NestJs implmentasi websocket disebut gateway dengan menggunakan decorator<code>@WebSocketGateway()</code>. Gateways bersifat <code>platform-agnostic,</code> artinya tidak terikat pada library WebSocket tertentu. Hal ini memungkinkan gateway untuk bekerja dengan library WebSocket apa pun, asalkan ada adapter yang sesuai. NestJS menyediakan dua library websocket yang didukung secara default, yaitu <code>socket.io</code> dan <code>ws</code>.</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/2.%20Websocker%20Server/#instalasi","title":"Instalasi","text":"<p>Untuk memulai belajar implementasi <code>WebSockets-based applications</code> di NestJS, pertama kita lakukan instalasi package yang diperlukan.</p> terminal<pre><code>npm i --save @nestjs/websockets @nestjs/platform-socket.io\n</code></pre> <p>Kemudian kita buat module websocket dan file gateway untuk menangani koneksi websocket. terminal<pre><code>npx nest g module app/websocket\n</code></pre></p> <p>Kemudian secara manual file <code>websocket.gateway.ts</code></p> <p></p> websocket.gateway.ts<pre><code>import {\nMessageBody,\nSubscribeMessage,\nWebSocketGateway,\nWebSocketServer,\n} from '@nestjs/websockets';\nimport { Server } from 'socket.io';\n@WebSocketGateway({\nnamespace: 'events',\ncors: {\norigin: '*', // ubah kedomain spesifik jika perlu\n},\n})\nexport class MessageGateway {\n@WebSocketServer()\nserver: Server;\n@SubscribeMessage('send_message')\nsendMessage(@MessageBody() body: any) {\nthis.server.emit('send_message.reply', {\nmsg: 'new Message',\ndata: body,\n});\n}\n}\n</code></pre> <p>Info</p> <ul> <li><code>@WebSocketGateway</code>: Dekorator ini mendefinisikan gateway WebSocket. Dalam NestJS, gateway bertugas untuk menangani koneksi WebSocket dan event-event yang terkait. </li> <li><code>namespace: 'events'</code>: Menentukan namespace untuk gateway WebSocket. Dalam kasus ini, gateway hanya akan menangani koneksi pada namespace 'events'. contoh <code>https://localhost:3000/events</code> atau <code>ws://localhost/event</code></li> <li><code>cors: { origin: '*' }</code>: Mengizinkan koneksi dari semua origin. Hal ini biasa digunakan saat development, adapun saat production harus menggunaka spesifik url</li> <li><code>@WebSocketServer()</code>: Decorator ini memberitahu NestJS untuk menginisialisasi properti <code>server</code> sebagai <code>instance</code> dari server WebSocket. Dengan decorator ini, kita dapat langsung mengakses instance dari server WebSocket yang berjalan di gateway.</li> <li><code>server: Server</code>:  mendeklarasi properti server dari tipe Server. Server biasanya di import dari library Websocket seperti <code>socket.io  -</code>@SubscribeMessage('send_message')<code>decorator yang menunjukkan bahwa nestjs akan mendengarkan pesan yang dikirimkan pada event</code>send_message</li> <li><code>this.server.emit('send_message.reply', {   msg: 'new Message',   data: body, });</code> : ini adalah perintah agar nestjs mengirmkan pesan kepada event <code>send_message.reply</code>.</li> </ul> <p>Kemudian kita export Class <code>MessageGateway</code> agar bisa diakses oleh method lain</p> websocket.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { MessageGateway } from './websocket.gateway';\n@Global()\n@Module({\nproviders: [MessageGateway],\nexports: [MessageGateway],\n})\nexport class WebsocketModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/2.%20Websocker%20Server/#pengujian-koneksi-websocket-di-postman","title":"Pengujian Koneksi WebSocket di Postman","text":"<p>Buatlah request baru dengan pilih <code>new</code> dan pilih <code>socket.io</code> seperti gambar di bawah.</p> <p></p> <p>kemudian pada kolom url tuliskan url server seperti contoh <code>http://localhost:5002/event</code> dengan <code>event</code> merupakan namespace. Setelah itu klik connect untuk menghubungkan client dengan server. </p> <p></p> <p>Apabil koneksi berhasil maka akan tampak seperti gambar dibawah ini.</p> <p></p> <p>Kemudian buat <code>Request</code> baru untuk  <code>receiver</code> sepert gambar di bawah ini. Pada tab <code>events</code> tambahkan <code>send_message.reply</code> dan listen true agar client bersiap menerima data jika dikirimkan ke channel   <code>send_message</code>.</p> <p></p> <p>Penjelasan</p> <ul> <li><code>tab events</code> : digunakan untuk membuat simulasi listen websocket </li> <li>pada simulasi ini receiver akan memperoleh pesan yang dikirimkan pada event <code>send_message.reply</code></li> </ul> <p></p> <p>Penjelasan</p> <ul> <li><code>tab message</code> : digunakan untuk membuat simulasi mengirimkan message</li> <li>pada simulasi ini sender akan mengirimkan pesan pada event <code>send_message</code></li> </ul> <p></p> <p>Pada simulasi ini, kita telah berhasil mengirimkan pesan dari sender dan pesan berhasil diterima oleh receiver.</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/","title":"3. Study Kasus (Socket Server)","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membaut-module-chat","title":"Membaut Module Chat","text":"terminal<pre><code>npx nest g module app/chat\nnpx nest g service app/chat\nnpx nest g controller app/chat\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-table-conversation","title":"Membuat Table Conversation","text":"conversation.entity.ts<pre><code>import {\nBaseEntity,\nColumn,\nEntity,\nJoinColumn,\nManyToOne,\nOneToMany,\nPrimaryGeneratedColumn,\n} from 'typeorm';\nimport { User } from '../auth/auth.entity';\nimport { Message } from './message.entity';\n@Entity()\nexport class Conversation extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'user1' })\nuser1: User;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'user2' })\nuser2: User;\n@OneToMany(() =&gt; Message, (v) =&gt; v.conversation_id)\nmessages: Message[];\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-table-message","title":"Membuat Table Message","text":"message.entity.ts<pre><code>import {\nBaseEntity,\nColumn,\nEntity,\nJoinColumn,\nManyToOne,\nPrimaryGeneratedColumn,\n} from 'typeorm';\nimport { User } from '../auth/auth.entity';\nimport { Conversation } from './conversation.entity';\n// Import entitas Conversation\n@Entity()\nexport class Message extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'sender' })\nsender: User;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'receiver' })\nreceiver: User;\n@Column({ type: 'text' })\nmessage: string;\n@Column({ nullable: true })\nfile: string;\n@Column()\nis_read: number;\n@ManyToOne(() =&gt; Conversation)\n@JoinColumn({ name: 'conversation_id' })\nconversation_id: Message;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-dto","title":"Membuat Dto","text":"chat.dto.ts<pre><code>import { OmitType, PartialType, PickType } from '@nestjs/mapped-types';\nimport {\nIsEmail,\nIsInt,\nIsObject,\nIsOptional,\nIsString,\nLength,\nMinLength,\n} from 'class-validator';\nimport { IsUnique } from 'src/utils/validator/unique.validator';\nexport class MessageDto {\n@IsInt()\nid: number;\n@IsObject()\n@IsOptional()\nsender: { id: number };\n@IsObject()\n@IsOptional()\nreceiver: { id: number };\n@IsString()\nmessage: string;\n@IsString()\nfile: string;\n@IsOptional()\nis_read : number\n@IsString()\nroom_receiver : string\n@IsString()\nroom_sender : string\n@IsObject()\n@IsOptional()\nconversation_id: { id: number };\n}\nexport class SendMessageDto extends OmitType(MessageDto, [\n\"id\"\n]) {}\nexport class ConversationDto {\n@IsInt()\nid: number;\n@IsObject()\n@IsOptional()\nuser1: { id: number };\n@IsObject()\n@IsOptional()\nuser2: { id: number };\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#import-module-websocket","title":"Import Module WebSocket","text":"chat.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { ChatService } from './chat.service';\nimport { ChatController } from './chat.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Message } from './message.entity';\nimport { Conversation } from './conversation.entity';\nimport { WebsocketModule } from '../websocket/websocket.module';\n@Module({\nimports: [TypeOrmModule.forFeature([Message, Conversation] ), WebsocketModule ],\nproviders: [ChatService],\ncontrollers: [ChatController]\n})\nexport class ChatModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-service-untuk-join-room","title":"Membuat Service untuk join Room","text":"websocket.gateway.ts<pre><code>   @SubscribeMessage('join')\njoinRoom(\n@MessageBody('room_code') room_code: string,\n@ConnectedSocket() client: Socket,\n) {\nconsole.log('join', room_code);\nclient.join(room_code);\nthis.server.emit('join.reply', {\nmessage: `You have joined room`,\n});\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-service-untuk-send-dan-receiver-di-dalam-room","title":"Membuat Service untuk send dan receiver di dalam room","text":"websocket.gateway.ts<pre><code> @SubscribeMessage('send_message')\nsendMessage(@MessageBody() body: SendMessageDto) {\nthis.server.to(body.room_receiver).emit('received_message', {\nmsg: 'new Message',\ndata: body,\n});\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#menyiapkan-user","title":"Menyiapkan User","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-conversation_id-antar-user","title":"Membuat Conversation_id antar user","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-api-untuk-generate-conversation_id","title":"Membuat API untuk generate conversation_id","text":"controller.chat.ts<pre><code>import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { ChatService } from './chat.service';\n@UseGuards(JwtGuard)\n@Controller('chat')\nexport class ChatController {\nconstructor(private chat: ChatService) {}\n@Post('/generate-conversation-id')\nasync generate(@Body('user2') user2: number) {\nreturn this.chat.generateConversationId(user2);\n}\n}\n</code></pre> service.chat.ts<pre><code>import { Inject, Injectable } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseSuccess } from 'src/interface/response';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Conversation } from './conversation.entity';\nimport { Repository } from 'typeorm';\nimport { randomBytes } from 'crypto';\nimport { Message } from './message.entity';\nimport { MessageGateway } from '../websocket/websocket.gateway';\n@Injectable()\nexport class ChatService extends BaseResponse {\nconstructor(\n@InjectRepository(Conversation)\nprivate readonly conversationRepository: Repository&lt;Conversation&gt;,\n@Inject(REQUEST) private req: any,\n) {\nsuper();\n}\nasync generateConversationId(user2: number): Promise&lt;ResponseSuccess&gt; {\nlet user1 = this.req.user.id;\nconst code = await this.conversationRepository.findOne({\nwhere: [\n{\nuser1: {\nid: user1,\n},\nuser2: {\nid: user2,\n},\n},\n{\nuser1: {\nid: user2,\n},\nuser2: {\nid: user1,\n},\n},\n],\n});\nif (code === null) {\nconst result =  await this.conversationRepository.save({\nuser1: {\nid: user1,\n},\nuser2: {\nid: user2,\n},\n});\nreturn this._success('OK', {\nconversation_id:result.id,\nuser1,\nuser2,\n});\n}\nreturn this._success('OK', {\nconversation_id: code.id,\nuser1,\nuser2,\n});\n}\n}\n</code></pre> <p>Penjelasan ...</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-posman-untuk","title":"Membuat Posman untuk","text":"<p>ihsan</p> <p> </p> <p>raihan </p> <p>Lakukan hal yang sama pada daffa dan aziz</p> <p>_Mencoba mengirim pesan dari ihsan ke raihan _</p> terminal<pre><code>{\n\"sender\" : 1,\n\"receiver\" : 3,\n\"message\" : \"hai raihan\",\n\"room_receiver\" : \"raihan@gmail.com\"\n}\n</code></pre> <p> </p> <p>_Mencoba mengirim pesan dari azis ke ihsan _</p> terminal<pre><code>{\n\"sender\" : 2,\n\"receiver\" : 1,\n\"message\" : \"hai ihsan\",\n\"room_receiver\" : \"ihsan@gmail.com\"\n}\n</code></pre> <p> </p> <p>Penjelasan</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-api-untuk-send_message","title":"Membuat API untuk send_message","text":"controller.chat.ts<pre><code>import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { ChatService } from './chat.service';\nimport { SendMessageDto } from './chat.dto';\n@UseGuards(JwtGuard)\n@Controller('chat')\nexport class ChatController {\nconstructor(private chat: ChatService) {}\n@Post('send_message')\nasync send_message(@Body() payload: SendMessageDto) {\nreturn this.chat.create(payload);\n}\n}\n</code></pre> service.chat.ts<pre><code>import { Inject, Injectable } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { ResponseSuccess } from 'src/interface/response';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Conversation } from './conversation.entity';\nimport { Repository } from 'typeorm';\nimport { randomBytes } from 'crypto';\nimport { Message } from './message.entity';\nimport { MessageGateway } from '../websocket/websocket.gateway';\nimport { SendMessageDto } from './chat.dto';\n@Injectable()\nexport class ChatService extends BaseResponse {\nconstructor(\n@InjectRepository(Conversation)\nprivate readonly conversationRepository: Repository&lt;Conversation&gt;,\n@InjectRepository(Message)\nprivate readonly messageRepository: Repository&lt;Message&gt;,\nprivate readonly webService: MessageGateway,\n@Inject(REQUEST) private req: any,\n) {\nsuper();\n}\nasync create(payload: SendMessageDto) {\nconst result = await this.messageRepository.save({\n...payload,\nsender: this.req.user.id,\nis_read : 0\n});\nthis.webService.create({\n...result,\nroom_receiver: payload.room_receiver,\nroom_sender: this.req.user.email,\n});\nreturn this._success('OK');\n}\n}\n</code></pre> websocket.gateway.ts<pre><code>async create(payload: SendMessageDto) {\nthis.server.to(payload.room_sender).emit('received_message', payload);\nthis.server.to(payload.room_receiver).emit('received_message', payload);\n}\n</code></pre> payload<pre><code>{\n\"receiver\" : {\n\"id\" : 3\n},\n\"room_receiver\" : \"raihan@gmail.com\",\n\"conversation_id\" : {\n\"id\" : 1\n},\n\"message\" : \"hello raihan\",\n\"file\": \"https://backend-mysmk.smkmadinatulquran.sch.id/file-1725891827392.JPEG\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-list-user","title":"Membuat list user","text":"controller.chat.ts<pre><code> @Get('list')\nasync list() {\nreturn this.chat.list();\n}\n</code></pre> service.chat.ts<pre><code> async list(): Promise&lt;ResponseSuccess&gt; {\n// Ambil semua percakapan berdasarkan pengguna\nconst conversations = await this.conversationRepository.find({\nwhere: [\n{ user1: { id: this.req.user.id } },\n{ user2: { id: this.req.user.id } },\n],\nrelations: ['user1', 'user2'], // Hanya ambil relasi user1 dan user2\nselect: {\nuser1: { id: true, nama: true, email: true },\nuser2: { id: true, nama: true, email: true },\n},\n});\n// Ambil pesan terbaru untuk setiap percakapan\nconst conversationsWithLatestMessage = await Promise.all(\nconversations.map(async (conversation) =&gt; {\nconst messages = await this.messageRepository\n.createQueryBuilder('message')\n.leftJoin('message.sender', 'sender') // Gabungkan data sender\n.leftJoin('message.receiver', 'receiver') // Gabungkan data receiver\n.addSelect(['sender.id', 'receiver.id']) // Pilih hanya id sender dan receiver\n.where('message.conversation_id = :conversationId', {\nconversationId: conversation.id,\n})\n.orderBy('message.created_at', 'DESC') // Urutkan dari yang terbaru\n.limit(20) // Batasi hanya 10 pesan terakhir\n.getMany();\n// Ambil pesan terbaru\nconst latestMessage = messages[0] || null;\nconst totalMessages = await this.messageRepository\n.createQueryBuilder('message')\n.where('message.conversation_id = :conversationId', {\nconversationId: conversation.id,\n})\n.getCount(); \nreturn {\n...conversation,\nmessages,\nconversation_id: conversation.id,\nlatestMessage, \ntotalMessages,\nlimit : 0,\npageSize : 10\n};\n}),\n);\n// Urutkan percakapan berdasarkan tanggal pesan terbaru (jika ada)\nconst sortedConversations = conversationsWithLatestMessage.sort((a, b) =&gt; {\nconst latestMessageA = a.latestMessage?.created_at || new Date(0);\nconst latestMessageB = b.latestMessage?.created_at || new Date(0);\nreturn latestMessageB.getTime() - latestMessageA.getTime(); // Urutkan dari yang terbaru\n});\nreturn this._success('OK', sortedConversations);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/3.%20Study%20Kasus/#membuat-fitur-sedang-mengetik","title":"Membuat fitur sedang mengetik","text":"websocket.gateway.ts<pre><code>@SubscribeMessage('typing')\nTyping(@MessageBody() payload: { sender: string; receiver: string,is_typing:boolean }) {\nconsole.log('oay', payload)\nthis.server.to(payload.receiver).emit('typing.listen', payload);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/","title":"4. Study Kasus (Integrasi FE)","text":"<p>Selanjutnya kita akan integraikan socket ynag telah kita dibuat selumnya disii server.</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#instalasi-package","title":"Instalasi Package","text":"terminal<pre><code>npm install --save react-infinite-scroll-component\n</code></pre> <p>Dokumentasi Infinite Scroll disini</p> terminal<pre><code>npm install --save socket.io-client\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#buat-page-untuk-chat","title":"Buat Page untuk chat","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#stktur-project","title":"Stktur Project","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#membut-interface","title":"Membut interface","text":"admin/chat/interface/index.ts<pre><code>import { BaseResponseSuccess } from \"@/lib/axiosClient\";\nexport interface ChatMessage {\nid?: number;\nsender: {\nid: number;\n};\nreceiver: {\nid: number;\n};\nconversation_id: {\nid: number;\n};\nmessage: string;\nis_read: number;\nfile: string;\nroom_receiver: string;\nroom_sender: string;\ncreated_at: Date ;\nupdated_at: Date;\n}\nexport interface UserChat {\nid?: number;\ncreated_at?: Date;\nupdated_at?: Date;\nuser1?: {\nid: number;\nnama: string;\nemail: string;\n};\nuser2?: {\nid: number;\nnama: string;\nemail: string;\n};\nmessages: ChatMessage[];\nconversation_id?: number | { id: number };\nlatestMessage?: ChatMessage;\ntotalMessages : number,\nlimit : 0,\npageSize : 10\n}\nexport interface UserChatList extends BaseResponseSuccess {\ndata: UserChat[];\n}\nexport interface Typing {\nsender?: string;\nreceiver?: string;\nis_typing?: boolean;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#data-dummy","title":"Data Dummy","text":"admin/chat/interface/dataDummy.ts<pre><code>     export const dataDummy = {\nstatus: \"Success\",\nmessage: \"OK\",\ndata: [\n{\nid: 1,\ncreated_at: \"2024-09-08T14:22:00.000Z\",\nupdated_at: \"2024-09-08T14:22:00.000Z\",\nuser1: {\nid: 3,\nnama: \"raihan\",\nemail: \"raihan@gmail.com\",\n},\nuser2: {\nid: 1,\nnama: \"ihsan\",\nemail: \"ihsan@gmail.com\",\n},\nmessages: [\n{\nid: 5,\nmessage: \"pong\\n\",\nfile: \"https:/\",\nis_read: 0,\ncreated_at: \"2024-09-10T06:16:26.000Z\",\nupdated_at: \"2024-09-10T06:16:26.000Z\",\nsender: {\nid: 1,\n},\nreceiver: {\nid: 3,\n},\n},\n{\nid: 4,\nmessage: \"ping\",\nfile: \"https:/\",\nis_read: 0,\ncreated_at: \"2024-09-10T06:16:19.000Z\",\nupdated_at: \"2024-09-10T06:16:19.000Z\",\nsender: {\nid: 3,\n},\nreceiver: {\nid: 1,\n},\n},\n{\nid: 3,\nmessage: \"ok\",\nfile: \"https:/\",\nis_read: 0,\ncreated_at: \"2024-09-10T06:16:11.000Z\",\nupdated_at: \"2024-09-10T06:16:11.000Z\",\nsender: {\nid: 3,\n},\nreceiver: {\nid: 1,\n},\n},\n{\nid: 2,\nmessage: \"hello\",\nfile: \"https:/\",\nis_read: 0,\ncreated_at: \"2024-09-10T06:16:05.000Z\",\nupdated_at: \"2024-09-10T06:16:05.000Z\",\nsender: {\nid: 1,\n},\nreceiver: {\nid: 3,\n},\n},\n{\nid: 1,\nmessage: \"tes\",\nfile: \"https:/\",\nis_read: 0,\ncreated_at: \"2024-09-10T06:15:57.000Z\",\nupdated_at: \"2024-09-10T06:15:57.000Z\",\nsender: {\nid: 1,\n},\nreceiver: {\nid: 3,\n},\n},\n],\nconversation_id: 1,\nlatestMessage: {\nid: 5,\nmessage: \"pong\\n\",\nfile: \"https:/\",\nis_read: 0,\ncreated_at: \"2024-09-10T06:16:26.000Z\",\nupdated_at: \"2024-09-10T06:16:26.000Z\",\nsender: {\nid: 1,\n},\nreceiver: {\nid: 3,\n},\n},\n},\n{\nid: 2,\ncreated_at: \"2024-09-08T14:23:57.000Z\",\nupdated_at: \"2024-09-08T14:23:57.000Z\",\nuser1: {\nid: 2,\nnama: \"aziz\",\nemail: \"aziz@gmail.com\",\n},\nuser2: {\nid: 1,\nnama: \"ihsan\",\nemail: \"ihsan@gmail.com\",\n},\nmessages: [],\nconversation_id: 2,\nlatestMessage: null,\n},\n{\nid: 3,\ncreated_at: \"2024-09-08T14:24:25.000Z\",\nupdated_at: \"2024-09-08T14:24:25.000Z\",\nuser1: {\nid: 1,\nnama: \"ihsan\",\nemail: \"ihsan@gmail.com\",\n},\nuser2: {\nid: 4,\nnama: \"ariq\",\nemail: \"ariq@gmail.com\",\n},\nmessages: [],\nconversation_id: 3,\nlatestMessage: null,\n},\n],\n};\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#membuat-hook-usemessage","title":"Membuat hook useMessage","text":"admin/chat/socket/useMessage<pre><code>import { ChangeEvent, useState } from \"react\";\nconst useMessage = ()=&gt; {\nconst [message, setMessage] = useState &lt;string&gt;(\"\");\nconst handleMessage = (e: ChangeEvent&lt;any&gt;) =&gt; {\nsetMessage(e.target.value)\n}\nreturn {message, handleMessage, setMessage}\n}\nexport default useMessage\n</code></pre> admin/chat/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nimport useConversation from \"./lib\";\nimport clsx from \"clsx\";\nimport { useSession } from \"next-auth/react\";\nimport useWebSocket from \"@/app/admin/chat/socket/useWebSocket\";\nimport useMessage from \"@/app/admin/chat/socket/useMessage\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ChatMessage, UserChat, UserChatList } from \"./interface\";\nimport { dataDummy as data } from \"./interface/dummy\";\nexport default function Chat() {\nconst { data: session } = useSession();\nconst [chatList, setChatList] = useState&lt;ChatMessage[]&gt;([]);\nconst { message, handleMessage } = useMessage();\nconst [selected, setSelected] = useState&lt;UserChat&gt;({\ntotalMessages: 0,\nmessages: [],\npage :1,\nlimit : 10\n});\nreturn (\n&lt;&gt;\n&lt;div className=\"grid grid-cols-7 h-screen w-full bg-[#0C141A]  \"&gt;\n&lt;section className=\"col-span-2 h-scren pt-10 bg-[#111B21]\"&gt;\n{data &amp;&amp;\ndata.data.map((item: any, index: number) =&gt; {\nreturn (\n&lt;section\nkey={index}\nonClick={() =&gt; {\nsetSelected(item);\nconsole.log(\"item\", item);\nsetChatList(() =&gt; {\nreturn item.messages;\n});\n}}\nclassName={clsx(\n`flex items-center space-x-2 mb-4 cursor-pointer   p-2`,\n{\n\"bg-[#2A3942]\":\nselected.conversation_id === item.conversation_id,\n}\n)}\n&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{item.user1.email !== session?.user.email\n? item.user1.nama\n: item.user2.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\n{/* {item.latestMessage?.message} */}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n);\n})}\n&lt;/section&gt;\n&lt;section className=\"col-span-5 h-screen\"&gt;\n&lt;div className=\"h-[60px] w-full bg-[#1F2C33] flex space-x-2 items-center px-3  \"&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{selected?.user1?.email !== session?.user.email\n? selected?.user1?.nama\n: selected?.user2?.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\nonline\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div\nid=\"ticketLists\"\nclassName=\"h-screen-160 text-white flex flex-col-reverse overflow-auto px-5\"\n&gt;\n&lt;InfiniteScroll\nstyle={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\ndataLength={chatList.length} //This is important field to render the next data\nnext={() =&gt; {}}\nclassName=\"flex flex-col-reverse pb-10 space-y-5\"\nhasMore={selected.totalMessages &gt; selected.messages?.length}\nloader={&lt;h4&gt;Loading...&lt;/h4&gt;}\nendMessage={\n&lt;p style={{ textAlign: \"center\" }}&gt;\n&lt;b&gt;Yay! You have seen it all&lt;/b&gt;\n&lt;/p&gt;\n}\ninverse={true}\nscrollableTarget=\"ticketLists\"\n&gt;\n{[...chatList].map((x: ChatMessage, i: number) =&gt; (\n&lt;div\nclassName={clsx(\n\"w-full flex mt-5\", // Memastikan pesan menggunakan lebar penuh\n{\n\"justify-end\": x.sender.id === session?.user.id, // Pesan di sebelah kanan\n\"justify-start\": x.sender.id !== session?.user.id, // Pesan di sebelah kiri\n}\n)}\nkey={i}\n&gt;\n&lt;div\nclassName={clsx(\n\"px-1 py-1 rounded max-w-[75%] break-words\", // Membatasi lebar pesan max 75% dan membiarkan teks membungkus\n{\n\"bg-[#015C4B]\": x.sender.id === session?.user.id, // Warna untuk pesan user sendiri\n\"bg-[#1D282F]\": x.sender.id !== session?.user.id, // Warna untuk pesan orang lain\n}\n)}\n&gt;\n&lt;span className=\"text-sm whitespace-pre-wrap\"&gt;\n{x.message}\n&lt;/span&gt;\n&lt;span className=\"text-[10px] text-right block\"&gt;\n{formatDate(x.created_at)}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n))}\n&lt;/InfiniteScroll&gt;\n&lt;/div&gt;\n&lt;div className=\"h-[100px]  bg-[#1F2C33] w-full p-5 flex items-center space-x-5 \"&gt;\n&lt;div className=\"w-[80%]\"&gt;\n&lt;textarea\nplaceholder=\"ketik pesan\"\nvalue={message}\nonChange={handleMessage}\nclassName=\"bg-gray-200 w-full p-3 rounded-md\"\n/&gt;\n&lt;/div&gt;\n&lt;div className=\"w-[20%] space-x-5\"&gt;\n&lt;button\ndisabled={message.length === 0}\nclassName=\"text-white bg-[#04A784] h-[40px] rounded-lg w-full\"\n&gt;\nKirim\n&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n&lt;/&gt;\n);\n}\nconst formatDate = (timestamp: Date) =&gt; {\nconst date = new Date(timestamp);\nconst formattedDate = date.toLocaleString(\"id-ID\", {\nday: \"2-digit\",\nmonth: \"2-digit\",\nyear: \"numeric\",\nhour: \"2-digit\",\nminute: \"2-digit\",\nsecond: \"2-digit\",\n});\nreturn formattedDate;\n};\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#hasil","title":"Hasil","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#integrasikan-api-list","title":"Integrasikan APi list","text":"admin/chat/lib/index.ts<pre><code>import { useSession } from \"next-auth/react\";\nimport useAxiosAuth from \"@/hook/useAxiosAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nconst useConversation = () =&gt; {\nconst axiosAuthClient = useAxiosAuth();\nconst { data: session } = useSession();\nconst getList = () =&gt; {\nreturn axiosAuthClient.get(\"/chat/list\").then((res) =&gt; res.data);\n};\nconst useGetList = () =&gt; {\nconst { data, isFetching, isLoading, isError } = useQuery(\n[\"/chat/list\"],\n() =&gt; getList(),\n{\nkeepPreviousData: true,\nenabled: !!session === true,\nstaleTime: 6000 * 60 * 60 * 24, // 1 hari\nselect: (response) =&gt; response,\n}\n);\nreturn {\ndata,\nisFetching,\n};\n};\nreturn { useGetList };\n};\nexport default useConversation;\n</code></pre> chat/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nimport useConversation from \"./lib\";\nimport clsx from \"clsx\";\nimport { useSession } from \"next-auth/react\";\nimport useWebSocket from \"@/app/admin/chat/socket/useWebSocket\";\nimport useMessage from \"@/app/admin/chat/socket/useMessage\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ChatMessage, UserChat, UserChatList } from \"./interface\";\nexport default function Chat() {\nconst { data: session } = useSession();\nconst {useGetList}= useConversation()\nconst {data, isFetching} = useGetList()\nconst [chatList, setChatList] = useState&lt;ChatMessage[]&gt;([]);\nconst { message, handleMessage } = useMessage();\nconst [selected, setSelected] = useState&lt;UserChat&gt;({\ntotalMessages: 0,\nmessages: [],\nlimit :0,\npageSize : 10\n});\nif(isFetching){\nreturn &lt;div&gt;Mengambil data chat ...&lt;/div&gt;\n}\nreturn (\n&lt;&gt;\n&lt;div className=\"grid grid-cols-7 h-screen w-full bg-[#0C141A]  \"&gt;\n&lt;section className=\"col-span-2 h-scren pt-10 bg-[#111B21]\"&gt;\n{data &amp;&amp;\ndata.data.map((item: any, index: number) =&gt; {\nreturn (\n&lt;section\nkey={index}\nonClick={() =&gt; {\nsetSelected(item);\nconsole.log(\"item\", item);\nsetChatList(() =&gt; {\nreturn item.messages;\n});\n}}\nclassName={clsx(\n`flex items-center space-x-2 mb-4 cursor-pointer   p-2`,\n{\n\"bg-[#2A3942]\":\nselected.conversation_id === item.conversation_id,\n}\n)}\n&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{item.user1.email !== session?.user.email\n? item.user1.nama\n: item.user2.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\n{/* {item.latestMessage?.message} */}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n);\n})}\n&lt;/section&gt;\n&lt;section className=\"col-span-5 h-screen\"&gt;\n&lt;div className=\"h-[60px] w-full bg-[#1F2C33] flex space-x-2 items-center px-3  \"&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{selected?.user1?.email !== session?.user.email\n? selected?.user1?.nama\n: selected?.user2?.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\nonline\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div\nid=\"ticketLists\"\nclassName=\"h-screen-160 text-white flex flex-col-reverse overflow-auto px-5\"\n&gt;\n&lt;InfiniteScroll\nstyle={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\ndataLength={chatList.length} //This is important field to render the next data\nnext={() =&gt; {}}\nclassName=\"flex flex-col-reverse pb-10 space-y-5\"\nhasMore={selected.totalMessages &gt; selected.messages?.length}\nloader={&lt;h4&gt;Loading...&lt;/h4&gt;}\nendMessage={\n&lt;p style={{ textAlign: \"center\" }}&gt;\n&lt;b&gt;Yay! You have seen it all&lt;/b&gt;\n&lt;/p&gt;\n}\ninverse={true}\nscrollableTarget=\"ticketLists\"\n&gt;\n{[...chatList].map((x: ChatMessage, i: number) =&gt; (\n&lt;div\nclassName={clsx(\n\"w-full flex mt-5\", // Memastikan pesan menggunakan lebar penuh\n{\n\"justify-end\": x.sender.id === session?.user.id, // Pesan di sebelah kanan\n\"justify-start\": x.sender.id !== session?.user.id, // Pesan di sebelah kiri\n}\n)}\nkey={i}\n&gt;\n&lt;div\nclassName={clsx(\n\"px-1 py-1 rounded max-w-[75%] break-words\", // Membatasi lebar pesan max 75% dan membiarkan teks membungkus\n{\n\"bg-[#015C4B]\": x.sender.id === session?.user.id, // Warna untuk pesan user sendiri\n\"bg-[#1D282F]\": x.sender.id !== session?.user.id, // Warna untuk pesan orang lain\n}\n)}\n&gt;\n&lt;span className=\"text-sm whitespace-pre-wrap\"&gt;\n{x.message}\n&lt;/span&gt;\n&lt;span className=\"text-[10px] text-right block\"&gt;\n{formatDate(x.created_at)}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n))}\n&lt;/InfiniteScroll&gt;\n&lt;/div&gt;\n&lt;div className=\"h-[100px]  bg-[#1F2C33] w-full p-5 flex items-center space-x-5 \"&gt;\n&lt;div className=\"w-[80%]\"&gt;\n&lt;textarea\nplaceholder=\"ketik pesan\"\nvalue={message}\nonChange={handleMessage}\nclassName=\"bg-gray-200 w-full p-3 rounded-md\"\n/&gt;\n&lt;/div&gt;\n&lt;div className=\"w-[20%] space-x-5\"&gt;\n&lt;button\ndisabled={message.length === 0}\nclassName=\"text-white bg-[#04A784] h-[40px] rounded-lg w-full\"\n&gt;\nKirim\n&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n&lt;/&gt;\n);\n}\nconst formatDate = (timestamp: Date) =&gt; {\nconst date = new Date(timestamp);\n// Format menjadi tanggal dan jam dalam bahasa Indonesia\nconst formattedDate = date.toLocaleString(\"id-ID\", {\nday: \"2-digit\",\nmonth: \"2-digit\",\nyear: \"numeric\",\nhour: \"2-digit\",\nminute: \"2-digit\",\nsecond: \"2-digit\",\n});\nreturn formattedDate;\n};\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#menghubungkan-ke-socket","title":"Menghubungkan ke socket","text":".env<pre><code>NEXTAUTH_URL=http://localhost:3010\nNEXTAUTH_SECRET=dankanfklgnakgnakn\nNEXT_PUBLIC_API_URL=http://localhost:5002\nNEXT_PUBLIC_SOCKET_URL=http://localhost:5002\nNEXT_PUBLIC_WS_URL=http://localhost:5002/events\n</code></pre> chat/socket/useWebsocket.ts<pre><code>import { useSession } from \"next-auth/react\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nconst useWebSocket = () =&gt; {\nconst { data: session } = useSession();\nconst queryClient = useQueryClient();\n// Menggunakan useMemo untuk menginisialisasi socket hanya sekali\nconst socket = useMemo(\n() =&gt;\nio(`${process.env.NEXT_PUBLIC_API_URL}`, {\nautoConnect: true,\ntransports: [\"websocket\"],\n// query: { token: session?.user?.accessToken },\n}),\n[] // socket hanya diinisialisasi sekali\n);\nuseEffect(() =&gt; {\n// Event listener untuk connect dan disconnect\nconst onConnect = () =&gt; {\nconsole.log(\"socket is connected\");\n};\nconst onDisconnect = () =&gt; {\nconsole.log(\"socket is disconnected\");\n};\nsocket.on(\"connect\", onConnect);\nsocket.on(\"disconnect\", onDisconnect);\nreturn () =&gt; {\nsocket.off(\"connect\", onConnect);\nsocket.off(\"disconnect\", onDisconnect);\n};\n}, [socket]);\nreturn {\nsocket,\n};\n};\nexport default useWebSocket;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#jalankan-websocket-di-layout-pada-fitur-admin","title":"Jalankan WebSocket di layout pada fitur Admin","text":"admin/layout.tsx<pre><code>'use client'\nimport useWebSocket from \"./chat/socket/useWebSocket\";\nimport { ReactNode } from \"react\";\ninterface AdminLayoutProps {\nchildren: ReactNode;\n}\nexport default function AdminLayout({ children }: AdminLayoutProps) {\nconst {socket} = useWebSocket()\nconsole.log('socket', socket)\nreturn &lt;div className=\"bg-blue-2000\"&gt;{children}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#membuat-event-join-room-agar-akun-siap-menerima-pesan","title":"Membuat Event join room agar akun siap menerima pesan","text":"chat/socket/useWebsocket.ts<pre><code> useEffect(() =&gt; {\nconst onConnect = () =&gt; {\nconsole.log(\"socket is connected\");\n};\nconst onDisconnect = () =&gt; {\nconsole.log(\"socket is disconnected\");\n};\nconst onJoinReply = (data: any) =&gt; {\nconsole.log(\"join.reply\", data);\n};\nsocket.on(\"connect\", onConnect);\nsocket.on(\"disconnect\", onDisconnect);\nsocket.on(\"join.reply\", onJoinReply);\nreturn () =&gt; {\nsocket.off(\"connect\", onConnect);\nsocket.off(\"disconnect\", onDisconnect);\nsocket.off(\"join.reply\", onJoinReply);\n};\n}, [socket]);\nuseEffect(() =&gt; {\nif (session?.user?.email) {\nsocket.emit(\"join\", { room_code: session?.user?.email });\n}\n}, [session]);\nreturn {\nsocket,\n};\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#integrasi-api-untuk-mengirimkan-pesan","title":"Integrasi api untuk mengirimkan pesan","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#a","title":"a","text":"chat/lib/index.ts<pre><code>import { useSession } from \"next-auth/react\";\nimport useAxiosAuth from \"@/hook/useAxiosAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nconst useConversation = () =&gt; {\nconst axiosAuthClient = useAxiosAuth();\nconst { data: session } = useSession();\n....\nconst useSendMessage = () =&gt; {\nconst mutate = useMutation((payload: any) =&gt; {\nreturn axiosAuthClient.post(\"/chat/send_message\", payload);\n});\nreturn mutate;\n};\nreturn { useGetList, useSendMessage };\n};\nexport default useConversation;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#v","title":"v","text":"chat/socket/useWebsocket.ts<pre><code>useEffect(() =&gt; {\nconst onConnect = () =&gt; {\nconsole.log(\"socket is connected\");\n};\nconst onDisconnect = () =&gt; {\nconsole.log(\"socket is disconnected\");\n};\nconst onJoinReply = (data: any) =&gt; {\nconsole.log(\"join.reply\", data);\n};\nconst onReceivedMessage = (data: any) =&gt; {\nconsole.log(\"received_message\", data);\n};\nsocket.on(\"connect\", onConnect);\nsocket.on(\"disconnect\", onDisconnect);\nsocket.on(\"join.reply\", onJoinReply);\nsocket.on(\"received_message\", onReceivedMessage);\nreturn () =&gt; {\nsocket.off(\"connect\", onConnect);\nsocket.off(\"disconnect\", onDisconnect);\nsocket.off(\"join.reply\", onJoinReply);\nsocket.off(\"received_message\", onReceivedMessage);\n};\n}, [socket]);\n</code></pre> chat/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nimport useConversation from \"./lib\";\nimport clsx from \"clsx\";\nimport { useSession } from \"next-auth/react\";\nimport useWebSocket from \"@/app/admin/chat/socket/useWebSocket\";\nimport useMessage from \"@/app/admin/chat/socket/useMessage\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ChatMessage, UserChat, UserChatList } from \"./interface\";\nexport default function Chat() {\nconst { data: session } = useSession();\nconst {useGetList, useSendMessage}= useConversation()\nconst {data, isFetching} = useGetList()\nconst [chatList, setChatList] = useState&lt;ChatMessage[]&gt;([]);\nconst { message, handleMessage , setMessage} = useMessage();\nconst [selected, setSelected] = useState&lt;UserChat&gt;({\ntotalMessages: 0,\nmessages: [],\nlimit :0,\npageSize : 10\n});\nconst mutateSendMessage = useSendMessage();\nif(isFetching){\nreturn &lt;div&gt;Mengambil data chat ...&lt;/div&gt;\n}\nreturn (\n&lt;&gt;\n&lt;div className=\"grid grid-cols-7 h-screen w-full bg-[#0C141A]  \"&gt;\n&lt;section className=\"col-span-2 h-scren pt-10 bg-[#111B21]\"&gt;\n{data &amp;&amp;\ndata.data.map((item: any, index: number) =&gt; {\nreturn (\n&lt;section\nkey={index}\nonClick={() =&gt; {\nsetSelected(item);\nconsole.log(\"item\", item);\nsetChatList(() =&gt; {\nreturn item.messages;\n});\n}}\nclassName={clsx(\n`flex items-center space-x-2 mb-4 cursor-pointer   p-2`,\n{\n\"bg-[#2A3942]\":\nselected.conversation_id === item.conversation_id,\n}\n)}\n&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{item.user1.email !== session?.user.email\n? item.user1.nama\n: item.user2.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\n{/* {item.latestMessage?.message} */}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n);\n})}\n&lt;/section&gt;\n&lt;section className=\"col-span-5 h-screen\"&gt;\n&lt;div className=\"h-[60px] w-full bg-[#1F2C33] flex space-x-2 items-center px-3  \"&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{selected?.user1?.email !== session?.user.email\n? selected?.user1?.nama\n: selected?.user2?.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\nonline\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div\nid=\"ticketLists\"\nclassName=\"h-screen-160 text-white flex flex-col-reverse overflow-auto px-5\"\n&gt;\n&lt;InfiniteScroll\nstyle={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\ndataLength={chatList.length} //This is important field to render the next data\nnext={() =&gt; {}}\nclassName=\"flex flex-col-reverse pb-10 space-y-5\"\nhasMore={selected.totalMessages &gt; selected.messages?.length}\nloader={&lt;h4&gt;Loading...&lt;/h4&gt;}\nendMessage={\n&lt;p style={{ textAlign: \"center\" }}&gt;\n&lt;b&gt;Yay! You have seen it all&lt;/b&gt;\n&lt;/p&gt;\n}\ninverse={true}\nscrollableTarget=\"ticketLists\"\n&gt;\n{[...chatList].map((x: ChatMessage, i: number) =&gt; (\n&lt;div\nclassName={clsx(\n\"w-full flex mt-5\", // Memastikan pesan menggunakan lebar penuh\n{\n\"justify-end\": x.sender.id === session?.user.id, // Pesan di sebelah kanan\n\"justify-start\": x.sender.id !== session?.user.id, // Pesan di sebelah kiri\n}\n)}\nkey={i}\n&gt;\n&lt;div\nclassName={clsx(\n\"px-1 py-1 rounded max-w-[75%] break-words\", // Membatasi lebar pesan max 75% dan membiarkan teks membungkus\n{\n\"bg-[#015C4B]\": x.sender.id === session?.user.id, // Warna untuk pesan user sendiri\n\"bg-[#1D282F]\": x.sender.id !== session?.user.id, // Warna untuk pesan orang lain\n}\n)}\n&gt;\n&lt;span className=\"text-sm whitespace-pre-wrap\"&gt;\n{x.message}\n&lt;/span&gt;\n&lt;span className=\"text-[10px] text-right block\"&gt;\n{formatDate(x.created_at)}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n))}\n&lt;/InfiniteScroll&gt;\n&lt;/div&gt;\n&lt;div className=\"h-[100px]  bg-[#1F2C33] w-full p-5 flex items-center space-x-5 \"&gt;\n&lt;div className=\"w-[80%]\"&gt;\n&lt;textarea\nplaceholder=\"ketik pesan\"\nvalue={message}\nonChange={handleMessage}\nclassName=\"bg-gray-200 w-full p-3 rounded-md\"\n/&gt;\n&lt;/div&gt;\n&lt;div className=\"w-[20%] space-x-5\"&gt;\n&lt;button\ndisabled={message.length === 0}\nclassName=\"text-white bg-[#04A784] h-[40px] rounded-lg w-full\"\nonClick={() =&gt; {\nmutateSendMessage.mutate(\n{\nmessage: message,\nroom_receiver:\nselected?.user1?.email !== session?.user.email\n? selected?.user1?.email\n: selected?.user2?.email,\nconversation_id: {\nid: selected?.id,\n},\nfile: \"https:/\",\nreceiver: {\nid:\nselected?.user1?.email !== session?.user.email\n? selected?.user1?.id\n: selected?.user2?.id,\n},\n},\n{\nonSuccess: () =&gt; {\nsetMessage(\"\");\n},\n}\n);\n}}\n&gt;\nKirim\n&lt;/button&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n&lt;/&gt;\n);\n}\n</code></pre> <p>kita telah behasil ...</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#modifiksi-cache-react-query","title":"Modifiksi cache react query","text":"<p>untuk ...</p> chat/socket/useCache<pre><code>import { useQueryClient } from \"@tanstack/react-query\";\nimport { ChatMessage, UserChat, UserChatList } from \"../interface\";\nconst useCache = () =&gt; {\nconst queryClient = useQueryClient();\nconst handleNewMessage = async (data: ChatMessage) =&gt; {\nawait queryClient.cancelQueries([\"/chat/list\"]);\n// Ambil data sebelumnya dari cache\nconst previousConversations = queryClient.getQueryData&lt;UserChatList&gt;([\n\"/chat/list\",\n]);\nif (previousConversations) {\n// Temukan apakah conversation_id sudah ada\nconst existingConversationIndex = previousConversations.data.findIndex(\n(convo: UserChat) =&gt; convo.conversation_id === data.conversation_id.id\n);\nif (existingConversationIndex !== -1) {\n// Update existing conversation\nconst updatedConversations = previousConversations.data.map((convo) =&gt; {\nif (convo.conversation_id === data.conversation_id.id) {\n// Tambahkan pesan baru ke array messages\nconst latest = convo.messages || [];\nconst updatedMessages = [data, ...latest];\nreturn {\n...convo,\nmessages: updatedMessages,\nlatestMessage: data, // Update latestMessage untuk percakapan ini\n};\n}\nreturn convo;\n});\nconsole.log(\"updatedConversations\", updatedConversations);\nconst sortedConversations = updatedConversations.sort((a, b) =&gt; {\nconst latestMessageA = a.latestMessage?.created_at\n? new Date(a.latestMessage.created_at)\n: new Date(0);\nconst latestMessageB = b.latestMessage?.created_at\n? new Date(b.latestMessage.created_at)\n: new Date(0);\nreturn latestMessageB.getTime() - latestMessageA.getTime(); // Urutkan dari yang terbaru\n});\n// Perbarui cache dengan data yang telah diperbarui\nqueryClient.setQueryData([\"/chat/list\"], {\n...previousConversations,\ndata: sortedConversations,\n});\n} else {\n// Jika conversation_id baru, tambahkan ke data\nconst updatedData = [\n{\nid: data.conversation_id.id,\ncreated_at: new Date().toISOString(),\nupdated_at: new Date().toISOString(),\nuser1: {}, // Sesuaikan dengan data yang ada\nuser2: {}, // Sesuaikan dengan data yang ada\nmessages: [data],\nlatestMessage: data,\nconversation_id: data.conversation_id.id,\n},\n...previousConversations.data,\n];\nconst sortedConversations = updatedData.sort((a, b) =&gt; {\nconst latestMessageA = a.latestMessage?.created_at\n? new Date(a.latestMessage.created_at)\n: new Date(0);\nconst latestMessageB = b.latestMessage?.created_at\n? new Date(b.latestMessage.created_at)\n: new Date(0);\nreturn latestMessageB.getTime() - latestMessageA.getTime(); // Urutkan dari yang terbaru\n});\n// Perbarui cache dengan data yang telah diperbarui\nqueryClient.setQueryData([\"/chat/list\"], {\n...previousConversations,\ndata: sortedConversations,\n});\n}\n} else {\n// Jika tidak ada data sebelumnya, set data baru ke cache\nqueryClient.setQueryData([\"/chat/list\"], {\nstatus: \"Success\",\nmessage: \"OK\",\ndata: [\n{\nid: data.conversation_id.id,\ncreated_at: new Date().toISOString(),\nupdated_at: new Date().toISOString(),\nuser1: {}, // Sesuaikan dengan data yang ada\nuser2: {}, // Sesuaikan dengan data yang ada\nmessages: [data],\nlatestMessage: data,\nconversation_id: data.conversation_id.id,\n},\n],\n});\n}\n};\nreturn {handleNewMessage}\n};\nexport default useCache\n</code></pre> chat/socket/useWebsocket<pre><code>...\nimport useCache from \"./useCache\";\nconst useWebSocket = () =&gt; {\nconst { data: session } = useSession();\nconst {handleNewMessage}= useCache()\n....\nuseEffect(() =&gt; {\n...\nconst onReceivedMessage = (data: any) =&gt; {\nconsole.log(\"received_message\", data);\nhandleNewMessage(data);\n};\nsocket.on(\"connect\", onConnect);\nsocket.on(\"disconnect\", onDisconnect);\nsocket.on(\"join.reply\", onJoinReply);\nsocket.on(\"received_message\", onReceivedMessage);\nreturn () =&gt; {\nsocket.off(\"connect\", onConnect);\nsocket.off(\"disconnect\", onDisconnect);\nsocket.off(\"join.reply\", onJoinReply);\nsocket.off(\"received_message\", onReceivedMessage);\n};\n}, [socket]);\n....\n};\nexport default useWebSocket;\n</code></pre> chat/page.tsx<pre><code>  useEffect(() =&gt; {\nif (!!selected === true) {\nlet filtterd = data?.data?.filter(\n(x: UserChat) =&gt; x.conversation_id === selected?.conversation_id\n);\nsetChatList(filtterd?.[0]?.messages || []);\n}\n}, [data]);\n</code></pre> <p> </p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#integrasi-typing","title":"Integrasi Typing","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#instalasi","title":"Instalasi","text":"terminal<pre><code>npm install zustand --save\n</code></pre> <p>Penjelasan ....</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#membuat-store","title":"Membuat Store","text":"store/useStoreChat<pre><code>import { Typing } from \"@/app/admin/chat/interface\";\nimport { create } from \"zustand\";\nimport { Socket } from \"socket.io-client\";\ninterface ChatState {\nsocket: Socket | null;\nsetSocket: (newSocket: Socket) =&gt; void;\ntyping: Typing;\nsetTyping: (newTyping: Typing) =&gt; void;\n}\nconst useStoreChat = create&lt;ChatState&gt;((set) =&gt; ({\nsocket: null,\nsetSocket: (newSocket: Socket) =&gt; {\nset((state) =&gt; ({\n...state,\nsocket: newSocket,\n}));\n},\ntyping: {} as Typing,\nsetTyping: (newTyping: Typing) =&gt; {\nset((state) =&gt; ({\n...state,\ntyping: newTyping,\n}));\n},\n}));\nexport default useStoreChat;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#meyimpan-socket-ke-dalam-store","title":"Meyimpan socket ke dalam store","text":"admin/chat/layout.ts<pre><code>\"use client\";\nimport useStoreChat from \"@/store/useStoreChat\";\nimport useWebSocket from \"./chat/socket/useWebSocket\";\nimport { useEffect, ReactNode } from \"react\";\ninterface AdminLayoutProps {\nchildren: ReactNode; \n}\nexport default function AdminLayout({ children }: AdminLayoutProps) {\nconst { socket } = useWebSocket();\nconst setSocket = useStoreChat((state) =&gt; state.setSocket);\nuseEffect(() =&gt; {\nsetSocket(socket);\n}, [socket]);\nreturn &lt;div className=\"bg-blue-2000\"&gt;{children}&lt;/div&gt;;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#membuat-function-ketika-typing","title":"Membuat function ketika typing","text":"chat/socket/useEmitSocket.ts<pre><code>import { useSession } from \"next-auth/react\";\nimport useStoreChat from \"@/store/useStoreChat\";\nconst useEmitSocket = () =&gt; {\nconst { data: session } = useSession();\nconst socket = useStoreChat((state:any)=&gt; state.socket)\nconst typingHandle = (receiver: string, is_typing: boolean): void =&gt; {\nsocket.emit(\"typing\", {\nsender: session?.user?.email,\nreceiver: receiver,\nis_typing: is_typing,\n});\n};\nreturn {\ntypingHandle,\n};\n};\nexport default useEmitSocket;\n</code></pre> chat/socket/useWebSocket.ts<pre><code>import { useSession } from \"next-auth/react\";\nimport { useEffect, useMemo } from \"react\";\nimport { io } from \"socket.io-client\";\nimport useCache from \"./useCache\";\nimport useStoreChat from \"@/store/useStoreChat\";\nconst useWebSocket = () =&gt; {\nconst { data: session } = useSession();\nconst { handleNewMessage } = useCache();\nconst setTyping = useStoreChat((state: any) =&gt; state.setTyping);\n...\nuseEffect(() =&gt; {\n...\nconst onTypingListen = (data: any) =&gt; {\nconsole.log(\"typing.listen\", data);\nsetTyping(data);\n};\n...\nsocket.on(\"connect\", onConnect);\nsocket.on(\"disconnect\", onDisconnect);\nsocket.on(\"join.reply\", onJoinReply);\nsocket.on(\"received_message\", onReceivedMessage);\nsocket.on(\"typing.listen\", onTypingListen);\nreturn () =&gt; {\nsocket.off(\"connect\", onConnect);\nsocket.off(\"disconnect\", onDisconnect);\nsocket.off(\"join.reply\", onJoinReply);\nsocket.off(\"received_message\", onReceivedMessage);\nsocket.off(\"typing.listen\", onTypingListen);\n};\n}, [socket]); \n...\nreturn {\nsocket,\n};\n};\nexport default useWebSocket;\n</code></pre> chat/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nimport useConversation from \"./lib\";\nimport clsx from \"clsx\";\nimport { useSession } from \"next-auth/react\";\nimport useWebSocket from \"@/app/admin/chat/socket/useWebSocket\";\nimport useMessage from \"@/app/admin/chat/socket/useMessage\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ChatMessage, UserChat, UserChatList } from \"./interface\";\nimport useEmitSocket from \"./socket/useEmitSocket\";\nimport useStoreChat from \"@/store/useStoreChat\";\nexport default function Chat() {\n... \nconst { typingHandle } = useEmitSocket()\nconst typing = useStoreChat((state:any)=&gt; state.typing)\nif (isFetching) {\nreturn &lt;div&gt;Mengambil data chat ...&lt;/div&gt;;\n}\nreturn (\n&lt;&gt;\n&lt;div className=\"grid grid-cols-7 h-screen w-full bg-[#0C141A]  \"&gt;\n...\n&lt;section className=\"col-span-5 h-screen\"&gt;\n&lt;div className=\"h-[60px] w-full bg-[#1F2C33] flex space-x-2 items-center px-3  \"&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{selected?.user1?.email !== session?.user.email\n? selected?.user1?.nama\n: selected?.user2?.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\n{typing.is_typing === true &amp;&amp; typing.sender === (selected?.user1?.email !== session?.user.email\n? selected?.user1?.email\n: selected?.user2?.email) ? \"sedang mengetik\" : \"online\"}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div\nid=\"ticketLists\"\nclassName=\"h-screen-160 text-white flex flex-col-reverse overflow-auto px-5\"\n&gt;\n&lt;/div&gt;\n&lt;div className=\"h-[100px]  bg-[#1F2C33] w-full p-5 flex items-center space-x-5 \"&gt;\n&lt;div className=\"w-[80%]\"&gt;\n&lt;textarea\nonBlur={() =&gt; {\ntypingHandle(\nselected?.user1?.email !== session?.user.email\n? `${selected?.user1?.email}`\n: `${selected?.user2?.email}`, false\n);\n}}\nonFocus={() =&gt; {\ntypingHandle(\nselected?.user1?.email !== session?.user.email\n? `${selected?.user1?.email}`\n: `${selected?.user2?.email}`, true\n);\n}}\nplaceholder=\"ketik pesan\"\nvalue={message}\nonChange={handleMessage}\nclassName=\"bg-gray-200 w-full p-3 rounded-md\"\n/&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/div&gt;\n&lt;/&gt;\n);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/4.%20Study%20KasusFe%20copy/#ubah-layout","title":"ubah layout","text":"chat/page.tsx<pre><code> &lt;section className=\"col-span-2 h-scren  bg-[#111B21]\"&gt;\n&lt;div className=\"h-[60px] bg-[#1F2C33] px-5 w-full flex items-center justify-between\"&gt;\n&lt;h5 className=\"text-white\"&gt;{session?.user?.name}&lt;/h5&gt;\n&lt;button className=\"text-white p-1 border rounded-md\"&gt;+&lt;/button&gt;\n&lt;/div&gt;\n&lt;div className=\"h-screen-60 overflow-auto\"&gt;\n{data &amp;&amp;\ndata.data.map((item: any, index: number) =&gt; {\nreturn (\n&lt;section\nkey={index}\nonClick={() =&gt; {\nsetSelected(item);\nconsole.log(\"item\", item);\nsetChatList(() =&gt; {\nreturn item.messages;\n});\n}}\nclassName={clsx(\n`flex items-center space-x-2 mb-4 cursor-pointer   p-2`,\n{\n\"bg-[#2A3942]\":\nselected.conversation_id === item.conversation_id,\n}\n)}\n&gt;\n&lt;div className=\"bg-red-400 h-10 w-10 rounded-full\"&gt;&lt;/div&gt;\n&lt;div className=\"text-white flex flex-col\"&gt;\n&lt;span&gt;\n{item.user1.email !== session?.user.email\n? item.user1.nama\n: item.user2.nama}\n&lt;/span&gt;\n&lt;span className=\"text-xs text-[#6E7D87]\"&gt;\n{/* {item.latestMessage?.message} */}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n);\n})}\n&lt;/div&gt;\n&lt;/section&gt;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/5.%20Fitur%20lain/","title":"5. Fitur lain","text":""},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/5.%20Fitur%20lain/#membuat-service-untuk-get-previos-chat-be","title":"Membuat Service untuk get previos chat BE","text":"chat.dto.ts<pre><code>export class PreviosMessageDto  {\n@IsInt()\n@Type(() =&gt; Number)\nconversation_id: number;\n@IsInt()\n@Type(() =&gt; Number)\npageSize :  number;\n@IsInt()\n@IsOptional()\nlimit : number\n}\n</code></pre> chat.controller.ts<pre><code>@Post('previos-message')\nasync previosMessage(@Body() payload: PreviosMessageDto) {\nreturn this.chat.getPreviosMessage(payload);\n}\n</code></pre> chat.service.ts<pre><code>async getPreviosMessage(\npayload: PreviosMessageDto,\n): Promise&lt;ResponsePreviosMessage&gt; {\nconst previosMessage = await this.messageRepository.find({\nrelations: ['sender', 'receiver'],\nselect: {\nsender: { id: true },\nreceiver: { id: true },\n},\nwhere: {\nconversation_id: {\nid: payload.conversation_id,\n},\n},\nskip: payload.limit,\ntake: payload.pageSize,\norder: {\nid: 'DESC',\n},\n});\nreturn this._prevMessage('OK', payload.conversation_id, previosMessage);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/5.%20Fitur%20lain/#interasi-fe","title":"Interasi FE","text":"chat/interface/index.ts<pre><code>export interface PreviosMessage {\nconversation_id : number,\nlimit:number,\npageSize:number\n}\n</code></pre> chat/lib/index.ts<pre><code>import { useSession } from \"next-auth/react\";\nimport useAxiosAuth from \"@/hook/useAxiosAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { PreviosMessage } from \"../interface\";\nimport useCache from \"../socket/useCache\";\nconst useConversation = () =&gt; {\nconst axiosAuthClient = useAxiosAuth();\nconst { data: session } = useSession();\nconst {handleAddPreMessage} = useCache()\n...\nconst usePreviosMessage = () =&gt; {\nconst mutate = useMutation((payload: PreviosMessage) =&gt; {\nconsole.log('gpatkan tiket baru', payload)\nreturn axiosAuthClient.post(\"/chat/previos-message\", payload);\n}, {\nonSuccess : (data)=&gt; {\nconsole.log('previos', data)\n}\n});\nreturn mutate;\n};\nreturn { useGetList, useSendMessage, usePreviosMessage };\n};\nexport default useConversation;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/5.%20Fitur%20lain/#merubah-pagets","title":"Merubah page.ts","text":"chat/page.ts<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nimport useConversation from \"./lib\";\nimport clsx from \"clsx\";\nimport { useSession } from \"next-auth/react\";\nimport useWebSocket from \"@/app/admin/chat/socket/useWebSocket\";\nimport useMessage from \"@/app/admin/chat/socket/useMessage\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport { ChatMessage, UserChat, UserChatList } from \"./interface\";\nimport useEmitSocket from \"./socket/useEmitSocket\";\nimport useStoreChat from \"@/store/useStoreChat\";\nexport default function Chat() {\nconst { data: session } = useSession();\nconst { useGetList, useSendMessage, usePreviosMessage } = useConversation();\n...\nconst [selected, setSelected] = useState&lt;UserChat&gt;({\ntotalMessages: 0,\nmessages: [],\nlimit :1,\npageSize : 10,\nconversation_id : 0\n});\n...\nconst mutatePreviosMessage = usePreviosMessage();\n...\nreturn (\n&lt;&gt;\n&lt;div\nid=\"ticketLists\"\nclassName=\"h-screen-160 text-white flex flex-col-reverse overflow-auto px-5\"\n&gt;\n&lt;InfiniteScroll\nstyle={{ overflowX: \"hidden\", overflowY: \"hidden\" }}\ndataLength={chatList.length} //This is important field to render the next data\nnext={ () =&gt; {\nmutatePreviosMessage.mutate({\nconversation_id : selected?.conversation_id|| 0,\nlimit : chatList.length,\npageSize : 10\n});\n}}\nclassName=\"flex flex-col-reverse pb-40 space-y-5\"\nhasMore={selected.totalMessages  &gt; selected.messages?.length}\nloader={mutatePreviosMessage.isLoading ? &lt;p&gt;Loding&lt;/p&gt; : null}\nendMessage={\n&lt;p style={{ textAlign: \"center\" }}&gt;\n&lt;b&gt;Yay! You have seen it all&lt;/b&gt;\n&lt;/p&gt;\n}\ninverse={true}\nscrollableTarget=\"ticketLists\"\n&gt;\n{[...chatList].map((x: ChatMessage, i: number) =&gt; (\n&lt;div\nclassName={clsx(\n\"w-full flex mt-5\", // Memastikan pesan menggunakan lebar penuh\n{\n\"justify-end\": x.sender.id === session?.user.id, // Pesan di sebelah kanan\n\"justify-start\": x.sender.id !== session?.user.id, // Pesan di sebelah kiri\n}\n)}\nkey={i}\n&gt;\n&lt;div\nclassName={clsx(\n\"px-1 py-1 rounded max-w-[75%] break-words\", // Membatasi lebar pesan max 75% dan membiarkan teks membungkus\n{\n\"bg-[#015C4B]\": x.sender.id === session?.user.id, // Warna untuk pesan user sendiri\n\"bg-[#1D282F]\": x.sender.id !== session?.user.id, // Warna untuk pesan orang lain\n}\n)}\n&gt;\n&lt;span className=\"text-sm whitespace-pre-wrap\"&gt;\n{x.message}\n&lt;/span&gt;\n&lt;span className=\"text-[10px] text-right block\"&gt;\n{formatDate(x.created_at)}\n&lt;/span&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n))}\n&lt;/InfiniteScroll&gt;\n&lt;/div&gt;\n&lt;/&gt;\n);\n}\n</code></pre> <p>ketikka kita scroll kita telah barhasil ...</p>"},{"location":"2.%20NestJS%20-%20Backend/11.%20WebSocket/5.%20Fitur%20lain/#memperbahrui-cache-list-message","title":"Memperbahrui cache list message","text":"chat/socket/useCache.ts<pre><code>import { useQueryClient } from \"@tanstack/react-query\";\nimport { ChatMessage, Typing, UserChat, UserChatList } from \"../interface\";\nconst useCache = () =&gt; {\nconst queryClient = useQueryClient();\n...\nconst handleAddPreMessage = async (data: any) =&gt; {\nawait queryClient.cancelQueries([\"/chat/list\"]);\nconsole.log(\"data pre mess\", data);\n// Ambil data sebelumnya dari cache\nconst previousConversations = queryClient.getQueryData&lt;UserChatList&gt;([\n\"/chat/list\",\n]);\nif (previousConversations) {\n// Temukan apakah conversation_id sudah ada\nconst existingConversationIndex = previousConversations.data.findIndex(\n(convo: UserChat) =&gt; convo.conversation_id === data.conversation_id\n);\nif (existingConversationIndex !== -1) {\n// Update existing conversation\nconst updatedConversations = previousConversations.data.map((convo) =&gt; {\nconsole.log('onvo.conversation_id', convo.conversation_id)\nif (convo.conversation_id === data.conversation_id) {\n// Tambahkan pesan baru ke array messages\nconst latest = convo.messages || [];\nconst updatedMessages = [...latest, ...data.data\n];\nreturn {\n...convo,\nmessages: updatedMessages,\n};\n}\nreturn convo;\n});\nconsole.log(\"updatedConversations\", updatedConversations);\nconst sortedConversations = updatedConversations.sort((a, b) =&gt; {\nconst latestMessageA = a.latestMessage?.created_at\n? new Date(a.latestMessage.created_at)\n: new Date(0);\nconst latestMessageB = b.latestMessage?.created_at\n? new Date(b.latestMessage.created_at)\n: new Date(0);\nreturn latestMessageB.getTime() - latestMessageA.getTime(); // Urutkan dari yang terbaru\n});\n// Perbarui cache dengan data yang telah diperbarui\nqueryClient.setQueryData([\"/chat/list\"], {\n...previousConversations,\ndata: sortedConversations,\n});\n}\n} else {\n// Jika tidak ada data sebelumnya, set data baru ke cache\nqueryClient.setQueryData([\"/chat/list\"], {\nstatus: \"Success\",\nmessage: \"OK\",\ndata: [\n{\nid: data.conversation_id.id,\ncreated_at: new Date().toISOString(),\nupdated_at: new Date().toISOString(),\nuser1: {}, // Sesuaikan dengan data yang ada\nuser2: {}, // Sesuaikan dengan data yang ada\nmessages: [data],\nlatestMessage: data,\nconversation_id: data.conversation_id.id,\n},\n],\n});\n}\n};\nreturn { handleNewMessage, handleAddPreMessage };\n};\nexport default useCache;\n</code></pre> chat/lib/index.ts<pre><code>import { useSession } from \"next-auth/react\";\nimport useAxiosAuth from \"@/hook/useAxiosAuth\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { PreviosMessage } from \"../interface\";\nimport useCache from \"../socket/useCache\";\nconst useConversation = () =&gt; {\n...\nconst {handleAddPreMessage} = useCache()\n...\nconst usePreviosMessage = () =&gt; {\nconst mutate = useMutation((payload: PreviosMessage) =&gt; {\nconsole.log('gpatkan tiket baru', payload)\nreturn axiosAuthClient.post(\"/chat/previos-message\", payload);\n}, {\nonSuccess : (data)=&gt; {\nhandleAddPreMessage(data.data)\n}\n});\nreturn mutate;\n};\nreturn { useGetList, useSendMessage, usePreviosMessage };\n};\nexport default useConversation;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/","title":"A. NestJs Module","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#1-apa-itu-module","title":"1. Apa itu Module?","text":"<ul> <li>Module merupakan sebuah class yang digunakan untuk mengelompokan fitur yang sama</li> <li>Nest JS wajib memiliki minimal satu module, setidaknya root module</li> <li>Setiap module diletakan pada sebuah folder agar struktur project menjadi rapih</li> <li>module merupakan singleton artinya instance dari object adalah satu namun bisa digunakan berkali-kali</li> </ul> <p>Module pada NestJS dibuat menggunakan decorator <code>@Module()</code> pada class, docorator <code>@Module()</code> bertugas untuk memberikan metadata pada module yang digunakan oleh NestJS untuk mengorganisasi project.</p> <p>app.module.ts</p> app.module.ts<pre><code>@Module({\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#2-property-pada-module","title":"2. Property pada Module","text":"Property Deskripsi providers Kumpulan provider yang akan dibuat oleh NestJS injector yang bisa dishare diseluruh module controllers Kumpulan contoller yang akan digunakan pada modul imports Daftar module yang ingin kita gunakan fiturnya dari module lain, dengan syarat module/service/fitur nya harus sudah di export di module asal exports Kumpulan provider/fitur/service yang akan di export. Fitur ini nantinya akan di import module lain"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#3-bagaimana-module-di-nestjs","title":"3. Bagaimana Module di NestJS?","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#nestjs-default-module","title":"NestJS Default Module","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#shared-module","title":"Shared Module","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/1.%20module/#4-latihan-membuat-module","title":"4. Latihan Membuat Module","text":"<p>Pada latihan kali ini, kita akan membuat module menggunakan nest cli</p> terminal<pre><code>npx nest g module latihan\n</code></pre> <p>Jika berhasil maka akan muncul message seperti di bawah</p> terminal<pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g module latihan\nCREATE src/latihan/latihan.module.ts (84 bytes)\nUPDATE src/app.module.ts (320 bytes)\n</code></pre> <p>pada saat kita membuat module menggunakan Nest CLI, maka module akan otomatis terimport ke dalam Root App Module</p> app.module.ts<pre><code>import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { LatihanModule } from \"./latihan/latihan.module\"; // otomatis terimport kesini\n@Module({\nimports: [LatihanModule], // Secara otomatis akan\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre> <p>Kemudian kita akan melihat folder latihan dan latihan.module.ts seperti gambar berikut</p> <p></p> <p>Kemudian ketika kita membuka file module latihan.module.ts</p> latihan.module.ts<pre><code>import { Module } from \"@nestjs/common\";\n@Module({})\nexport class LatihanModule {}\n</code></pre> <p>Sampai tahap ini kita sudah berhasil membuat module dengan nest cli, Selanjutnya silahkan latihan membuat module.</p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/","title":"B. NestJs Controller","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#1-apa-itu-controller","title":"1. Apa itu Controller?","text":"<ul> <li>Controller bertugas untuk menerima request dari client dan memberikan response ke cliet</li> <li>Setiap controller bertugas untuk menerima data dari endpoint tertentu, seperti \"/latihan\" dengan method tertentu sepert GET, POST, PATCH, PUT, dan DELETE</li> <li>Controller akan menggunakan provider yang telah didaftarkan pada module</li> <li>Pada NestJS controller diberikan decorator <code>@Controller()</code> pada class</li> <li>Parameter yang di isi pada decorator <code>@Controller()</code> adalah string base path dari controller tersebut</li> <li>Controller dapat dibuat dengan cara manual atau menggunakan Nest CLI</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#2-bagaimana-cara-kerja-controller","title":"2. Bagaimana cara kerja Controller","text":"<p>Ketika kita mengguanakn NestJS untuk aplikasi yang kita buat, secara default kita kan menggunakan service pattern seperti gambar di bawah</p> <p></p> <p>atau dapat juga menggunakan service pattern</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#3-latihan-membuat-controller","title":"3. Latihan membuat controller","text":"<p>Pada latihan kali ini kita akan membuat controller dan mempelajari basic-basic yang controller</p> terminal<pre><code>npx nest g controller latihan\n</code></pre> <p>Jika berhasil kita akan melihat pesan seperti di bawah</p> terminal<pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g controller latihan\nCREATE src/latihan/latihan.controller.spec.ts (499 bytes)\nCREATE src/latihan/latihan.controller.ts (103 bytes)\nUPDATE src/latihan/latihan.module.ts (178 bytes)\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs %\n</code></pre> <p></p> <p>Dari pesan tersebut kita melihat nest cli sudah membuat file baru dengan nama latihan.controller.ts</p> latihan.controller.ts<pre><code>import { Controller } from \"@nestjs/common\";\n@Controller(\"latihan\")\nexport class LatihanController {}\n</code></pre> <p>kemudian secara otomatis controller juga terimport otomatis pada file latihan.module.ts</p> latihan.module.ts<pre><code>import { Module } from \"@nestjs/common\";\nimport { LatihanController } from \"./latihan.controller\"; //disini\n@Module({\ncontrollers: [LatihanController], // disini\n})\nexport class LatihanModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/2.%20controller/#4-membuat-routing-pada-controller","title":"4. Membuat Routing pada controller","text":"<p>Selanjutnya kita akan membuat routing sederhana pada controller, dan kita akan menggunakan <code>postman</code> sebagai aplikasi pengujian routing yang kita buat</p> <p>Method GET</p> latihan.controller.ts<pre><code>import { Controller, Get } from \"@nestjs/common\"; //import Get\n@Controller(\"latihan\") // base url\nexport class LatihanController {\n@Get()\nfindAll() {\nreturn {\nmethod: 'GET',\n};\n}\n}\n</code></pre> <p></p> <p>Method GET dengan parameter id</p> latihan.controller.ts<pre><code>import { Controller, Get, Param } from '@nestjs/common'; //import Get\n@Controller('latihan') // base url\nexport class LatihanController {\n@Get()\nfindAll() {\nreturn {\nmethod: 'GET',\n};\n}\n@Get('detail/:id')\nfindById(@Param('id') id: string) {\nreturn {\nmethod: 'GET',\nparam: {\nid: id,\n},\n};\n}\n}\n</code></pre> <p></p> <p>Method POST</p> latihan.controller.ts<pre><code>import { Body, Controller, Get, Param, Post } from '@nestjs/common'; //import Post\ninterface payloadDto {\nname: string;\nage: number;\n}\n@Controller('latihan') // base url\nexport class LatihanController {\n@Get()\nfindAll() {\nreturn {\nmethod: 'GET',\n};\n}\n@Get('detail/:id')\nfindById(@Param('id') id: string) {\nreturn {\nmethod: 'GET',\nparam: {\nid: id,\n},\n};\n}\n@Post('/create')\ncreate(@Body() payload: payloadDto) {\nconst { name, age } = payload;\nreturn {\nmethod: 'POST',\nbody: {\nname: name,\nage: age,\n},\n};\n}\n}\n</code></pre> <p></p> <p>Method PUT</p> latihan.controller.ts<pre><code>...\n@Put('/update/:id')\nupdate(@Param('id') id: string, @Body() payload: payloadDto) {\nreturn {\nmethod: 'PUT',\nparam: {\nid: id,\n},\nbody: payload,\n};\n}\n</code></pre> <p></p> <p>Method DELETE latihan.controller.ts<pre><code>...\n@Delete('delete/:id')\ndelete(@Param('id') id: string) {\nreturn {\nmethod: 'DELETE',\nparam: {\nid: id,\n},\n};\n}\n</code></pre></p> <p></p> <p>Method GET dengan query string latihan.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\n} from '@nestjs/common';\n...\ninterface QueryLatihanDto {\nname?: string;\nage_start?: number;\nage_end?: number;\n}\n@Controller('latihan') // base url\nexport class LatihanController {\n@Get()\nfindAll(@Query() query: QueryLatihanDto) {\nreturn {\nmethod: 'GET',\nquery: query,\n};\n}\n...\n}\n</code></pre></p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/3.%20provider/","title":"C. NestJs Provider","text":""},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/3.%20provider/#1-apa-itu-provider","title":"1. Apa itu Provider?","text":"<ul> <li>Provider digunakan sebagai service, repository, factory, helper, dan lain-lain</li> <li>NestJS akan meng-inject provider ke module yang menggunakan provider tersebut Depedency Injection sehingga provider dapat digunakan oleh seluruh module</li> <li>Pada NestJS provider diberikan decorator <code>@Injactable()</code> pada class</li> </ul> <p>app.service.tsx</p> latihan.service.ts<pre><code>import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class AppService {\ngetHello(): string {\nreturn 'Hello World!';\n}\n}\n</code></pre> app.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { LatihanModule } from './latihan/latihan.module';\n@Module({\nimports: [LatihanModule],\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/3.%20provider/#2-latihan-membuat-provider","title":"2. Latihan membuat Provider","text":"<p>Pada latihan kali ini kita akan membuat provider yaitu service. Service adalah class yang digunakan untuk menaruh logic - logic yang di panggil oleh controller maupun service lain.</p> <p></p> <p>Seperti contoh gambar di atas dimana service akan menghubungkan antara contoller dengan model dan database, sehingga pada service kita bisa membuat logic untuk menyimpan data , menghapus data, mengupdate data dan menampilkan data</p> <p>untuk membuat service di nestjs kita bisa menggukakan nest cli seperti berikut</p> terminal<pre><code>npx nest g service latihan\n</code></pre> <p>Jika berhasil maka kita akan mendapatkan pesan seperti di bawah terminal\u00e5<pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g service latihan           \nCREATE src/latihan/latihan.service.spec.ts (467 bytes)\nCREATE src/latihan/latihan.service.ts (91 bytes)\nUPDATE src/latihan/latihan.module.ts (262 bytes)\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs %\n</code></pre></p> <p></p> <p>Dari pesan tersebut kita melihat nest cli sudah membuat file baru dengan nama latihan.service.ts</p> latihan.service.ts<pre><code>import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class LatihanService {}\n</code></pre> <p>kemudian secara otomatis controller juga terimport otomatis pada file latihan.module.ts</p> latihan.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { LatihanController } from './latihan.controller';\nimport { LatihanService } from './latihan.service';\n@Module({\ncontrollers: [LatihanController],\nproviders: [LatihanService],\n})\nexport class LatihanModule {}\n</code></pre> <p>Selanjutkan kita akan latihan untuk membuat service yang akan di panggil di controller. Pertama kita akan buat service dengan nama getLatihan pada latihan.service.ts seperti berikut</p> latihan.service.ts<pre><code>import { Injectable } from '@nestjs/common';\n@Injectable()\nexport class LatihanService {\ngetLatihan(): string {\nreturn 'latihan';\n}\n}\n</code></pre> <p>Kemudian service tersebut kita akan panggil pada controller dengan mengguankan <code>Dependency injection</code></p> <p><code>constructor(private latihanService: LatihanService) {}</code></p> <p>sehingga seperti code di bawah</p> latihan.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\n} from '@nestjs/common'; //import Get\nimport { LatihanService } from './latihan.service';\ninterface payloadDto {\nname: string;\nage: number;\n}\ninterface QueryLatihanDto {\nname?: string;\nage_start?: number;\nage_end?: number;\n}\n@Controller('latihan') // base url\nexport class LatihanController {\nconstructor(private latihanService: LatihanService) {}\n@Get('/list')\ngetLatihan() {\nreturn this.latihanService.getLatihan(); // arti kode ini ketika routing di panggil maka function getLatihan pada controll akan memanggil service getLatihan \n}\n...\n}\n</code></pre> <p>Kemudian kita tes di postman sebagai berikut</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/3.%20Fundamental/4.%20middleware/","title":"D. NestJS Middleware","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/","title":"A. Membuat REST API","text":"<p>Pada Materi ini kita akan berlatih untuk membuat rest api dengan database sementara berupa array. Setelah latihan ini diharapkan peserta didik dapat lebih memahami workflow ketika membuat endponint rest api dari NestJs.</p> <p>Kita akan berlatih untuk membuat rest api yang bertujuan untuk menambah data , menghapus data, mengupdate data, dan menampilkan data. Adapun studi kasus kita adalah menambah, menghapus, mengupdate dan menampilkan buku.</p> <p>Adapun tipe data untuk array books adalah seperti berikut</p> <pre><code>const books = {\nid : number,\ntitile : string,\nauthor : string,\nyear : number\n}[]\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#1-membuat-module-service-dan-controller-book","title":"1. Membuat Module, Service dan Controller Book","text":"<pre><code>ihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g mo book\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g service  book\nihsanabuhanifah@ihsanabuhanifah-MacBook-Pro backend-nestjs % npx nest g controller  book\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#2-membuat-property-book-pada-service-dan-membuat-service-getallbook","title":"2. Membuat property book pada Service dan membuat service getAllBook","text":"<p>book.service.ts</p> <pre><code>import { Injectable } from \"@nestjs/common\";\n@Injectable()\nexport class BookService {\nprivate books: {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] = [\n{\nid: 1,\ntitile: \"HTML CSS\",\nauthor: \"ihsanabuhanifah\",\nyear: 2023,\n},\n];\ngetAllBooks(): {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] {\nreturn this.books;\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#3-inject-service-ke-dalam-controller-dan-membuat-routing-get","title":"3. Inject Service ke dalam Controller dan membuat routing Get","text":"<p>book.controller.ts</p> <pre><code>import { Controller, Get } from \"@nestjs/common\";\nimport { BookService } from \"./book.service\";\n@Controller(\"book\")\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get(\"/list\")\nfindAllBook() {\nreturn this.bookService.getAllBooks();\n}\n}\n</code></pre> <p>Selanjutkan kita akan uji pada postman untuk menampilkan seluruh buku pada array books</p> <p> </p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#4-membuat-api-create-book","title":"4. Membuat api create book","text":"<p>book.service.ts</p> <pre><code>...\ncreateBook(\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\n...\n</code></pre> <p>book.controller.ts</p> <pre><code>...\n@Post('/create')\ncreateBook(\n@Body('title') title: string,\n@Body('author') author: string,\n@Body('year') year: number,\n) {\nreturn this.bookService.createBook(title, author, year);\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#pengujian-ketika-create","title":"Pengujian ketika create","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#pengujian-ketika-get","title":"Pengujian ketika get","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#5-membuat-api-get-detail-by-id","title":"5. Membuat api get detail by id","text":"<p>book.service.ts</p> <pre><code> findBookById(id: number): number {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nif (bookIndex === -1) {\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\n}\nreturn bookIndex;\n}\ngetDetail(id: number): {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n} {\nconst bookIndex = this.findBookById(id);\nconst book = this.books[bookIndex];\nreturn book;\n}\n</code></pre> <p>pada koding di atas, kita membaut method findBookById sebagai method yang akan di panggil pada method lain yang bertujuan untuk mencari index ke berapa berdasarkan id buku</p> <p>book.controller.ts</p> <pre><code>...\n@Get('detail/:id')\nfindOneBook(@Param('id') id: string) {\nreturn this.bookService.getDetail(Number(id));\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#pengujian-detail-by-id","title":"Pengujian detail by Id","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#membuat-api-update-buku","title":"Membuat api update buku","text":"<p>book.service.ts</p> <pre><code>...\nupdateBook(\nid: number,\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nthis.books[bookIndex].title = title;\nthis.books[bookIndex].author = author;\nthis.books[bookIndex].year = year;\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil update buku',\n};\n}\n...\n</code></pre> <p>book.controller.ts</p> <pre><code>...\n@Put('update/:id')\nupdateBook(\n@Param('id') id: string,\n@Body('title') title: string,\n@Body('author') author: string,\n@Body('year') year: number,\n) {\nreturn this.bookService.updateBook(Number(id), title, author, year);\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#pengujian-update-buku","title":"Pengujian update buku","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#7-menghapus-api-delete-buku","title":"7. Menghapus api delete buku","text":"<p>book.service.ts</p> <p><pre><code>...\ndeleteBook(id: number): {\nstatus: string;\nmessage: string;\n} {\nconst bookIndex = this.findBookById(id);\nthis.books.splice(bookIndex, 1);\nreturn {\nstatus: `Success ${bookIndex}`,\nmessage: 'Berhasil menghapus buku',\n};\n}\n...\n</code></pre> book.controller.ts</p> <pre><code>...\n@Delete('delete/:id')\ndeleteBook(@Param('id') id: string) {\nreturn this.bookService.deleteBook(+id);\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/1.%20membuat_api/#pengujian-delete-buku","title":"Pengujian delete buku","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/","title":"B. DTO dan Response Type","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#1-membuat-response-type","title":"1. Membuat Response Type","text":"<p>Pada materi kali ini, kita akan membuat response type agar response dari rest api yang kita bikin standar dan menjaga agar tetap konsisten di semua response pada api.</p> <pre><code>createBook(\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\nupdateBook(\nid: number,\ntitle: string,\nauthor: string,\nyear: number,\n): {\nstatus: string;\nmessage: string;\n} {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nthis.books[bookIndex].title = title;\nthis.books[bookIndex].author = author;\nthis.books[bookIndex].year = year;\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil update buku',\n};\n}\n</code></pre> <p>Perhatikan pada koding di atas, kita sudah menjaga agar response nya tetap konsisten, yaitu pada return harus sebuah object yang memiliki property status dan message. Namun kita lihat pada tiap service kita harus mendefiniskan kembali type data response nya. Tentu hal ini tidak efektif karena kita harus membuatnya berkali-kali.</p> <p>Untuk membuat efektif kode kita maka kita harus membuat type/interface response , sehingga kita cukup memanggil pada setiap service.</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#membuat-interface-responsesuccess","title":"Membuat Interface ResponseSuccess","text":"<p>Pertama , bualah folder baru dengan nama interface seperti gambar berikut</p> <p></p> <p>Kedua, buatlah folder response dalam folder interface yang didalamnya terdapat file <code>index.ts</code> dan <code>response.interface.ts</code></p> <p>response.inteface.ts</p> <pre><code>export interface ResponseSuccess {\nstatus: string;\nmessage: string;\ndata?: any;\n}\n</code></pre> <p>index.ts</p> <pre><code>export * from \"./response.interface\";\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#impelementasi-response-success-pada-service","title":"Impelementasi Response Success pada Service","text":"<p>Pada contoh di atas kita membuat bahwa setiap <code>response success</code> harus memiliki property status dan message , kemudian untuk data bersifat optional dengan tipe data any.</p> <p>Kemudian kita akan mencoba bagaimana mengimplementasikannya pada <code>book.service.ts</code></p> <pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ResponseSuccess } from 'src/interface/response';\n...\ngetAllBooks(): ResponseSuccess {\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: this.books,\n};\n}\ngetDetail(id: number): ResponseSuccess {\nconst bookIndex = this.findBookById(id);\nconst book = this.books[bookIndex];\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: book,\n};\n}\ncreateBook(title: string, author: string, year: number): ResponseSuccess {\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\nupdateBook(\nid: number,\ntitle: string,\nauthor: string,\nyear: number,\n): ResponseSuccess {\nconst bookIndex = this.books.findIndex((book) =&gt; book.id === id);\nthis.books[bookIndex].title = title;\nthis.books[bookIndex].author = author;\nthis.books[bookIndex].year = year;\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil update buku',\n};\n}\ndeleteBook(id: number): ResponseSuccess {\nconst bookIndex = this.findBookById(id);\nthis.books.splice(bookIndex, 1);\nreturn {\nstatus: `Success ${bookIndex}`,\nmessage: 'Berhasil menghapus buku',\n};\n}\n...\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#2-membuat-dto-data-transfer-object","title":"2. Membuat DTO (Data Transfer Object)","text":"<p>DTO merupakan class yang berisi type data yang bisa digunakan sebagai interface dari data yang dikirim oleh client. Dengan membuat DTO kita bisa mendefinisikan type data yang dikirim oleh client pada contoller dan service. Dengan membuat DTO kita  bisa memastikan bahwa data yang dikirim oleh client sesuai dengan kriteria yang sudah ditentukan.</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#instalasi-nestjsmapped-types","title":"Instalasi @nestjs/mapped-types","text":"<pre><code>npm i --save @nestjs/mapped-types\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#membuat-bookdtots","title":"Membuat book.dto.ts","text":"<pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nexport class BookDto {\nid: number;\ntitle: string;\nauthor: string;\nyear: number;\n}\nexport class CreateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class UpdateBookDto extends OmitType(BookDto, [\"id\"]) {}\n</code></pre> <p>Pada contoh di atas kita membuat BookDto untuk mendefinikasi seluruh property yang ada pada service book. Kemudian kita membuat <code>CreateBookDto</code> dengan mengecualikan id pada property <code>CreateBookDto</code> dengan OmitType. Kalau kita definisikan dengan cara biasa maka akan seperti di bawah.</p> <pre><code>export class CreateBookDto {\ntitle: string;\nauthor: string;\nyear: number;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#implementasikan-dto-pada-controller","title":"Implementasikan DTO pada controller","text":"<p>Pada Bagian ini akan coba implementasikan <code>CreateBookDto</code> pada <code>book.controller.ts</code></p> <p>book.controller.ts</p> <pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto } from './book.dto';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n...\n@Post('/create')\ncreateBook(@Body() payload: CreateBookDto) {\nreturn this.bookService.createBook(payload);\n}\n...\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/2.dto_response/#implementasikan-dto-pada-service","title":"Implementasikan DTO pada service","text":"<p>Pada Bagian ini akan coba implementasikan <code>CreateBookDto</code> pada <code>book.controller.ts</code></p> <p>book.service.ts</p> <pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto } from './book.dto';\n@Injectable()\nexport class BookService {\nprivate books: {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] = [\n{\nid: 1,\ntitle: 'HTML CSS',\nauthor: 'ihsanabuhanifah',\nyear: 2023,\n},\n];\ncreateBook(createBookDto: CreateBookDto): ResponseSuccess {\nconst { title, author, year } = createBookDto;\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\n...\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/","title":"C. Validation","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#1-apa-itu-validation","title":"1. Apa itu Validation?","text":"<p>Validation bertujuan untuk memastikan bahwa data yang dikirimkan atau diterima oleh aplikasi Anda sesuai dengan aturan atau kriteria tertentu sebelum diproses lebih lanjut. Selain itu berikut merupakan tujuan dari Validation</p> <ul> <li> <p><code>Data Integritas</code>: Memastikan bahwa data yang diterima sesuai dengan struktur dan tipe yang diharapkan sehingga tidak menyebabkan kesalahan atau gangguan dalam pemrosesan lebih lanjut.</p> </li> <li> <p><code>Validasi Input</code>: Memvalidasi data masukan dari pengguna atau dari sumber eksternal untuk memastikan bahwa data tersebut sesuai dengan aturan yang ditetapkan. Misalnya, memastikan bahwa sebuah email memiliki format yang benar, atau bahwa nomor telepon hanya berisi angka.</p> </li> <li> <p><code>Keamanan</code>: Menghindari masalah keamanan seperti SQL injection atau penyusupan berdasarkan data yang tidak valid.</p> </li> <li> <p><code>Meningkatkan Pesan Error</code>: Memberikan pesan error yang bermakna dan informatif ketika data tidak valid, sehingga memudahkan pengguna untuk memperbaikinya.</p> </li> <li> <p><code>Dokumentasi</code>: Dengan menggunakan class validator, Anda dapat mendokumentasikan aturan validasi secara eksplisit di level DTO, yang dapat membantu pengembang lain untuk memahami kebutuhan data dan aturan validasi yang berlaku.</p> </li> <li> <p><code>Mengurangi Kesalahan</code>: Dengan melakukan validasi sejak awal, Anda dapat mengidentifikasi dan menangani kesalahan lebih cepat dan lebih mudah sebelum data digunakan dalam proses bisnis yang lebih kompleks.</p> </li> </ul> <p>Ada bebrapa cara yang bisa dilakukan untuk melakukan validasi di NestJS, namun pada materi klai ini kita akan bahas dengan mengguankan class validator.</p> <p>Dokumentasi resmi : <code>https://docs.nestjs.com/pipes</code></p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#instalasi-class-validator-class-transformer","title":"Instalasi class-validator class-transformer","text":"<p>Pertama kita akan instalasi package yang dibutuhkan untuk menggunakan validasi.</p> <pre><code>npm install class-validator class-transformer\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#implementasikan-validation-pada-dto","title":"Implementasikan validation pada DTO","text":"<p>Setelah instalasi selesai kita akan tambahkan validaton di DTO</p> <pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nimport { IsInt, IsNotEmpty, Min, Max, Length } from \"class-validator\";\nexport class BookDto {\n  id: number;\n\n  @IsNotEmpty() // title tidak boleh kosong\n  @Length(4, 10) // panjang karakter dari title minimal 4 dan maksimal 10\n  title: string;\n\n  @IsNotEmpty()\n  author: string;\n\n  @IsInt() // year wajib number\n  @Min(2020) // minimal tahun adalah 2020\n  @Max(2023) //maksimal tahun adalah 2023\n  year: number;\n}\n\nexport class CreateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class UpdateBookDto extends OmitType(BookDto, [\"id\"]) {}\n</code></pre> <p>Pada kode di atas adalah contoh impelementasi <code>class-validator</code> padda DTO sehingga kita bisa memastakan data yang dikirim oleh client sesuai dengan kriteria yang sudah di tentuakan. Selain decorator di atas masih banyak lagi decorator yang bisa kita gunakan pada project. Kita dapat membaca dokumentasi resmi nya di</p> <p>https://github.com/typestack/class-validator#installation</p> <p>Namun class Validator tidak akan bekerja sebelum kita implementasikan <code>pipe</code>, pada contoh ini kita akan impelementasikan dulu validation pipe pada scope global. Hal yang harus kita lakukan adalah kita harus menambahkan <code>validationPipe</code> pada <code>main.ts</code>.</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#implementasikan-validation-pada-pipe-global","title":"Implementasikan validation pada pipe global","text":"<p>main.ts</p> <pre><code>import { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\"; //import\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe({ whitelist: true })); //implementasi\n  await app.listen(5002);\n}\nbootstrap();\n</code></pre> <p>Pengujian jika client mengirimkan year lebih dari 2023</p> <p></p> <p>Pengujian jika client mengirimkan panjang title kurang dari 4 karakter</p> <p></p> <p>Pengujian jika client mengirimkan sesuai dengan kriteria</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#2-pipe-scope","title":"2. Pipe Scope","text":"<p>Pada contoh di akan kita sudah mengimpelentasikan pipe global scope artinya validation akan diterapkan pada semua router hendler di controller. Ada beberapa cara dalam mengimpelentasikan pipe</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#global-scoped-pipes","title":"Global scoped pipes","text":"<p>Pipe global Scope bertujuan bahwa setiap validation akan diterapkan pada semua route handler. Jika kita menggunakan pendekatan ini maka implementasinya seperti kode di atas pada main.ts</p> <pre><code>import { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\"; //import\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe({ whitelist: true })); //implementasi\n  await app.listen(5002);\n}\nbootstrap();\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/3.%20validation/#validation-controller","title":"Validation Controller","text":"<p>Pada pendekatan ini , kita hanya mengimpelentasikan validasi pada route tertentu saja. Namun untuk menerapkan ini kita perlu menghapus kode app.useGlobalPipes(new ValidationPipe()); pada main.ts. Selanjutkan kita akan coba implementaskan validation Contoller pada book.controller.ts</p> <p>book.controller.ts</p> <pre><code>import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto, UpdateBookDto } from './book.dto';\n\n...\n\n  @Post('/create')\n  @UsePipes(ValidationPipe)\n  createBook(@Body() payload: CreateBookDto) {\n    return this.bookService.createBook(payload);\n  }\n\n  @Put('update/:id')\n  updateBook(@Param('id') id: string, @Body() updateBookDto: UpdateBookDto) {\n    return this.bookService.updateBook(Number(id), updateBookDto);\n  }\n\n}\n</code></pre> <p>Pengujian pada create yang menggunakan Validation</p> <p></p> <p>Pengujian pada update yang tidak menggunakan Validation</p> <p></p> <p>Pada dua pendekatan di atas, saya lebih merekomendasikan menggunakan global scope agar kita cukup sekali pada main.ts, namun tidak menutup kemungkinana ada case-case yang mengharuskan kita bukan menggunakan global scope.</p>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/4.Latihan/","title":"C. Latihan","text":""},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/4.Latihan/#1-membuat-rest-api","title":"1. Membuat Rest API","text":"<p>Buatlah Rest API <code>list</code>, <code>create</code>, <code>update</code>, <code>delete</code>, <code>detail</code> untuk array user seperti dengan tipe data seperti berikut</p> <pre><code>const users = {\nid : number,\nnama : string,\nemail : string,\numur : number,\ntanggal_lahir : string,\nstatus : string\n}[]\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/4.%20Rest%20API/4.Latihan/#2-tambahkan-responsesuccess-dto-dan-validasi-pada-create-dan-update-users","title":"2. Tambahkan ResponseSuccess, Dto dan Validasi pada create dan update users","text":""},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/","title":"B. TypeORM Basic CRUD","text":"<p>TypeORM merupakan ORM (Object Relational Mapping yang dapat berjalan pada NodeJS). Selain TypeOrm , ORM lain yang bisa digunakan pada nestjs adalah <code>sequelize</code>, <code>prisma</code> , <code>knex</code> dan lain-lain. untuk memulai menggukan TypeORM pada nestjs kita instalasi terlebih dahulu</p> terminal<pre><code>npm install --save @nestjs/typeorm typeorm mysql2\n</code></pre> <p>Kemudian kita akan membuat file baru untuk menyimpan konfigurasi TypeOrm di aplikasi kita</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#0-instalasi-mysql-dan-phpmyadmin","title":"0. Instalasi MYSQL dan PhpMyAdmin","text":"<p>Pada latihan ini kita akan lakukan instalasi mysql dan phpMyAdmin menggunakan docker. buatlah file dengan nama <code>docker-compose.yml</code></p> docker-compose.yml<pre><code>version: \"3.9\"\nservices:\ndb:\nimage: mysql:8.0\ncontainer_name: mysql\nrestart: always\nenvironment:\nMYSQL_ROOT_PASSWORD: root\nMYSQL_PASSWORD: root\nTZ: Asia/Jakarta\nports:\n- 3308:3306\nnetworks:\n- internal_network\nvolumes:\n- ./app/:/user\nphpmyadmin:\nimage: phpmyadmin/phpmyadmin\ncontainer_name: phpmyadmin\nlinks:\n- db\nenvironment:\nPMA_HOST: db\nMYSQL_ROOT_PASSWORD: root\nrestart: always\nports:\n- 8081:80\nnetworks:\n- internal_network\nnetworks:\ninternal_network:\nexternal: true\n</code></pre> <p>Kemudian kita akan buat network pada docker terlebih dahulu</p> terminal<pre><code>docker network create internal_network\n</code></pre> <p>Kemudian kita instalasi mysql dan phpMyAdmin pada docker mengggunakan docker compose</p> terminal<pre><code>docker-compose up\n</code></pre> <p>Tunggu sampai selesai proses instalasi</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#2-global-configuration","title":"2. Global Configuration","text":"<p>ita akan membahas dotenv, dimana file ini digunakan untuk memyimpan konfigurasi pada aplikasi kita. Kalau sebelum nya konfigurasi kita tulis secara hardcode pada koding seperti pada saat membuat konfig typeorm</p> <p>Pertama kita instalasi dulu package untuk config</p> <pre><code>npm i --save @nestjs/config\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#2-import-module-config-pada-app-module","title":"2. Import Module Config pada app module","text":"<p>kita import pada app module sebagai global agar bisa diakses oleh semua module</p> <p>app.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule } from '@nestjs/config';\n@Module({\nimports: [\nConfigModule.forRoot({\nisGlobal: true,  // konfigurasi is global untuk semua module\n}),\n],\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#3-buat-file-env","title":"3.  Buat File .env","text":"<p>buatlah file <code>.env</code></p> .env<pre><code>DB_HOST = localhost // alamat server mysql\nDB_USERNAME = root  // username dari mysql\nDB_PASSWORD = root  // password dari mysq;\nDB_DATABASE = belajar_nest_js // nama database\nDB_PORT = 3308  // port dari mysql\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#1-typeorm-config","title":"1. TypeOrm Config","text":"<p>Buatlah folder config pada folder src , kemudian buatlah file typeorm.config.ts</p> <p></p> typeorm.config.ts<pre><code>import { TypeOrmModuleOptions } from '@nestjs/typeorm';\nimport { Auth } from '../auth-service.entity';\nexport const typeOrmConfig: TypeOrmModuleOptions = {\ntype: 'mysql',\nhost: process.env.DB_HOST,\nport: Number(process.env.DB_PORT), \nusername: process.env.DB_USERNAME, \npassword: process.env.DB_PASSWORD, \ndatabase: process.env.DB_DATABASE,\nentities: [Auth],\nsynchronize: true,\nlogging: true,\n};\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#2-import-typeormconfig-pada-app-module","title":"2. Import TypeOrmConfig pada app module","text":"<p>import module TypeOrm pada app.module.ts agar typeorm bisa digunakan pada aplikasi kita.</p> app.module.ts<pre><code>import { Module } from \"@nestjs/common\";\nimport { AppController } from \"./app.controller\";\nimport { AppService } from \"./app.service\";\nimport { LatihanModule } from \"./latihan/latihan.module\";\nimport { BookModule } from \"./book/book.module\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { typeOrmConfig } from \"./config/typeorm.config\";\nimport { ConfigModule } from '@nestjs/config';\n@Module({\nimports: [ ConfigModule.forRoot({\nisGlobal: true,\n}),\nTypeOrmModule.forRootAsync({\nuseFactory: async () =&gt; {\nconst { typeOrmConfig } = await import('./config/typeorm.config');\nreturn typeOrmConfig;\n},\n}),, LatihanModule, BookModule],\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#3-membuat-book-entity","title":"3. Membuat Book Entity","text":"<p>Kemudian kita akan membuat entity untuk membuat table pada database mysql.</p> <p>Buatlah file dengan nama <code>book.entity.ts</code> pada folder book, seperti berikut</p> <p></p> book.entity.ts<pre><code>import { Entity, BaseEntity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n@Entity()\nexport class Book extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column()\ntitle: string;\n@Column()\nauthor: string;\n@Column()\nyear: number;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\ncreated_at: Date;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\nupdated_at: Date;\n}\n</code></pre> <p>Kemudian kita import entity pada book.module.ts</p> book.module.ts<pre><code>import { Module } from \"@nestjs/common\";\nimport { BookService } from \"./book.service\";\nimport { BookController } from \"./book.controller\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Book } from \"./book.entity\"; //import dari book.entity.ts\n@Module({\nimports: [TypeOrmModule.forFeature([Book])], // import dengan TypeOrm For Feature\nproviders: [BookService],\ncontrollers: [BookController],\n})\nexport class BookModule {}\n</code></pre> <p>Kemudian kita lihat apakah tabel sudah terbuat atau tidak pada database</p> <p></p> <p>Pada gambar tersebut terlihat kalau tabel sudah terbuat secara otomatis pada database. Jika kita mengalami kendala tabel tidak terbuat, silahkan cek kembali langkah-langkah di atas.</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#4-menggunakan-book-entity-pada-bookservice","title":"4. Menggunakan Book Entity pada BookService","text":"<p>Ketika kita sudah menggukana forFeature() pada module, selanjutnya kita akan menginject BookRepository ke dalam BookService dengan menggunakan @InjectRepository() decorator</p> book.service.ts<pre><code>import { Injectable, NotFoundException } from '@nestjs/common';\nimport { ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto, UpdateBookDto } from './book.dto';\nimport { InjectRepository } from '@nestjs/typeorm'; // import injectReposity\nimport { Book } from './book.entity'; // import Book Entiy\nimport { Repository } from 'typeorm'; import //import repository\n@Injectable()\nexport class BookService {\n//inject book repository ke service\nconstructor(\n@InjectRepository(Book) private readonly bookRepository: Repository&lt;Book&gt;,\n) {}\n//inject book repository ke service\nprivate books: {\nid?: number;\ntitle: string;\nauthor: string;\nyear: number;\n}[] = [\n{\nid: 1,\ntitle: 'HTML CSS',\nauthor: 'ihsanabuhanifah',\nyear: 2023,\n},\n];\ngetAllBooks(): ResponseSuccess {\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: this.books,\n};\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#5-membuat-dto-pada-pada-fitur-book","title":"5. Membuat DTO pada pada fitur book","text":"book.dto.ts<pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { Type } from 'class-transformer';\nimport {\nIsArray,\nIsInt,\nIsNotEmpty,\nIsOptional,\nLength,\nValidateNested,\nMin,\nMax,\n} from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nexport class BookDto {\nid: number;\n@IsNotEmpty()\ntitle: string;\n@IsNotEmpty()\nauthor: string;\n@IsInt()\n@Min(2020)\n@Max(2023)\nyear: number;\n}\nexport class CreateBookDto extends OmitType(BookDto, ['id']) {}\nexport class UpdateBookDto extends OmitType(BookDto, ['id']) {}\nexport class createBookArrayDto {\n@IsArray()\n@ValidateNested({ each: true })\n@Type(() =&gt; CreateBookDto)\ndata: CreateBookDto[];\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#6-menambahkan-book-ke-tabel-dengan-typeorm","title":"6. Menambahkan Book ke Tabel dengan TypeOrm","text":"<p>Pada materi ini , kita akan berlatih menambahkan data ke tabel book pada database mengguankan method <code>save()</code> dari TypeOrm</p> <p>Perhatikan method createBook pada bookService, sebelumnya kita menggunakan database semetera pada array book seperti koding di bawah</p> <pre><code>createBook(createBookDto: CreateBookDto): ResponseSuccess {\nconst { title, author, year } = createBookDto;\nthis.books.push({\nid: new Date().getTime(),\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n}\n</code></pre> <p>selanjutnya kita kan ubah tempat menyimpan data ke dalam database dan menampilkannya , maka seperti koding di bawah ini</p> book.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\n...\nasync createBook(createBookDto: CreateBookDto): Promise&lt;ResponseSuccess&gt; {\nconst { title, author, year } = createBookDto;\ntry {\nawait this.bookRepository.save({\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn {\nstatus: 'Success',\nmessage: 'Berhasil menambakan buku',\n};\n} catch (err) {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n...\n</code></pre> <p>Pada kode diatas, kita ubah method <code>createBook</code> menjadi <code>asynchronous</code> karena saat proses penyimpanan data akan ada jeda waktu menunggu sampai ada response, ntuk menjadikan <code>asyncronous</code> kita cukup memberika keyword async.</p> <p>Selanjutnya kita bikin kondisi jika penyimpanan gagal maka akan menampilkan pesan kesalahan \"Ada Kesalahan\" dengan kode 400.</p> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto} from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Post('/create')\ncreateBook(@Body() payload: CreateBookDto) {\nreturn this.bookService.createBook(payload);\n}\n}\n</code></pre> <p>Pengujian pada create</p> <p></p> payload<pre><code>{\n\"title\" : \"NestJS\",\n\"author\" : \"Ihsan\",\n\"year\" : 2020\n}\n</code></pre> <p>Kita cek apakah data berhasil masuk atau belum ke database</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#6-menampilkan-seluruh-data-book-dengan-typeorm","title":"6. Menampilkan seluruh data Book dengan TypeOrm","text":"<p>kita akan menampilkan data dengan method find() pada typeOrm.</p> book.service.ts<pre><code>async getAllBooks(): Promise&lt;ResponseSuccess&gt; {\nconst result = await this.bookRepository.find();\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\n};\n}\n</code></pre> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto } from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get('/list')\nfindAllBook() {\nreturn this.bookService.getAllBooks();\n}\n}\n</code></pre> <p>Pengujian pada Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#7-menampilkan-detail-book-dengan-typeorm","title":"7. Menampilkan detail book dengan TypeOrm","text":"book.service.ts<pre><code>...\nasync getDetail(id: number): Promise&lt;ResponseSuccess&gt; {\nconst detailBook = await this.bookRepository.findOne({\nwhere: {\nid,\n},\n});\nif (detailBook === null) {\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\n}\nreturn {\nstatus: 'Success',\nmessage: 'Detail Buku ditermukan',\ndata: detailBook,\n};\n}\n...\n</code></pre> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto} from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get('detail/:id')\nfindOneBook(@Param('id') id: string) {\nreturn this.bookService.getDetail(Number(id));\n}\n}\n</code></pre> <p>Pengujian pada Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#8-mengupdate-book-dengan-typeorm","title":"8. Mengupdate book dengan TypeOrm","text":"book.service.ts<pre><code>async updateBook(\nid: number,\nupdateBookDto: UpdateBookDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.bookRepository.findOne({\nwhere: {\nid,\n},\n});\nif (!check)\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\nconst update = await this.bookRepository.save({ ...updateBookDto, id: id });\nreturn {\nstatus: `Success `,\nmessage: 'Buku berhasil di update',\ndata: update,\n};\n}\n</code></pre> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto, UpdateBookDto} from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Put('update/:id')\nupdateBook(@Param('id') id: string, @Body() updateBookDto: UpdateBookDto) {\nreturn this.bookService.updateBook(Number(id), updateBookDto);\n}\n}\n</code></pre> <p>Pengujian pada Update</p> <p></p> payload<pre><code>{\n\"title\" : \"NestJS up\",\n\"author\" : \"Ihsan Update\",\n\"year\" : 2023\n}\n</code></pre> <p>Pengujian pada after update Setelah proses update berhasil, kita akan cek kembali menggunakan endpoint detail.</p> <p></p> <p>Pada gambar di atas, kita sudah berhasil merubah data sesuai yang di update</p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#9-menghapus-book-dengan-typeorm","title":"9. Menghapus book dengan TypeOrm","text":"book.service.ts<pre><code>async deleteBook(id: number): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.bookRepository.findOne({\nwhere: {\nid,\n},\n});\nif (!check)\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\nawait this.bookRepository.delete(id);\nreturn {\nstatus: `Success `,\nmessage: 'Berhasil menghapus buku',\n};\n}\n</code></pre> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto, UpdateBookDto} from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Delete('delete/:id')\ndeleteBook(@Param('id') id: string) {\nreturn this.bookService.deleteBook(+id);\n}\n</code></pre> <p>Pengujian pada Delete</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#10-menambahkan-banyak-buku-ke-table-dengan-typeorm","title":"10. Menambahkan Banyak Buku ke table dengan TypeOrm","text":"book.service.ts<pre><code>...\nasync bulkCreate(payload: createBookArrayDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nlet berhasil = 0;\nlet gagal = 0;\nawait Promise.all(\npayload.data.map(async (data) =&gt; {\ntry {\nawait this.bookRepository.save(data);\nberhasil += 1;\n} catch {\ngagal += 1;\n}\n}),\n);\nreturn this._success(`Berhasil menyimpan ${berhasil} dan gagal ${gagal}`);\n} catch {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n...\n</code></pre> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto, UpdateBookDto, createBookArrayDto}  from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Post('/create/bulk')\nbulkCreateBook(@Body() payload: createBookArrayDto) {\nreturn this.bookService.bulkCreate(payload);\n}\n</code></pre> <p>Pengujian pada Postman</p> <p></p> payload<pre><code>{\n\"data\" : [\n{\n\"title\": \"NestJS For Backend\",\n\"author\": \"Ihsan\",\n\"year\": 2023\n},\n{\n\"title\": \"Become Network Engineer\",\n\"author\": \"Fathi\",\n\"year\": 2021\n},\n{\n\"title\": \"HTML CSS\",\n\"author\": \"Nur\",\n\"year\": 2022\n},\n{\n\"title\": \"TypeScript\",\n\"author\": \"Ihsan\",\n\"year\": 2023\n},\n{\n\"title\": \"Server Admin\",\n\"author\": \"Raihan\",\n\"year\": 2022\n},\n{\n\"title\": \"Database MySQL\",\n\"author\": \"Akbar\",\n\"year\": 2023\n},\n{\n\"title\": \"React Developer\",\n\"author\": \"Nur\",\n\"year\": 2023\n},\n{\n\"title\": \"NextJs Developer\",\n\"author\": \"Ihsan\",\n\"year\": 2023\n}\n]\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#11-membuat-paginationpaging-pada-menampilan-semua-data","title":"11. Membuat Pagination(Paging) pada menampilan semua data","text":"<p>Ketika membuat REST API untuk menampilkan semua data di tabel, maka kita perlu menggunakan paging agar query di backend tidak terlalu berat dan kita bisa membatasi berapa data yang ditampilkan dalam satu kali query.</p> <p>Pada materi ini kita akan membahas bagaiaman membuat paging dengan typeorm dan nestjs</p> <p>Langkah Pertama kita buat dulu response type untuk pagination</p> src/interface/response/response.interface.ts<pre><code>import { HttpStatus } from \"@nestjs/common\";\nexport interface ResponseSuccess {\nstatusCode?: HttpStatus;\nstatus: string;\nmessage: string;\ndata?: any;\n}\nexport interface ResponsePagination extends ResponseSuccess {\npagination: {\ntotal: number;\npage: number;\npageSize: number;\n};\n}\n</code></pre> <p>Jadi ketika pagination kita wajibkan return memiliki object pagination denga property total data, page saat ini dan berapa data yang ditampilkan (pageSize)</p> <p>Langkah Kedua kita buat dto untuk pagination , dengan membuat folder baru utils/dto</p> <p></p> src/utils/dto/page.dto.ts<pre><code>import { Type } from \"class-transformer\";\nimport { IsInt } from \"class-validator\";\nexport class PageRequestDto {\n@IsInt()\n@Type(() =&gt; Number)\npage = 1;\n@IsInt()\n@Type(() =&gt; Number)\npageSize = 10;\n}\n</code></pre> <p>Langkah Ketiga kita buat dto findBookDto dengan mengextends PageRequestDto</p> book.dto.ts<pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nimport { IsInt, IsNotEmpty, Min, Max, Length } from \"class-validator\";\nimport { PageRequestDto } from \"src/utils/dto/page.dto\";\nexport class BookDto {\nid: number;\n@IsNotEmpty()\n@Length(4, 10)\ntitle: string;\n@IsNotEmpty()\nauthor: string;\n@IsInt()\n@Min(2020)\n@Max(2023)\nyear: number;\n}\n...\nexport class FindBookDto extends PageRequestDto {}\n...\n</code></pre> <p>Langkah Ke Empat kita ubah koding findAllBook pada controller dan service</p> book.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from './book.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Book } from './book.entity';\nimport { Repository } from 'typeorm';\n@Injectable()\nexport class BookService {\nconstructor(\n@InjectRepository(Book) private readonly bookRepository: Repository&lt;Book&gt;,\n) {}\nasync getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconsole.log('uqwey', query);\nconst { page, pageSize } = query;\nconst total = await this.bookRepository.count();\nconst result = await this.bookRepository.find({\nskip: (Number(page) - 1) * Number(pageSize),\ntake: Number(pageSize),\n});\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\npagination: {\ntotal: total,\npage: Number(page),\npageSize: Number(pageSize),\n},\n};\n}\n...\n}\n</code></pre> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from \"@nestjs/common\";\nimport { BookService } from \"./book.service\";\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from \"./book.dto\";\n@Controller(\"book\")\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get(\"/list\")\nfindAllBook(@Query() findBookDto: FindBookDto) {\nreturn this.bookService.getAllBooks(findBookDto);\n}\n}\n</code></pre> <p>Pengujian pada Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#12-implementasi-custom-decorator-untuk-meyederhanakan-paging","title":"12. Implementasi Custom Decorator untuk meyederhanakan Paging","text":"<p>Selain mengguankan decorator bawaan seperti <code>@Body()</code>, <code>@Query()</code>, <code>@Param()</code> pada controler, kita juga bisa membuat Custom Decorator seperti pada dokumentasi https://docs.nestjs.com/custom-decorators. Pada contoh kasus kali ini, kita akan membuat Custom Decorator untuk paging sehingga, pada setiap service kita tidak perlu menghitung ulang page dan limit untuk paging</p> book.service.ts<pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\n...\nconst result = await this.bookRepository.find({\nskip: (Number(page) - 1) * Number(pageSize),\ntake: Number(pageSize),\n});\n...\n}\n</code></pre> <p>Perhatikan pada bagian <code>skip</code>, disitu kita harus menghitung <code>limit</code> .Bayangkan jika kita membuat fitur ini pada module lain, maka kita harus selalu menghitung limit. Tentu hal ini tidak efektif karena harus melalukan pekerjaan yang sama secara berulang. Pada materi ini kita akan membuat custom decorator agar kita tidak perlu menghitung ulang limit, namun nanti kita hanya tinggal menggunakan saja pada setiap service.</p> <p>Pertama buatlah folder decorator pada folder utils</p> src/utils/decorator/pagination.decorator.ts<pre><code>import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nexport const Pagination = createParamDecorator(\n(data: unknown, ctx: ExecutionContext) =&gt; {\nconst request = ctx.switchToHttp().getRequest();\nif (!!request.query.page === false) {   //memberikan nilai default 1 jika tidak dikirim client\nrequest.query.page = 1;\n}\nif (!!request.query.pageSize === false) { //memberikan nilai default 10 jika tidak dikirim client\nrequest.query.pageSize = 10;\n}\nrequest.limit =\n(Number(request.query.page) - 1) * Number(request.query.pageSize);\nrequest.query.pageSize = Number(request.query.pageSize);\nrequest.query.page = Number(request.query.page);\nreturn request.query;\n},\n);\n</code></pre> <p>Pada kode di atas , kita menghitung limit dan kita return hasilnya pada decorator pagination</p> <p>Selanjutnya kita perbaharui kode di main.ts larena kita menggunakan custom decorator maka kita harus mengaktifkan <code>validateCustomDecorators</code> menjadi <code>true</code> seperti pada kode di bawah.</p> <p>main.ts</p> main.ts<pre><code>import { NestFactory } from \"@nestjs/core\";\nimport { AppModule } from \"./app.module\";\nimport { ValidationPipe } from \"@nestjs/common\";\nasync function bootstrap() {\nconst app = await NestFactory.create(AppModule);\napp.useGlobalPipes(\nnew ValidationPipe({\nwhitelist: true,\nforbidUnknownValues: true,\ntransform: true,\nvalidateCustomDecorators: true,\ntransformOptions: {\nenableImplicitConversion: true,\n},\n})\n);\nawait app.listen(5002);\n}\nbootstrap();\n</code></pre> <p>Selanjutnya kita ganti decorator <code>@Query()</code> pada findAllBook di book.controller.ts dengan custom decorator <code>Pagination()</code> yang kita buat.</p> book.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nQuery,\nUsePipes,\nValidationPipe,\n} from '@nestjs/common';\nimport { BookService } from './book.service';\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from './book.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@Controller('book')\nexport class BookController {\nconstructor(private bookService: BookService) {}\n@Get('/list')\nfindAllBook(@Pagination() findBookDto: FindBookDto) {\nreturn this.bookService.getAllBooks(findBookDto);\n}\n...\n}\n</code></pre> <p>Implementasikan <code>limit</code> dan <code>pageSize</code> pada book.service.ts</p> book.service.ts<pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit } = query;\nconst total = await this.bookRepository.count();\nconst result = await this.bookRepository.find({\nskip: limit,\ntake: pageSize,\n});\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\npagination: {\ntotal: total,\npage: page,\npageSize: pageSize,\n},\n};\n}\n</code></pre> <p>saat kita nenambahkan <code>limit</code> pada query maka akan muncul error, untuk mengatasi hal tersebut kita perbaharui page.dto.ts</p> utils/dto/page.dto.ts<pre><code>import { Type } from \"class-transformer\";\nimport { IsInt, IsOptional } from \"class-validator\";\nexport class PageRequestDto {\n@IsInt()\n@Type(() =&gt; Number)\npage = 1;\n@IsInt()\n@Type(() =&gt; Number)\npageSize = 10;\n@IsInt()\n@IsOptional()\nlimit;\n}\n</code></pre> <p>Pengujian pada Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/2.%20TypeORM_basic/#13-membuat-filter-page-getallbook","title":"13. Membuat Filter page getAllBook","text":"<p>Seringkali ketika menampilkan data , kita membutuhkan filter fitur yang bisa dikombinasikan atau salah satu saja. Contoh pada kasus book kita kita bisa memcari berdasarkan salah satu dari author, title, year atau kombinasi ketiga nya.</p> <p>Pada materi kali ini kita akan membuar fitur filter berdasrkan title, author, dan range tahun terbit seperti terlihat pada postman</p> <p></p> <p>Kita tambahkan option title, author, from_year, to_year pada book.dto.ts</p> book.dto.ts<pre><code>import { OmitType } from \"@nestjs/mapped-types\";\nimport { Type } from \"class-transformer\";\nimport {\nIsInt,\nIsNotEmpty,\nMin,\nMax,\nLength,\nIsOptional,\n} from \"class-validator\";\nimport { PageRequestDto } from \"src/utils/dto/page.dto\";\nexport class BookDto {\nid: number;\n@IsNotEmpty()\n@Length(4, 10)\ntitle: string;\n@IsNotEmpty()\nauthor: string;\n@IsInt()\n@Min(2020)\n@Max(2023)\nyear: number;\n}\nexport class CreateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class UpdateBookDto extends OmitType(BookDto, [\"id\"]) {}\nexport class FindBookDto extends PageRequestDto {\n@IsOptional()\ntitle: string;\n@IsOptional()\nauthor: string;\n@IsOptional()\n@IsInt()\n@Type(() =&gt; Number)\nfrom_year: number;\n@IsOptional()\n@IsInt()\n@Type(() =&gt; Number)\nto_year: number;\n}\n</code></pre> <p>Selanjutkan kita tambahkan condition statement pada method find tyoeorm</p> book.service.ts<pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit, title, author, from_year, to_year } = query;\nconsole.log('q', query);\nconst total = await this.bookRepository.count();\nconst filter: {\n[key: string]: any;\n} = {};\nif (title) {\nfilter.title = Like(`%${title}%`);\n}\nif (author) {\nfilter.author = Like(`%${author}%`);\n}\nif (from_year &amp;&amp; to_year) {\nfilter.year = Between(from_year, to_year);\n}\nif (from_year &amp;&amp; !!to_year === false) {\nfilter.year = Between(from_year, from_year);\n}\nconst result = await this.bookRepository.find({\nwhere: filter,\nskip: limit,\ntake: pageSize,\n});\nreturn {\nstatus: 'Success',\nmessage: 'List Buku ditermukan',\ndata: result,\npagination: {\ntotal: total,\npage: page,\npageSize: pageSize,\n},\n};\n}\n</code></pre> <p>Pengujian Postman</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/5.%20TypeOrm%20/3.%20Base_Response/","title":"C. Membuat Base Response","text":"<p>Untuk membuat penulisan response menjadi sederhana saat return dalam service, kita akan membuat class Base Response pada folder <code>utils</code> seperti gambar di bawah.</p> <p></p> utils/response/base.response.ts<pre><code>import { ResponseSuccess, ResponsePagination } from \"src/interface/response\";\nclass BaseResponse {\n_success(message: string, data?: any): ResponseSuccess {\nreturn {\nstatus: \"Success\",\nmessage: message,\ndata: data || {},\n};\n}\n_pagination(\nmessage: string,\ndata: any,\ntotalData: number,\npage: number,\npageSize: number\n): ResponsePagination {\nreturn {\nstatus: \"Success\",\nmessage: message,\ndata: data,\npagination: {\ntotal: totalData,\npage: page,\npageSize: pageSize,\n},\n};\n}\n}\nexport default BaseResponse;\n</code></pre> <p>Kemudian class tersebut kita <code>extends</code> pada book.service.ts</p> book.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateBookDto, FindBookDto, UpdateBookDto } from './book.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Book } from './book.entity';\nimport { Between, Like, Repository } from 'typeorm';\nimport BaseResponse from 'src/utils/response/base.response'; //import class Base Response\n@Injectable()\nexport class BookService extends BaseResponse { //extend class BaseResponse\nconstructor(\n@InjectRepository(Book) private readonly bookRepository: Repository&lt;Book&gt;,\n) {\nsuper(); // karena BookService menjadi sub class dari BaseResponse maka harus diberkan super()\n}\n...\n}\n</code></pre> <p>Setelah kita <code>extends BaseResponse</code>,  selanjutkan kita impelementasikan pada return setiap method service di <code>book.service.ts</code></p> book.service.ts<pre><code>async getAllBooks(query: FindBookDto): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit, title, author, from_year, to_year } = query;\nconsole.log('q', query);\nconst total = await this.bookRepository.count();\nconst filter: {\n[key: string]: any;\n} = {};\nif (title) {\nfilter.title = Like(`%${title}%`);\n}\nif (author) {\nfilter.author = Like(`%${author}%`);\n}\nif (from_year &amp;&amp; to_year) {\nfilter.year = Between(from_year, to_year);\n}\nif (from_year &amp;&amp; !!to_year === false) {\nfilter.year = Between(from_year, from_year);\n}\nconst result = await this.bookRepository.find({\nwhere: filter,\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize); // implementasi method _pagination disini\n}\nasync createBook(createBookDto: CreateBookDto): Promise&lt;ResponseSuccess&gt; {\nconst { title, author, year } = createBookDto;\ntry {\nawait this.bookRepository.save({\ntitle: title,\nauthor: author,\nyear: year,\n});\nreturn this._success('OK'); // implementasi method _success disini\n} catch (err) {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n</code></pre> <p><code>Pengujian pada Postman create</code></p> <p></p> <p><code>Pengujian pada Postman get all dengan filter</code></p> <p></p> <p>Selanjutkan silahkan implementasikan pada method-method lain pada book.service.ts</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/A.%20Penjelasan_Project/","title":"A. Penjelasan Project","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/A.%20Penjelasan_Project/#1-tabel-project","title":"1. Tabel Project","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/A.%20Penjelasan_Project/#2-fitur","title":"2. Fitur","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/0.%20Penjdahuluan/","title":"1. Pendahuluan","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/0.%20Penjdahuluan/#tujuan-pembelajaran","title":"Tujuan Pembelajaran","text":"<p>Peserta didik mampu mengimplementasikan authentikasi\\ berbasis JSON Web Token (JWT) di dalam aplikasi NestJS, termasuk melakukan konfigurasi strategi keamanan, penerapan guards, dan validasi token melalui guard, guna menjaga keamanan endpoint API.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/0.%20Penjdahuluan/#apersepsi","title":"Apersepsi","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/","title":"2. Login dan Register","text":"<p>Pada bahasan kali kita kita akan membuat feature untuk authentikasi pada project kita. Kita akan belajar langkah demi langkah untuk membuat authentikasi.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-module-auth","title":"Membuat module auth","text":"<p>terminal<pre><code>npx nest c module  app/auth\nnpx nest g controller  app/auth\nnpx nest g service   app/auth\n</code></pre> </p> <p>Pada project ini, semua module feature kita masukan ke dalam folder app seperi pada gambar di atas</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-entity","title":"Membuat Entity","text":"<p>Pada project kita table user seperti pada gambar di atas. Selanjutnya kita akan membuat entity pada module auth</p> auth.entity.ts<pre><code>import { Entity, BaseEntity, PrimaryGeneratedColumn, Column } from \"typeorm\";\n@Entity()\nexport class User extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: true })\navatar: string;\n@Column({ nullable: false })\nnama: string;\n@Column({ unique: true, nullable: false })\nemail: string;\n@Column({ nullable: true })\npassword: string;\n@Column({ nullable: true })\nrefresh_token: string;\n@Column({ nullable: true })\nrole: string;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\ncreated_at: Date;\n@Column({ type: \"datetime\", default: () =&gt; \"CURRENT_TIMESTAMP\" })\nupdated_at: Date;\n}\n</code></pre> <p>Implementasikan pada module</p> <p>auth.module.ts</p> auth.module.ts<pre><code>import { Module } from \"@nestjs/common\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { User } from \"./auth.entity\";\n@Module({\nimports: [TypeOrmModule.forFeature([User])],\ncontrollers: [AuthController],\nproviders: [AuthService],\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-fitur-register","title":"Membuat fitur Register","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-dto-untuk-register","title":"Membuat DTO untuk register","text":"auth.dto.ts<pre><code>import { PartialType, PickType } from \"@nestjs/mapped-types\";\nimport { IsEmail, IsInt, IsString, Length, MinLength } from \"class-validator\";\nexport class UserDto {\n@IsInt()\nid: number;\n@IsString()\nnama: string;\n@IsString()\navatar: string;\n@IsString()\n@IsEmail()\nemail: string;\n@IsString()\n@MinLength(8)\npassword: string;\n@IsString()\nrefresh_token: string;\n@IsString()\nrole: string;\n}\nexport class RegisterDto extends PickType(UserDto, [\n\"nama\",\n\"email\",\n\"password\",\n]) {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#instalasi-package-crypto-untuk-hash-password","title":"Instalasi package crypto untuk hash password","text":"terminal<pre><code>npm install bcrypt --save\nnpm install -D @types/bcrypt\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-service-untuk-register","title":"Membuat Service untuk register","text":"auth.service.ts<pre><code>import { HttpException, HttpStatus, Injectable } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport BaseResponse from \"src/utils/response/base.response\";\nimport { User } from \"./auth.entity\";\nimport { Repository } from \"typeorm\";\nimport { ResponseSuccess } from \"src/interface/response\";\nimport { RegisterDto } from \"./auth.dto\";\nimport { hash } from \"bcrypt\"; //import hash\n@Injectable()\nexport class AuthService extends BaseResponse {\nconstructor(\n@InjectRepository(User) private readonly authRepository: Repository&lt;User&gt;\n) {\nsuper();\n}\nasync register(payload: RegisterDto): Promise&lt;ResponseSuccess&gt; {\nconst checkUserExists = await this.authRepository.findOne({\nwhere: {\nemail: payload.email,\n},\n});\nif (checkUserExists) {\nthrow new HttpException(\"User already registered\", HttpStatus.FOUND);\n}\npayload.password = await hash(payload.password, 12); //hash password\nawait this.authRepository.save(payload);\nreturn this._success(\"Register Berhasil\");\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-controller-untuk-end-point-register","title":"Membuat Controller untuk end point register","text":"auth.controller.ts<pre><code>import { Controller, Post, Body } from \"@nestjs/common\";\nimport { RegisterDto } from \"./auth.dto\";\nimport { AuthService } from \"./auth.service\";\n@Controller(\"auth\")\nexport class AuthController {\nconstructor(private authService: AuthService) {}\n@Post(\"register\")\nasync register(@Body() payload: RegisterDto) {\nreturn this.authService.register(payload);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#pengujian-di-postman","title":"Pengujian di Postman","text":"payload<pre><code>{\n\"nama\" : \"ihsan santana w\",\n\"email\" :\"ihsanabuhanifah@gmail.com\",\n\"password\" : \"12345678\"\n}\n</code></pre> <p>Cek Pada table users di database</p> <p></p> <p>Terlihat pada gambar di atas, kita sudah berhasil register user baru dan passowrd berhasil di hash.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-fitur-login","title":"Membuat Fitur Login","text":"<p>Sebelumnya kita sudah berhasil membuat fitur register , selanjutnya kita akan membuat fitur login.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-login-dto","title":"Membuat Login DTO","text":"<p>auth.dto.ts</p> <pre><code>import { PartialType, PickType } from '@nestjs/mapped-types';\nimport { IsEmail, IsInt, IsString, Length, MinLength } from 'class-validator';\n...\nexport class LoginDto extends PickType(UserDto, ['email', 'password']) {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-service-untuk-login","title":"Membuat Service untuk login","text":"auth.service.ts<pre><code> async login(payload: LoginDto): Promise&lt;ResponseSuccess&gt; {\nconst checkUserExists = await this.authRepository.findOne({\nwhere: {\nemail: payload.email,\n},\nselect: {\nid: true,\nnama: true,\nemail: true,\npassword: true,\nrefresh_token: true,\n},\n});\nif (!checkUserExists) {\nthrow new HttpException(\n'User tidak ditemukan',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\nconst checkPassword = await compare(\npayload.password,\ncheckUserExists.password,\n); // compare password yang dikirim dengan password yang ada di tabel\nif (checkPassword) {\nreturn this._success('Login Success', checkUserExists);\n} else {\nthrow new HttpException(\n'email dan password tidak sama',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#membuat-end-point-login-pada-controller","title":"Membuat end point login pada controller","text":"<pre><code>@Post('login')\nasync login(@Body() payload: LoginDto) {\nreturn this.authService.login(payload);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/1.%20register_login/#pengujian-pada-postman","title":"Pengujian pada Postman","text":"payload<pre><code>{\n\"email\" :\"ihsanabuhanifah@gmail.com\",\n\"password\" : \"12345678\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/","title":"3. JSON Web Token (JWT) dan Guard","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#1-konsep-json-web-token-jwt","title":"1. Konsep Json Web Token (JWT)","text":"<p>Pada materi ini kita akan menggunakan JWT (JSON web Token) untuk token dalam proses authentikasi. Dokumentasi jwt : https://jwt.io/</p> <p>kita akan bahas terlebih dahulu </p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#a-apa-itu-jwt","title":"a. Apa itu jwt?","text":"<ul> <li>JWT merupakan standar untuk melakukan pertukaran data dan authentikasi</li> <li>JWT mengikuti standar RFC 7591</li> <li>Data yang dipertukarkan mengguankan format JSON</li> <li>JWT dapt di enkripsi menggunakan secret key seperti HMAC atau public/private key seperti RSA</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#bkapan-jwt-digunakan","title":"b.Kapan JWT digunakan ?","text":"<ul> <li>Authorization (login)</li> <li>Information Exchange</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#c-struktur-jwt","title":"c. Struktur JWT","text":"<p>Seperti pada struktur jwt di atas, jwt membutuhkan signature yang hanya diketahui oleh server untuk mengecek apakan token valid atau tidak.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#d-apa-itu-header-jwt","title":"d. Apa itu Header JWT?","text":"<ul> <li>Berisikan informasi algoritma enkripsi yang digunakan</li> <li>Merupakan hasil base64. dari informati header dalam bentuk JSON</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#e-apa-itu-payload-jwt","title":"e. Apa itu payload JWT?","text":"<ul> <li>Berisi informasi yang digunakan untuk menverifikasi informasi yang dikirm dari client ke server</li> <li>Payload tidak boleh berisi data sensitif , contoh nya password</li> <li>Hasil dari base64 dalam bentuk JSON</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#f-signature","title":"f. Signature","text":"<ul> <li>Berisikan informasi yang dapat digunakan untuk memvalidasi JWT</li> <li>Didapatkan dengan mengenkripsi <code>header</code> dan <code>payload</code> menggunakan alogaritma yang sudah ditentukan oleh header</li> <li>Menggunakan <code>secret key</code> atau <code>private key</code> dari penerima</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#g-access-token-vs-refresh-token","title":"g. Access Token vs Refresh Token","text":"Access Token Refresh Token Digunakan untuk mengkases resource Digunakan untuk membuat access token baru Tidak disimpan di database Disimpan di database Punya waktu expired sedikit Punya waktu expired panjang"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#h-best-practice-jwt","title":"h. Best Practice JWT","text":"<ul> <li>Jangan meletakan data sensitif di payload </li> <li>Expired time untuk access token tidak terlalu lama</li> <li>Gunakan refesh token untuk membuat access_token</li> <li>Jangan simpan access token di database Implentasi access token dan refeesh token bisa berbeda-beda pada setiap programmer</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#2-membuat-token-dengan-jwt-json-web-token","title":"2. Membuat token dengan JWT (JSON Web Token)","text":"<p>Pada Pengujian sebelumnya kita sudah berhasil untuk login, namun ketika login kita belum memberikan token pada client untuk authentikasi yang akan disimpan di front end.</p> <p>Selanjutnya kita akan implentasikan jwt token pada project nestjs kita Pertama kita akan instalasi package jwt di nestJS</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#a-instalasi-package","title":"a. Instalasi Package","text":"<pre><code>npm install @nestjs/passport passport passport-jwt\nnpm install -D @types/passport-jwt\nnpm install @nestjs/jwt\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#b-membuat-jwt-config","title":"b. Membuat jwt config","text":"<p>Pada materi ini kita buat jwt config untuk menyimpan signature dari jwt pada aplikasi kita. Kita akan membuat pada folder config.</p> src/config/jwt.config.ts<pre><code>export const jwt_config = {\naccess_token_secret: 'belajar_jwt',\nexpired: 3600,\nrefresh_token_secret: 'fajfngjgan',\n};\n</code></pre> <p>Note</p> <p><code>access_token_secret</code> adalah secret signature untuk access token <code>refresh_token_secre</code> adalah secret signature untuk refresh token</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#c-import-module-jwt-ke-dalam-auth","title":"c. Import Module JWT ke dalam Auth","text":"<p>Selanjutkan kita import module jwt pda module auth agar pada module auth. Kita akan menggunakan method register dari JWT Module dengan konfigurasi seperti di bawah.</p> app/auth/auth.module.ts<pre><code>import { Module } from \"@nestjs/common\";\nimport { AuthController } from \"./auth.controller\";\nimport { AuthService } from \"./auth.service\";\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\nimport { Auth } from \"./auth.entity\";\nimport { PassportModule } from \"@nestjs/passport\";\nimport { JwtModule } from \"@nestjs/jwt\";\nimport { jwt_config } from \"src/config/jwt.config\";\n@Module({\nimports: [\nTypeOrmModule.forFeature([Auth]),\nJwtModule.register({}),\n],\ncontrollers: [AuthController],\nproviders: [AuthService],\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#d-membuat-interface-untuk-jwtpayload","title":"d. Membuat interface untuk jwtPayload","text":"<p>Kemudian kita buat interface JWT payload untuk menghindari kesalahan katika membuat payload untuk JWT Token.</p> app/auth/auth.interface.ts<pre><code>interface jwtPayload {\nid: number;\nnama: string;\nemail: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#e-inject-jwtservice-pada-authservicets","title":"e. Inject jwtService pada auth.service.ts","text":"<p>Kita tinggal inject jwtService pada contructor auth service agar service jwt bisa digunakan di auth service.</p> app/auth/auth.service.ts<pre><code>constructor(\n@InjectRepository(Auth) private readonly authRepository: Repository&lt;Auth&gt;,\nprivate jwtService: JwtService, // panggil kelas jwt service\n) {\nsuper();\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#f-membuat-method-generate-jwt-pada-service","title":"f. Membuat method generate jwt pada service","text":"<p>Kita akan membuat method dengan nama generateJWT untuk membuat JWT Token dengan parameter waktu expire dan payload yang berisi <code>id</code>, <code>email</code>, <code>nama</code>.    Untuk membuat token kita bisa menggunakan method <code>sign</code> dari jwtService. </p> app/auth/auth.service.ts<pre><code> generateJWT(payload: jwtPayload, expiresIn: string | number, token: string) {\nreturn this.jwtService.sign(payload, {\nsecret: token,\nexpiresIn: expiresIn,\n});\n} //membuat method untuk generate jwt\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#g-membuat-token-pada-saat-login-dengan-method-generatejwt","title":"g. Membuat Token pada saat Login dengan method generateJWT","text":"<p>Kita akan membuat access_token dan refresh token dan method generateJWT  ketika user login. Pada kasus ini kita akan berikan waktu expired untuk access_token selama 1 hari dan refresh_token selama 7 hari.</p> app/auth/auth.service.ts<pre><code>async login(payload: LoginDto): Promise&lt;ResponseSuccess&gt; {\nconst checkUserExists = await this.authRepository.findOne({\nwhere: {\nemail: payload.email,\n},\nselect: {\nid: true,\nnama: true,\nemail: true,\npassword: true,\nrefresh_token: true,\n},\n});\nif (!checkUserExists) {\nthrow new HttpException(\n'User tidak ditemukan',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\nconst checkPassword = await compare(\npayload.password,\ncheckUserExists.password,\n);\nif (checkPassword) {\nconst jwtPayload: jwtPayload = {\nid: checkUserExists.id,\nnama: checkUserExists.nama,\nemail: checkUserExists.email,\n};\nconst access_token = await this.generateJWT(\njwtPayload,\n'1d',\njwt_config.access_token_secret,\n);\nconst refresh_token = await this.generateJWT(\njwtPayload,\n'7d',\njwt_config.refresh_token_secret,\n);\nawait this.authRepository.save({\nrefresh_token: refresh_token,\nid: checkUserExists.id,\n}); // simpan refresh token ke dalam tabel\nreturn this._success('Login Success', {\n...checkUserExists,\naccess_token: access_token,\nrefresh_token: refresh_token,\n});\n} else {\nthrow new HttpException(\n'email dan password tidak sama',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#htesting-pada-postman","title":"h.Testing pada Postman","text":"<p>Mengecek apakah payload sudah sesuai dengan yang kita inginkan di website https://jwt.io/.</p> <p>Silahkan copy <code>access_token</code> kemudian paste pada bagian encode</p> <p></p> <p>Silahkan cek pada bagian decode untuk melihat data apa saya yang ada pada jwt.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#2-impelementasi-authentication-guard","title":"2. Impelementasi Authentication Guard","text":"<p>Guard bertujuan untuk memproteksi suatu end point.</p> <p></p> <p>Seperti pada contoh gambar di atas, endpoint https://mysqmk.com/profile memerlukan jwt token / user yang sudah login untuk mengaksesnya, jika request dilakukan tanpa membawa token, maka backend akan meresponse dengan <code>Unauthorized</code>, sedangkan jika berhasil maka akan memberikan data yang di request.</p> <p>Pada materi ini kita akan  mengimpelentasikan guard pada nestjs.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#a-membuat-guard-pada-auth","title":"a. Membuat Guard pada Auth","text":"<p>Kita akan membuat file auth.guard.ts pada folder auth</p> auth.guard.ts<pre><code>import { ExecutionContext, UnauthorizedException } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nexport class JwtGuard extends AuthGuard('jwt_access_token') {\ncanActivate(context: ExecutionContext) {\nreturn super.canActivate(context);\n}\nhandleRequest(err, user) {\nif (err || !user) {\nthrow err || new UnauthorizedException();\n}\nreturn user;\n}\n}\nexport class JwtGuardRefreshToken extends AuthGuard('jwt_refresh_token') {\ncanActivate(context: ExecutionContext) {\nreturn super.canActivate(context);\n}\nhandleRequest(err, user) {\nif (err || !user) {\nthrow err || new UnauthorizedException();\n}\nreturn user;\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#b-membuat-jwt-strategy-pada-auth","title":"b. Membuat JWT Strategy pada Auth","text":"<p>JWT strategy bertujuan untuk melakukan verifikasi token JWT yang dikirimkan oleh client dan menentukan apakan request akan diteruskan ke router handler atau tidak.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#jwt-strategy-untuk-access-token","title":"JWT Strategy untuk Access Token","text":"app/auth/jwtAccessToken.strategy.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwt_config } from 'src/config/jwt.config';\n@Injectable()\nexport class JwtAccessTokenStrategy extends PassportStrategy(\nStrategy,\n'jwt_access_token',\n) {\nconstructor() {\nsuper({\njwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\nignoreExpiration: false,\nsecretOrKey: jwt_config.access_token_secret,\n});\n}\nasync validate(payload: any) {\nreturn payload;\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#jwt-strategy-untuk-refresh-token","title":"JWT Strategy untuk Refresh Token","text":"app/auth/jwtRefreshToken.strategy.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { jwt_config } from 'src/config/jwt.config';\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\nStrategy,\n'jwt_refresh_token',\n) {\nconstructor() {\nsuper({\njwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\nignoreExpiration: false,\nsecretOrKey: jwt_config.refresh_token_secret,\n});\n}\nasync validate(payload: any) {\nreturn payload;\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#c-menambahkan-jwtstrategy-pada-provider-module-auth","title":"c. Menambahkan JwtStrategy pada Provider Module Auth","text":"<p>Karena jwt strategy memiliki decorator <code>@Injectable()</code> maka kita harus menambahkan JwtStrategy pada provider di auth module</p> app/auth/auth.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './auth.entity';\nimport { JwtModule } from '@nestjs/jwt';\nimport { JwtAccessTokenStrategy } from './jwtAccessToken.strategy';\nimport { MailModule } from '../mail/mail.module';\nimport { ResetPassword } from './reset_password.entity';\nimport { JwtRefreshTokenStrategy } from './jwtRefreshToken.strategy';\n@Module({\nimports: [\nTypeOrmModule.forFeature([User, ResetPassword]),\nJwtModule.register({}),\nMailModule,\n],\ncontrollers: [AuthController],\nproviders: [AuthService, JwtAccessTokenStrategy, JwtRefreshTokenStrategy],\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#d-membuat-endpont-profil","title":"d. Membuat endpont Profil","text":"<p>Kita akan membuat endpoint yang hanya bisa diakses ketika user sudah login/membawa token saat request. Pada contoh ini , kita akan membuat endpoint profil dimana endpoint ini akan memberikan data profil user berdasarkan token yang dikirim. Jika token tidak dikirim di dalam header, maka request akan ditolak.</p> <p>auth.service.ts<pre><code>async myProfile(id: number): Promise&lt;ResponseSuccess&gt; {\nconst user = await this.authRepository.findOne({\nwhere: {\nid: id,\n},\n});\nreturn this._success('OK', user);\n}\n</code></pre> Pada kode di atas, kita membuat service untuk mencari profile berdasarkan id</p> auth.controller.ts<pre><code>import { Controller, Post, Body, Get, UseGuards, Req } from '@nestjs/common'; //import UseGuard\nimport { LoginDto, RegisterDto } from './auth.dto';\nimport { AuthService } from './auth.service';\nimport { JwtGuard } from './auth.guard'; //import JwtGuard\n@Controller('auth')\nexport class AuthController {\nconstructor(private authService: AuthService) {}\n@Post('register')\nasync register(@Body() payload: RegisterDto) {\nreturn this.authService.register(payload);\n}\n@Post('login')\nasync login(@Body() payload: LoginDto) {\nreturn this.authService.login(payload);\n}\n@UseGuards(JwtGuard) // impelementasi guard pada route , hal ini berarti endpoint profile hanya bisa diakses jika client membawa token\n@Get('profile')\nasync profile(@Req() req) {  // hasil validate dari jwt strategy akan ditambakan pada req.user. isi object req.user akan sama dengan payload dari jwt token. Silahkan coba console.log(req.user)\nconst { id } = req.user;\nreturn this.authService.myProfile(id);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.%20jwt_token/#e-pengujian-pada-postman","title":"e. Pengujian Pada Postman","text":"<p>Pengujian Pertama,  Request tanpa membawa jwt token pada headers</p> <p></p> <p>Pengujian Kedua , Request dengan jwt token pada headers .</p> <p>Silahkan copy token yang ada pada access_token ketika berhasil login</p> <p></p> <p>Kemudian kita paste pada headers request pada endpont profile seperti pada gambar di bawah</p> <p></p> <p>Kemudian kita tes kembali request pada server</p> <p></p> <p>kita sudah berhasil untuk mengimplentasikan guard pada entpoint profile</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.1%20refreshtoken/","title":"4. Refresh Token","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.1%20refreshtoken/#membuat-service-refresh-token","title":"Membuat Service Refresh Token","text":"app/auth/auth.service.ts<pre><code>async refreshToken(id: number, token: string): Promise&lt;ResponseSuccess&gt; {\nconst checkUserExists = await this.authRepository.findOne({\nwhere: {\nid: id,\nrefresh_token: token,\n},\nselect: {\nid: true,\nnama: true,\nemail: true,\npassword: true,\nrefresh_token: true,\n},\n});\nconsole.log('user', checkUserExists);\nif (checkUserExists === null) {\nthrow new UnauthorizedException();\n}\nconst jwtPayload: jwtPayload = {\nid: checkUserExists.id,\nnama: checkUserExists.nama,\nemail: checkUserExists.email,\n};\nconst access_token = await this.generateJWT(\njwtPayload,\n'1d',\njwt_config.access_token_secret,\n);\nconst refresh_token = await this.generateJWT(\njwtPayload,\n'7d',\njwt_config.refresh_token_secret,\n);\nawait this.authRepository.save({\nrefresh_token: refresh_token,\nid: checkUserExists.id,\n});\nreturn this._success('Success', {\n...checkUserExists,\naccess_token: access_token,\nrefresh_token: refresh_token,\n});\n}\n</code></pre> <p>Pada kode di atas , kita akan mencari data user yang memilki kombinasi id dan refresh_token yang dikirimkan saat request. Jika tidak ditemukan maka akan request akan <code>Unauthorized</code> sedangkan jika ditemukan maka akan dibuatkan access token dan refresh token yang baru. Hal ini sama seperti saat kita login. Implentasi pada client akan kita bahas pada materi Frontend</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.1%20refreshtoken/#membuat-controller-refresh-token","title":"Membuat Controller Refresh Token","text":"app/auth/auth.controller.ts<pre><code>@UseGuards(JwtGuardRefreshToken)\n@Get('refresh-token')\nasync refreshToken(@Req() req) {\nconst token = req.headers.authorization.split(' ')[1];\nconst id = req.headers.id;\nreturn this.authService.refreshToken(+id, token);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/2.1%20refreshtoken/#pengujian-pada-postman","title":"Pengujian pada Postman","text":"<p>Pertama login terlebih dahulu untuk mendapatkan refresh token</p> <p></p> <p>Kedua salin refresh_token dan id yang didapatkan dan paste-kan pada <code>header Authorization</code> untuk refresh token dan  <code>header id</code> untuk id yang akan dibawa saat request ke api refresh-roken. Jika berhasil maka akan seperti gambar di bawah ini.</p> <p></p> <p>Request akan seperti di bawah ini, jika</p> <ul> <li>kombinasi token refresh_token dan id tidak ada di tabel user</li> <li>Token sudah expired</li> </ul> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/","title":"5. Fitur Lupa Password","text":"<p>Pada Materi ini kita akan membahas bagaimana membuat fitur lupa password. Pada fitur ini biasanya backend akan mengirim link ke email untuk lupa password. </p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#1-instalasi-package-nodemailer-dan-handlers","title":"1. Instalasi Package nodemailer dan handlers","text":"<p>Petama kita akan instalasi package nodemailer untuk mengirimkan email pada nodejs. terminal<pre><code>npm install --save @nestjs-modules/mailer nodemailer\nnpm install --save-dev @types/nodemailer\nnpm install --save handlebars   // library JavaScript yang digunakan untuk memfasilitasi proses templating di sisi klien. Dengan menggunakan Handlebars.js, Anda dapat menggabungkan data dengan template HTML untuk menghasilkan output HTML yang lebih dinamis dan fleksibel\n</code></pre></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#2-membuat-fitur-mail","title":"2. Membuat Fitur Mail","text":"terminal<pre><code>npx nest module app/mail\nnpx nest service app/mail\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#3-membuat-akun-di-mailtrapio","title":"3. Membuat akun di mailtrap.io","text":"<p>Buatlah akun pada https://mailtrap.io/ untuk membuat smtp server dummy.  Pada proses development ini kita akan menggukan mailtrap untuk menerima email pada saat lupa password. Setelah membuat akun silakan buka url https://mailtrap.io/</p> <p></p> <p>Kemudian buka My Inbox dan pada bagian integrations pilih nodemailer</p> <p></p> konfigurasi<pre><code>var transport = nodemailer.createTransport({\nhost: \"sandbox.smtp.mailtrap.io\",\nport: 2525,\nauth: {\nuser: \"116b44e4fce785\",\npass: \"0a66404****\"\n}\n})\n</code></pre> <p>Pada kode di atas kita akan mendapatkan konfigurasi untuk nanti simpan di nestjs. Terlihat pada bagian pass ada *** untuk mendapatkan string lengkap nya silahkan kalian klik button copy di sebelah kanan.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#4-konfigurasi-mail-module","title":"4. Konfigurasi Mail Module","text":"<p>Konfigurasi mail module dengan konfigurasi yang kita dapatkan dari mailtrap.io</p> mail.modulu.ts<pre><code>import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { join } from 'path';\n@Module({\nimports: [\nMailerModule.forRoot({\ntransport: {\nhost: 'sandbox.smtp.mailtrap.io', //sesuaikan konfigurasi \nport: 2525,\nauth: {\nuser: '116b44e4fce785',  //sesuaikan user\npass: '0a66404e26**', //sesuaikan password \n},\n},\ndefaults: {\nfrom: '\"No Reply\" &lt;noreply@example.com&gt;',\n},\ntemplate: {\ndir: join(__dirname, 'templates'),  // template akan di ambil dari handlebar yang ada pada folder templates\nadapter: new HandlebarsAdapter(),\noptions: {\nstrict: true,\n},\n},\n}),\n],\nproviders: [MailService],\nexports: [MailService], // \ud83d\udc48 export  mailService agar bisa digunakan di luar module mail\n})\nexport class MailModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#5-membuat-template-pada-mail","title":"5. Membuat template pada mail","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#a-folder-templates","title":"a. Folder Templates","text":"<p>Langkah pertama adalah buatlah folder dengan nama templates pada folder mail seperti gambar dibawah.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#b-template-lupa-password","title":"b. Template Lupa Password","text":"mail/templates/lupa_password.hbs<pre><code>&lt;p&gt;Hey {{ name }},&lt;/p&gt;\n&lt;p&gt;Please click below to confirm your email&lt;/p&gt;\n&lt;p&gt;\n&lt;a  href=\"{{ link }}\"&gt;Klik&lt;/a&gt;\n&lt;/p&gt;\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#c-konfigurasi-nest-clijson","title":"c. Konfigurasi nest-cli.json","text":"<p>Secara default NestJs hanya mendistibuskan mengcompile file .js dan .ts pada saat build. kita lihat bahwa template menggukaan extensi .hbs. Maka kita harus tambahkan konfiguasi pada nest-cli.json  agar nestjs dapat mendistibusikan .hbs.</p> compilerOptions<pre><code>\"compilerOptions\": {\n\"assets\": [\"app/mail/templates/**/*\"],\n\"watchAssets\": true\n},\n</code></pre> <p>Tambahkan file di atas pada nest-cli.json, sehingga menjadi</p> nest-cli.json<pre><code>{\n\"$schema\": \"https://json.schemastore.org/nest-cli\",\n\"collection\": \"@nestjs/schematics\",\n\"compilerOptions\": {\n\"assets\": [\"app/mail/templates/**/*\"],\n\"watchAssets\": true\n},\n\"sourceRoot\": \"src\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#6-membuat-dto-reset-password","title":"6. Membuat DTO Reset Password","text":"<p>Membuat DTO MailResetPassword dan membuat method pada mail service</p> main.dto.ts<pre><code>export class MailResetPasswordDto {\nlink: string;\nname: string;\nemail: string;\n}\n</code></pre> mail.service.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport { MailerService } from '@nestjs-modules/mailer'; //import MailerService\nimport { MailResetPasswordDto } from './mail.dto';\n@Injectable()\nexport class MailService {\nconstructor(private mailService: MailerService) {}\nasync sendForgotPassword(payload: MailResetPasswordDto) {\nawait this.mailService.sendMail({\nto: payload.email,\nsubject: 'Lupa Password', // subject pada email\ntemplate: './lupa_password',  // template yang digunakan adalah lupa_password, kita bisa memembuat template yang lain\ncontext: {\nlink: payload.link,\nname: payload.name,\n},\n});\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#7-membuat-entity-reset-password","title":"7. Membuat Entity Reset Password","text":"<p>Kemudian kita akan membuat tabel reset_password untuk menyimpan user_id dan token dari lupa passwod.</p> <p>Buatlah file reset_password.entity.ts pada folder Auth</p> reset_password.entity.ts<pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\n} from 'typeorm';\nimport { User } from './auth.entity';\n@Entity()\nexport class ResetPassword extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@ManyToOne(() =&gt; User)  // relasikan many to one dengan table user\n@JoinColumn({ name: 'user_id' })\nuser: User;\n@Column({ nullable: true })\ntoken: string;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre> <p>Karena ada relasi dengan tabel user, maka kita akan update pada file auth.entity.ts</p> auth.entity.ts<pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\nOneToMany,\n} from 'typeorm';\nimport { ResetPassword } from './reset_password.entity';\n@Entity()\nexport class User extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: true })\navatar: string;\n@Column({ nullable: false })\nnama: string;\n@Column({ unique: true, nullable: false })\nemail: string;\n@Column({ nullable: true })\npassword: string;\n@Column({ nullable: true })\nrefresh_token: string;\n@Column({ nullable: true })\nrole: string;\n@OneToMany(() =&gt; ResetPassword, (reset) =&gt; reset.user) // buat relasi one to many dengan tabel reset password\nreset_password: ResetPassword;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#8-import-entity-reset-password-di-auth-module","title":"8. Import Entity Reset Password di auth module","text":"auth.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './auth.entity';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { jwt_config } from 'src/config/jwt.config';\nimport { JwtStrategy } from './jwt.strategy';\nimport { MailModule } from '../mail/mail.module';\nimport { ResetPassword } from './reset_password.entity';\n@Module({\nimports: [\nTypeOrmModule.forFeature([User, ResetPassword]),\nPassportModule.register({\ndefaultStrategy: 'jwt',\nproperty: 'user',\nsession: false,\n}),\nJwtModule.register({\nsecret: jwt_config.secret,\nsignOptions: {\nexpiresIn: jwt_config.expired,\n},\n}),\nMailModule, // import disini\n],\ncontrollers: [AuthController],\nproviders: [AuthService, JwtStrategy],\n})\nexport class AuthModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#9-method-forgotpassword-pada-auth-service","title":"9. Method forgotPassword pada auth service","text":"auth.service.ts<pre><code>import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\n...\nimport { MailService } from '../mail/mail.service'; // import mail service\nimport { ResetPassword } from './reset_password.entity'; // import reset password\nimport { randomBytes } from 'crypto'; // import cypto untuk membuat token dari random string\n@Injectable()\nexport class AuthService extends BaseResponse {\nconstructor(\n@InjectRepository(User) private readonly authRepository: Repository&lt;User&gt;,\n@InjectRepository(ResetPassword) private readonly resetPasswordRepository: Repository&lt;ResetPassword&gt;,  // inject repository reset password\nprivate jwtService: JwtService,\nprivate mailService: MailService,\n) {\nsuper();\n}\nasync forgotPassword(email: string): Promise&lt;ResponseSuccess&gt; {\nconst user = await this.authRepository.findOne({\nwhere: {\nemail: email,\n},\n});\nif (!user) {\nthrow new HttpException(\n'Email tidak ditemukan',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\nconst token = randomBytes(32).toString('hex'); // membuat token\nconst link = `http://localhost:5002/auth/reset-password/${user.id}/${token}`; //membuat link untuk reset password\nawait this.mailService.sendForgotPassword({\nemail: email,\nname: user.nama,\nlink: link,\n});\nconst payload = {\nuser: {\nid: user.id,\n},\ntoken: token,\n};\nawait this.resetPasswordRepository.save(payload); // menyimpan token dan id ke tabel reset password\nreturn this._success('Silahkan Cek Email');\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#10-membuat-endpoint-reset-password-pada-auth-controller","title":"10. Membuat endpoint reset password pada auth controller","text":"auth.controller.ts<pre><code>@Post('lupa-password')\nasync forgotPassowrd(@Body('email') email: string) {\nconsole.log('email', email);\nreturn this.authService.forgotPassword(email);\n}\n</code></pre> <p>Membuat endpoint reset password pada auth controller</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/3.%20lupa_password/#11-pengujian-pada-postman","title":"11. Pengujian pada Postman","text":"payload<pre><code>{\n\"email\" : \"ihsanabuhanifah@gmail.com\"\n}\n</code></pre> <p>Kemudian cek pada mailtrap apakan email berhasil masuk atau tidak</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/4.%20reset_password/","title":"5.  Fitur Reset Password","text":"<p>Sebelumnya kita sudah berhasil mengirimkan link lupa password melalui email. kemudian user akan mengganti password menggunakan link tersebut. Kemudian pada materi ini kita akan membahas bagaimana membuat endpoint untuk lupa password</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/4.%20reset_password/#1-membuat-dto-dan-validasi-untuk-reset-password","title":"1. Membuat DTO dan validasi untuk reset password","text":"<p>Membuat DTO dan validasi untuk reset password</p> auth.dto.ts<pre><code>export class ResetPasswordDto {\n@IsString()\n@MinLength(8)\nnew_password: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/4.%20reset_password/#2-membuat-service-pada-auth-service","title":"2. Membuat Service pada auth service","text":"auth.service.ts<pre><code>async resetPassword(\nuser_id: number,\ntoken: string,\npayload: ResetPasswordDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst userToken = await this.resetPasswordRepository.findOne({    //cek apakah user_id dan token yang sah pada tabel reset password\nwhere: {\ntoken: token,\nuser: {\nid: user_id,\n},\n},\n});\nif (!userToken) {\nthrow new HttpException(\n'Token tidak valid',\nHttpStatus.UNPROCESSABLE_ENTITY,  // jika tidak sah , berikan pesan token tidak valid\n);\n}\npayload.new_password = await hash(payload.new_password, 12); //hash password\nawait this.authRepository.save({  // ubah password lama dengan password baru\npassword: payload.new_password,\nid: user_id,\n});\nawait this.resetPasswordRepository.delete({ // hapus semua token pada tabel reset password yang mempunyai user_id yang dikirim, agar tidak bisa digunakan kembali\nuser: {\nid: user_id,\n},\n});\nreturn this._success('Reset Passwod Berhasil, Silahkan login ulang');\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/4.%20reset_password/#3-membuat-endpoint-reset-password","title":"3. Membuat endpoint reset password","text":"auth.controller.ts<pre><code>// const link = `http://localhost:5002/auth/reset-password/${user.id}/${token}`;\n@Post('reset-password/:user_id/:token')  // url yang dibuat pada endpont harus sama dengan ketika kita membuat link pada service forgotPassword\nasync resetPassword(\n@Param('user_id') user_id: string,\n@Param('token') token: string,\n@Body() payload: ResetPasswordDto,\n) {\nreturn this.authService.resetPassword(+user_id, token, payload);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/B.%20Authentication/4.%20reset_password/#3-pengujian-pada-postman","title":"3. Pengujian pada Postman","text":"<p>Copy link yang didapat pada email dan paste pada postman</p> <p></p> payload<pre><code>{\n\"new_password\" : \"123456789\"\n}\n</code></pre> <p>Seleteh berhasil , silakan coba login ulang dengan password baru</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/C.%20Konfigurasi/3.%20Konfigurasi/","title":"A. Global Configuration","text":"<p>Kita akan membahas dotenv, dimana file ini digunakan untuk memyimpan konfigurasi pada aplikasi kita. Kalau sebelum nya konfigurasi kita tulis secara hardcode pada koding seperti pada saat membuat konfig typeorm</p> <p>typeorm.config.ts</p> <pre><code>import { TypeOrmModuleOptions } from \"@nestjs/typeorm\";\nexport const typeOrmConfig: TypeOrmModuleOptions = {\ntype: \"mysql\",\nhost: \"localhost\",\nport: 3307, //port default 3306 lihat xampp\nusername: \"root\", // username default xampp root\npassword: \"root\", // password default xampp string kosong\ndatabase: \"belajar_nest_js\",\nentities: [\"dist/**/*.entity{.ts,.js}\"],\nsynchronize: true,\n};\n</code></pre> <p>cara di atas sangatlah tidak direkomentasikan diterapkan pada project karena konfigurasi dari database kita simpan di kodingan sehingga kurang aman dan kurang fleksibel. Solusi dari masalah ini kita bisa menggunakan file .env</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/C.%20Konfigurasi/3.%20Konfigurasi/#1-instalasi-packege-config","title":"1. Instalasi Packege Config","text":"<p>Pertama kita instalasi dulu package untuk config</p> <pre><code>npm i --save @nestjs/config\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/C.%20Konfigurasi/3.%20Konfigurasi/#2-import-module-config-pada-app-module","title":"2. Import Module Config pada app module","text":"<p>kita import pada app module sebagai global agar bisa diakses oleh semua module</p> <p>app.module.ts</p> <pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { AuthModule } from './app/auth/auth.module';\nimport { MailModule } from './app/mail/mail.module';\nimport { ConfigModule } from '@nestjs/config';\n@Module({\nimports: [\nConfigModule.forRoot({\nisGlobal: true,  // konfigurasi is global untuk semua module\n}),\nTypeOrmModule.forRoot(typeOrmConfig),\nAuthModule,\nMailModule,\n],\ncontrollers: [AppController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/C.%20Konfigurasi/3.%20Konfigurasi/#3-buat-file-env","title":"3.  Buat File .env","text":"<p>buatlah file .env</p> <p></p> <pre><code>DB_HOST = localhost\nDB_USERNAME = root\nDB_PASSWORD = root\nDB_DATABASE = belajar_nest_js\nDB_PORT = 3307\n//JWT\nJWT_SECRET = belajar_jwt\nJWT_EXPIRED = 3600\n//MAIL\nMAIL_HOST = sandbox.smtp.mailtrap.io\nMAIL_PORT = 2525\nMAIL_USER = 116b44e4fce785\nMAIL_PASS = 0a66404e****** // sesuaikan dengan mail password\nBASE_CLIENT_URL = http://localhost:5002\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/C.%20Konfigurasi/3.%20Konfigurasi/#4-implentasi","title":"4. Implentasi","text":"<p>Setelah kita membuat dotenv, selanjutnya kita akan lakuka penyesuai pada file-file barikut.</p> <p>jwt.config.ts</p> <p><pre><code>export const jwt_config = {\nsecret: process.env.JWT_SECRET,\nexpired: process.env.JWT_EXPIRED,\n};\n</code></pre> typeorm.config.ts</p> <pre><code>import { TypeOrmModuleOptions } from '@nestjs/typeorm';\nexport const typeOrmConfig: TypeOrmModuleOptions = {\ntype: 'mysql',\nhost: process.env.DB_HOST,\nport: Number(process.env.DB_PORT), //port default 3306 lihat xampp\nusername: process.env.DB_USERNAME, // username default xampp root\npassword: process.env.DB_PASSWORD, // password default xampp string kosong\ndatabase: process.env.DB_DATABASE,\nentities: ['dist/**/*.entity{.ts,.js}'],\nsynchronize: true,\n};\n</code></pre> <p>mail.module.ts</p> <pre><code>import { MailerModule } from '@nestjs-modules/mailer';\nimport { HandlebarsAdapter } from '@nestjs-modules/mailer/dist/adapters/handlebars.adapter';\nimport { Module } from '@nestjs/common';\nimport { MailService } from './mail.service';\nimport { join } from 'path';\n@Module({\nimports: [\nMailerModule.forRoot({\ntransport: {\nhost: process.env.MAIL_HOST,\nport: Number(process.env.MAIL_PORT),\nauth: {\nuser: process.env.MAIL_USER,\npass: process.env.MAIL_PASS,\n},\n},\ndefaults: {\nfrom: '\"No Reply\" &lt;noreply@example.com&gt;',\n},\ntemplate: {\ndir: join(__dirname, 'templates'),\nadapter: new HandlebarsAdapter(),\noptions: {\nstrict: true,\n},\n},\n}),\n],\nproviders: [MailService],\nexports: [MailService], // \ud83d\udc48 export for DI\n})\nexport class MailModule {}\n</code></pre> <p>auth.service.ts <pre><code>async forgotPassword(email: string): Promise&lt;ResponseSuccess&gt; {\nconst user = await this.authRepository.findOne({\nwhere: {\nemail: email,\n},\n});\nif (!user) {\nthrow new HttpException(\n'Email tidak ditemukan',\nHttpStatus.UNPROCESSABLE_ENTITY,\n);\n}\nconst token = randomBytes(32).toString('hex');\nconst link = `${process.env.BASE_CLIENT_URL}/auth/reset-password/${user.id}/${token}`; // sesuaikan client url\nawait this.mailService.sendForgotPassword({\nemail: email,\nname: user.nama,\nlink: link,\n});\nconst payload = {\nuser: {\nid: user.id,\n},\ntoken: token,\n};\nawait this.resetPasswordRepository.save(payload);\nreturn this._success('Silahkan Cek Email');\n}\n</code></pre></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/","title":"1. Tambah Kategori dan List Kategori","text":"<p>Pada materi ini, kita akan membuat endpoint untuk CRUD pada table kategori</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#1-membuat-module-controller-service","title":"1. Membuat Module, Controller, Service","text":"terminal<pre><code>npx nest g module app/kategori\nnpx nest g controller app/kategori\nnpx nest g service app/kategori\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#2-membuat-kategorientityts","title":"2. Membuat kategori.entity.ts","text":"kategori.entity.ts<pre><code>import {\nBaseEntity,\nColumn,\nEntity,\nJoinColumn,\nManyToOne,\nPrimaryGeneratedColumn,\n} from 'typeorm';\nimport { User } from '../auth/auth.entity';\n@Entity()\nexport class Kategori extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: false })\nnama_kategori: string;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'created_by' })   //buat relasi many to one  dengan table user\ncreated_by: User;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'updated_by' })  //buat relasi many to one  dengan table user\nupdated_by: User;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#3-import-entity-pada-kategori-module","title":"3. Import Entity pada kategori module","text":"app.produk.ts<pre><code>import { Module } from '@nestjs/common';\nimport { KategoriService } from './kategori.service';\nimport { KategoriController } from './kategori.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Kategori } from './kategori.entity';\n@Module({\nimports: [TypeOrmModule.forFeature([Kategori])],\nproviders: [KategoriService],\ncontrollers: [KategoriController],\n})\nexport class KategoriModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#4-membuat-dto-pada-fitur-kategori","title":"4. Membuat DTO pada fitur kategori","text":"kategori.dto.ts<pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { IsInt, IsOptional, IsString } from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nexport class KategoriDto {\n@IsInt()\nid?: number;\n@IsString()\nnama_kategori: string;\n}\nexport class CreateKategoriDto extends OmitType(KategoriDto, ['id']) {}\nexport class findAllKategori extends PageRequestDto {\n@IsString()\n@IsOptional()\nnama_kategori: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#5-endopoint-menambah-kategori-dan-menampilkan-kategori","title":"5. Endopoint Menambah Kategori dan Menampilkan Kategori","text":"<p>Pada materi ini, kita akan membuat enpoint untuk, </p> <ul> <li>Menambakan kategori (CREATE)</li> <li>Menampilkan data pada tabel kategori dengan Pagination dan filter berdasarkan nama kategori</li> </ul> kategori.service.ts<pre><code>import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Kategori } from './kategori.entity';\nimport { CreateKategoriDto, findAllKategori } from './kategori.dto';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { Like, Repository } from 'typeorm';\nimport { REQUEST } from '@nestjs/core';\n@Injectable()\nexport class KategoriService extends BaseResponse {\nconstructor(\n@InjectRepository(Kategori)\nprivate readonly kategoriRepository: Repository&lt;Kategori&gt;,\n@Inject(REQUEST) private req: any,  // inject request agar bisa mengakses req.user.id dari  JWT token pada service\n) {\nsuper();\n}\nasync create(payload: CreateKategoriDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nawait this.kategoriRepository.save({\n...payload,\ncreated_by: {\nid: this.req.user.id,\n},\n});\nreturn this._success('OK', this.req.user.user_id);\n} catch {\nthrow new HttpException('Ada Kesalahan', HttpStatus.UNPROCESSABLE_ENTITY);\n}\n}\nasync getAllCategory(query: findAllKategori): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit, nama_kategori } = query;\nconst filterQuery = {}\nif (nama_kategori) {\nfilterQuery.nama_kategori = Like(`%${nama_kategori}%`);\n}\nconst total = await this.kategoriRepository.count({\nwhere: filterQuery,\n});\nconst result = await this.kategoriRepository.find({\nwhere: filterQuery,\nrelations: ['created_by', 'updated_by'], // relasi yang aka ditampilkan saat menampilkan list kategori\nselect: {   // pilih data mana saja yang akan ditampilkan dari tabel kategori\nid: true,\nnama_kategori: true,\ncreated_by: {   \nid: true,   // pilih field  yang akan ditampilkan dari tabel user\nnama: true,\n},\nupdated_by: {\nid: true, // pilih field yang akan ditampilkan dari tabel user\nnama: true,\n},\n},\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize);\n}\n}\n</code></pre> kategori.controller.ts<pre><code>import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { KategoriService } from './kategori.service';\nimport { CreateKategoriDto, findAllKategori } from './kategori.dto';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@UseGuards(JwtGuard) //  implementasikan global guard pada semua endpont kategori memerlukan authentikasi saat request\n@Controller('kategori')\nexport class KategoriController {\nconstructor(private kategoriService: KategoriService) {}\n@Post('create')\nasync create(@Body() payload: CreateKategoriDto) {\nreturn this.kategoriService.create(payload);\n}\n@Get('list')\nasync getAllCategory(@Pagination() query: findAllKategori) {  //gunakan custom decorator yang pernah kita buat\nreturn this.kategoriService.getAllCategory(query);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#6pengujian-pada-postman","title":"6.Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#a-testing-create-kategori-pada-postman","title":"a. Testing create kategori pada postman","text":"payload<pre><code>{\n\"nama_kategori\" : \"handphone\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#b-testing-list-kategori-tanpa-filter","title":"b. Testing list kategori tanpa filter","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/1.%20index/#c-testing-list-kategori-dengan-filter-nama_kategori","title":"c. Testing list kategori dengan filter nama_kategori","text":"<p>Untuk Update, BulkCreate, Detail dam Delete Silahkan dikerjakan sebagai tugas, Semangat.</p> <p>Note</p> <p>Lihat contoh pada materi typeorm basic</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/2.%20Custom%20Decorator/","title":"2. Custom Decorator untuk Injected created_by","text":"<p>Sebelumya kita sudah berhasil menyimpan kategori ke dalam database dan berhasil menambahkan id user pada field created_by.</p> kategori.service.ts<pre><code>async create(payload: CreateKategoriDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nawait this.kategoriRepository.save({\n...payload,\ncreated_by: {    \nid: this.req.user.id,\n},\n});\nreturn this._success('OK', this.req.user.user_id);\n} catch {\nthrow new HttpException('Ada Kesalahan', HttpStatus.UNPROCESSABLE_ENTITY);\n}\n}\n</code></pre> <p>Pada kode di atas terlihat jika kita mengambil id user dari request token JWT. Sebenarnya dengan cara seperti itu tidak ada masalah, namun akan merepotkan jika membuat kode yang sama  pada setiap service pada aplikasi kita.    Pada materi ini kita akan membuat <code>custom decorator</code> agar kita tidak perlu menambahkan created_by pada payload yang akan disimpan di service.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/2.%20Custom%20Decorator/#1-membuat-custom-decorator-inject-created_by","title":"1. Membuat Custom Decorator Inject Created_By","text":"<p>Custom Decorator <code>InjectCreatedBy</code> bertujuan untuk menambahkan <code>created_by</code> pada payload yang dikirim oleh client.</p> utils/decorator/inject-created_by.decorator.ts<pre><code>import { createParamDecorator, ExecutionContext } from '@nestjs/common';\nexport const InjectCreatedBy = createParamDecorator(\n(data: any, ctx: ExecutionContext) =&gt; {\nconst req = ctx.switchToHttp().getRequest();\nreq.body.created_by = { id: req.user.id };\nreturn req.body;\n},\n);\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/2.%20Custom%20Decorator/#2-menambahkan-created_by-dan-updated_by-pada-dto","title":"2. Menambahkan created_by dan updated_by pada DTO","text":"<p>Kita tambahkan created_by dan updated_by pada KategoriDto agar ditambahkan sebagai data yand kirim oleh clinet</p> kategori.dto.ts<pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { IsInt, IsObject, IsOptional, IsString } from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nexport class KategoriDto {\n@IsInt()\nid?: number;\n@IsString()\nnama_kategori: string;\n@IsObject()\n@IsOptional()\ncreated_by: { id: number };\n@IsObject()\n@IsOptional()\nupdated_by: { id: number };\n}\nexport class CreateKategoriDto extends OmitType(KategoriDto, [\n'id',\n'updated_by',\n]) {}  // ketika create kecualikan id , dan updated_by\nexport class UpdateKategoriDto extends OmitType(KategoriDto, ['created_by']) {} \nexport class findAllKategori extends PageRequestDto {\n@IsString()\n@IsOptional()\nnama_kategori: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/2.%20Custom%20Decorator/#3-implementasikan-pada-method-create","title":"3. Implementasikan pada method create","text":"kategori.controller.ts<pre><code>import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { KategoriService } from './kategori.service';\nimport { CreateKategoriDto, findAllKategori } from './kategori.dto';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\nimport { InjectCreatedBy } from 'src/utils/decorator/inject-created_by.decorator'; //import disini\n@UseGuards(JwtGuard)\n@Controller('kategori')\nexport class KategoriController {\nconstructor(private kategoriService: KategoriService) {}\n@Post('create')\nasync create(@InjectCreatedBy() payload: CreateKategoriDto) { //ganti @Body() dengan @InjectCreatedBy()\nreturn this.kategoriService.create(payload);\n}\n@Get('list')\nasync getAllCategory(@Pagination() query: findAllKategori) {\nreturn this.kategoriService.getAllCategory(query);\n}\n}\n</code></pre> kategori.service.ts<pre><code> async create(payload: CreateKategoriDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nawait this.kategoriRepository.save(payload);  // cukup payload tanpa manipulasi object\nreturn this._success('OK', this.req.user.user_id);\n} catch {\nthrow new HttpException('Ada Kesalahan', HttpStatus.UNPROCESSABLE_ENTITY);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/2.%20Custom%20Decorator/#4pengujian-pada-postman","title":"4.Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/2.%20Custom%20Decorator/#5-cek-tabel-kategori","title":"5. Cek Tabel Kategori","text":"<p>Terlihat jika hasilnya sama seperti sebelumnya, created_by berhasil tersimpan ke database.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/3.%20Latihan/","title":"3. Latihan","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/3.%20Latihan/#1-latihan-1","title":"1. Latihan 1","text":"<p>Buatlah Endpoint detail kategori</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/3.%20Latihan/#2-latihan-2","title":"2. Latihan 2","text":"<p>Buatlah Endpoint update kategori beserta custom decorator updated_by</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/3.%20Latihan/#3-latihan-3","title":"3. Latihan 3","text":"<p>Buatlah Endpoint delete kategori </p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/3.%20Latihan/#4-latihan-4","title":"4. Latihan 4","text":"<p>Buatlah Endpoint create bulk kategori</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/D.%20Fitur%20Kategori/3.%20Latihan/#5-latihan-5","title":"5. Latihan 5","text":"<p>Buatlah Custom Decorator untuk Inject Created_by pada create bulk kategori</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/","title":"A. Tambah Produk dan List Produk","text":"<p>Pada materi ini , kita akan membuat endpoint untuk CRUD pada tabel produk</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#1-membuat-module-controller-service","title":"1. Membuat Module, Controller, Service","text":"terminal<pre><code>npx nest g module app/produk\nnpx nest g controller app/produk\nnpx nest g service app/produk\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#2-membuat-produkentityts","title":"2. Membuat produk.entity.ts","text":"produk.entity.ts<pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\n} from 'typeorm';\nimport { User } from '../auth/auth.entity';\nimport { Kategori } from '../kategori/kategori.entity';\n@Entity()\nexport class Produk extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: false })\nbarcode: string;\n@ManyToOne(() =&gt; Kategori)\n@JoinColumn({ name: 'kategori_id' })\nkategori: Kategori;\n@Column({ nullable: false })\nnama_produk: string;\n@Column({ type: 'text', nullable: false })\ndeskripsi_produk: string;\n@Column({ type: 'double', precision: 18, scale: 2, nullable: false })\nharga: number;\n@Column()\nstok: number;\n@Column({ nullable: true })\nfoto: string;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'created_by' })\ncreated_by: User;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'updated_by' })\nupdated_by: User;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#3-import-entity-pada-produk-module","title":"3. Import Entity pada produk module","text":"app.produk.ts<pre><code>import { Module } from '@nestjs/common';\nimport { ProdukService } from './produk.service';\nimport { ProdukController } from './produk.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Produk } from './produk.entity';\n@Module({\nimports: [TypeOrmModule.forFeature([Produk])],\nproviders: [ProdukService],\ncontrollers: [ProdukController],\n})\nexport class ProdukModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#4-membuat-dto-pada-fitur-produk","title":"4. Membuat DTO pada fitur produk","text":"produk.dto.ts<pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { Type } from 'class-transformer';\nimport {\nIsArray,\nIsInt,\nIsNotEmpty,\nIsNumber,\nIsOptional,\nIsString,\nLength,\nValidateNested,\n} from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nexport class ProdukDto {\n@IsInt()\nid: number;\n@IsString()\n@IsNotEmpty()\n@Length(8)\nbarcode: string;\n@IsString()\n@IsNotEmpty()\nnama_produk: string;\n@IsNumber()\n@IsNotEmpty()\nkategori_id: number;\n@IsString()\n@IsNotEmpty()\ndeskripsi_produk: string;\n@IsNotEmpty()\n@IsNumber()\nharga: number;\n@IsNotEmpty()\n@IsNumber()\nstok: number;\n@IsOptional()\n@IsString()\nfoto: string;\n}\nexport class CreateProdukDto extends OmitType(ProdukDto, ['id']) {}\nexport class CreateProdukArrayDto {\n@IsArray()\n@ValidateNested({ each: true })\n@Type(() =&gt; CreateProdukDto)\ndata: CreateProdukDto[];\n}\nexport class findAllProduk extends PageRequestDto {\n@IsString()\n@IsOptional()\nnama_produk: string;\n@IsString()\n@IsOptional()\ndeskripsi_produk: string;\n@IsOptional()\n@IsNumber()\n@Type(() =&gt; Number)\ndari_harga: number;\n@IsOptional()\n@IsNumber()\n@Type(() =&gt; Number)\nsampai_harga: number;\n@IsString()\n@IsOptional()\nkeyword: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#5-endpoint-menambah-produk-secara-bulk-dan-menampilkan-produk","title":"5. Endpoint menambah produk secara bulk dan Menampilkan Produk","text":"<p>Pada materi ini, kita akan membuat enpoint untuk,</p> <ul> <li>Menambakan produk secara bulk (CREATE)</li> <li>Menampilkan data pada tabel kategori dengan Pagination dan filter berdasarkan field   nama_produk, deskripsi_produk, range harga</li> </ul> <pre><code>import { HttpException, HttpStatus, Inject, Injectable } from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Produk } from './produk.entity';\nimport { Between, Like, Repository } from 'typeorm';\nimport { CreateProdukArrayDto, findAllProduk } from './produk.dto';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\n@Injectable()\nexport class ProdukService extends BaseResponse {\nconstructor(\n@InjectRepository(Produk)\nprivate readonly produkRepository: Repository&lt;Produk&gt;,\n@Inject(REQUEST) private req: any,\n) {\nsuper();\n}\nasync createBulk(payload: CreateProdukArrayDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nlet berhasil = 0;\nlet gagal = 0;\nawait Promise.all(\npayload.data.map(async (data) =&gt; {\nconst dataSave = {\n...data,\nkategori: {\nid: data.kategori_id,\n},\ncreated_by: {\nid: this.req.user.id,\n},\n};\ntry {\nawait this.produkRepository.save(dataSave);\nberhasil += 1;\n} catch (err) {\nconsole.log('err', err);\ngagal += 1;\n}\n}),\n);\nreturn this._success(`Berhasil menyimpan ${berhasil} dan gagal ${gagal}`);\n} catch (err) {\nconsole.log('err', err);\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\nasync findAll(query: findAllProduk): Promise&lt;ResponsePagination&gt; {\nconst {\npage,\npageSize,\nlimit,\nnama_produk,\ndari_harga,\nsampai_harga,\ndeskripsi_produk,\n} = query;\nconst filterQuery = {};\nif (deskripsi_produk) {\nfilterQuery.deskripsi_produk = Like(`%${deskripsi_produk}%`);\n}\nif (nama_produk) {\nfilterQuery.nama_produk = Like(`%${nama_produk}%`);\n}\nif (dari_harga &amp;&amp; sampai_harga) {\nfilterQuery.harga = Between(dari_harga, sampai_harga);\n}\nif (dari_harga &amp;&amp; !!sampai_harga === false) {\nfilterQuery.harga = Between(dari_harga, dari_harga);\n}\nconst total = await this.produkRepository.count({\nwhere: filterQuery,\n});\nconst result = await this.produkRepository.find({\nwhere: filterQuery,\nrelations: ['created_by', 'updated_by', 'kategori'],\nselect: {\nid: true,\nnama_produk: true,\ndeskripsi_produk: true,\nstok: true,\nharga: true,\nkategori: {\nid: true,\nnama_kategori: true,\n},\ncreated_by: {\nid: true,\nnama: true,\n},\nupdated_by: {\nid: true,\nnama: true,\n},\n},\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize);\n}\n}\n</code></pre> produk.controller.ts<pre><code>import { Body, Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { ProdukService } from './produk.service';\nimport { CreateProdukArrayDto, findAllProduk } from './produk.dto';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\n@UseGuards(JwtGuard)\n@Controller('produk')\nexport class ProdukController {\nconstructor(private produkService: ProdukService) {}\n@Post('create-bulk')\nasync createBulk(@Body() payload: CreateProdukArrayDto) {\nreturn this.produkService.createBulk(payload);\n}\n@Get('list')\nasync findAll(@Pagination() query: findAllProduk) {\nreturn this.produkService.findAll(query);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#6pengujian-pada-postman","title":"6.Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#testing-create-produk-pada-postman","title":"Testing create produk pada postman","text":"payload<pre><code>{\n\"data\": [\n{\n\"barcode\": \"12092299\",\n\"nama_produk\": \"Iphone 12\",\n\"deskripsi_produk\": \"Produk berhkualis tinggi\",\n\"harga\": 17000000.22,\n\"stok\": 12,\n\"kategori_id\": 1\n},\n{\n\"barcode\": \"12092244\",\n\"nama_produk\": \"Changhong \",\n\"deskripsi_produk\": \"Produk berhkualis tinggi\",\n\"harga\": 1000000.22,\n\"stok\": 12,\n\"kategori_id\": 2\n},\n{\n\"barcode\": \"12092249\",\n\"nama_produk\": \"Asus Oleh 12 \",\n\"deskripsi_produk\": \"Produk berhkualis tinggi\",\n\"harga\": 1500000.22,\n\"stok\": 15,\n\"kategori_id\": 2\n}\n]\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#testing-list-produk-dengan-filter-nama_produk-deskripsi_produk-dan-range-harga","title":"Testing list produk dengan filter nama_produk, deskripsi_produk dan range harga","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#7menambah-fitur-search-dengan-keyword-pada-list-produk","title":"7.Menambah fitur search dengan keyword pada list produk","text":"<p>Pada contoh sebelumnya kita sudah berhasil membuat filter berdasarkan nama field dan bisa kita komninasikan. Selanjutnya kita akan membuat fitur search pada list produk. Secara teknis fitur search akan mencari kolom yang yang pada tabel dengan pendekatan OR. </p> <p>Bagamana where OR pada TypeORM , contohnya seperti di bawah Example<pre><code>const result = await productRepository.find({\nwhere: [\n{price: LessThan(100)},\n{color: 'red'}\n]\n})\n</code></pre></p> <p>Arti pada kode diatas adalah tampilkan semua data yang memiliki price dibawah 100 atau color nya adala red. Ketika kita menggunakan logika or maka pada bagian where ditulis dengan array dan nama field dimasukan kedalam object beserta valuenya.</p> <p>Kita akan implementasikan bagaimana membuat pencarian berdasarkan keyword pada list produk.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#impementasikan-query-string-keyword","title":"Impementasikan query string keyword","text":"<p>kita akan buat logic pada method findAll di <code>produk.service.ts</code> , jika ada keyword pada query string maka where yang akan digunakan adalah where dengan logic and dan logic filter tidak digunakan.</p> produk.service.ts<pre><code>async findAll(query: findAllProduk): Promise&lt;ResponsePagination&gt; {\nconst {\npage,\npageSize,\nlimit,\nnama_produk,\ndari_harga,\nsampai_harga,\ndeskripsi_produk,\nkeyword,\n} = query;\nconst filterQuery  = {};\nconst filterKeyword = [];\nif (keyword) {\nfilterKeyword.push(\n{\nnama_produk: Like(`%${keyword}%`),\n},\n{\nharga: Like(`%${keyword}%`),\n},\n{\ndeskripsi_produk: Like(`%${keyword}%`),\n},\n);\n} else {\nif (deskripsi_produk) {\nfilterQuery.deskripsi_produk = Like(`%${deskripsi_produk}%`);\n}\nif (nama_produk) {\nfilterQuery.nama_produk = Like(`%${nama_produk}%`);\n}\nif (dari_harga &amp;&amp; sampai_harga) {\nfilterQuery.harga = Between(dari_harga, sampai_harga);\n}\nif (dari_harga &amp;&amp; !!sampai_harga === false) {\nfilterQuery.harga = Between(dari_harga, dari_harga);\n}\n}\nconst total = await this.produkRepository.count({\nwhere: keyword ? filterKeyword : filterQuery,  \n});\nconst result = await this.produkRepository.find({\nwhere: keyword ? filterKeyword : filterQuery,\nrelations: ['created_by', 'updated_by', 'kategori'],\nselect: {\nid: true,\nnama_produk: true,\ndeskripsi_produk: true,\nstok: true,\nharga: true,\nkategori: {\nid: true,\nnama_kategori: true,\n},\ncreated_by: {\nid: true,\nnama: true,\n},\nupdated_by: {\nid: true,\nnama: true,\n},\n},\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/1.%20index/#pengujian-pada-postman","title":"Pengujian pada Postman","text":"<p>Ketika keyword dikirim dengan value</p> <p></p> <p>Hasil query sesuai karena nama_produk iphone berdasarkan keyword yang dikirim</p> <p>Ketika tanpa keyword</p> <p></p> <p>Hasil query sesuai karena menampilkan nama_produk asus sesuai dengan filter yang dikirim.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/2.latihan/","title":"B. Latihan","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/2.latihan/#1-latihan-1","title":"1. Latihan 1","text":"<p>Buatlah Endpoint detail Produk</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/2.latihan/#2-latihan-2","title":"2. Latihan 2","text":"<p>Buatlah Endpoint update Produk</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/2.latihan/#3-latihan-3","title":"3. Latihan 3","text":"<p>Buatlah Endpoint delete Produk</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/2.latihan/#4-latihan-4","title":"4. Latihan 4","text":"<p>Buatlah Endpoint delete bulk Produk</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/2.latihan/#5-latihan-5","title":"5. Latihan 5","text":"<p>Tambahkan Parameter nama kategori untuk mencari produk</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/E.%20Fitur%20Produk/2.latihan/#6-latihan-6","title":"6. Latihan 6","text":"<p>Buatalah ketika menulis nama kategori pada keyword maka akan mendapatkan data yang dicari</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/A.%20single/","title":"A. Upload Satu File","text":"<p>Pada aplikasi kita membutuhkan fitur upload file seperti gambar, dokumen, dan lain-lain. Kita akan tambahkan fitur ini pada project ini. NestJs sendiri sudah menyediakan module untuk fitur ini dengan package multer. Dengan menggunakan Multer, kita dapat mengunggah file dari klien (client) ke server dengan lebih efisien. </p> <p>Note</p> <p>Gunakan <code>multipart/form-data</code> pada body request pada saat mengirimkan file.    Jika menggunakan Postman pilih <code>body</code> kemudian <code>form-data</code>.</p> <p></p> <p>Selanjutkan kita mulai membuat kode untuk menambahkan fitur ini.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/A.%20single/#1-instalasi-type-multer","title":"1. Instalasi Type Multer","text":"<p>Karena kita menggukana TypeScript, kita instalasi dahulu type/multer</p> terminal<pre><code>npm i -D @types/multer\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/A.%20single/#2buat-controller-fitur-upload","title":"2.Buat controller fitur upload","text":"<p>Pada fitur ini, kita hanya akan membaut controller tanpa module dan service</p> terminal<pre><code>npx nest g controller app/upload\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/A.%20single/#3-buat-endpoint-upload-file","title":"3. Buat endpoint upload file","text":"upload.controller.ts<pre><code>import {\nController,\nDelete,\nHttpException,\nHttpStatus,\nParam,\nPost,\nUploadedFile,\nUploadedFiles,\nUseGuards,\nUseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { ResponseSuccess } from 'src/interface/response';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { JwtGuard } from '../auth/auth.guard';\n@UseGuards(JwtGuard)\n@Controller('upload')\nexport class UploadController extends BaseResponse {\nconstructor() {\nsuper();\n}\n@UseInterceptors(\nFileInterceptor('file', {\nstorage: diskStorage({\ndestination: 'public/uploads',\nfilename: (req, file, cb) =&gt; {\nconst fileExtension = file.originalname.split('.').pop();\ncb(null, `${new Date().getTime()}.${fileExtension}`);\n},\n}),\n}),\n)\n@Post('file')\nasync uploadFile(\n@UploadedFile() file: Express.Multer.File,\n): Promise&lt;ResponseSuccess&gt; {\ntry {\nconst url = `${process.env.BASE_SERVER_URL}/uploads/${file.filename}`;\nreturn this._success('OK', {\nfile_url: url,\nfile_name: file.filename,\nfile_size: file.size,\n});\n} catch (err) {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n}\n</code></pre> <ul> <li>Decorator <code>@UseInterceptors</code> akan menerapkan <code>FileInterceptor(...)</code>  dengan paramter  <code>file</code> maka dari <code>Postman</code> nama dari field yang dikirim pada <code>form-data</code> adalah `file``.</li> </ul> <p>Note</p> <p>decorator <code>FileInterceptor</code> menerima dua argument, yaitu:</p> <ul> <li><code>fieldName</code>: nama field sesuai dengan yang dikirim dari client baik melalui Postman atau form HTML.</li> <li><code>optional</code>: objek-objek opsional yang disediakan oleh Multer melalui MulterOptions, seperti misalnya penamaan file, direktory dan lainnya.</li> </ul> <ul> <li>Folder <code>public/uploads</code> adalah folder tempat disimpan file yang di upload. </li> <li>Pada bagian <code>filename</code> , kita memberikan nama baru untuk file yang di upload dengna nama waktu ketika di upload ditambah extensi dari file yang di upload , contoh nama yang akan dibuat seperti <code>1690640378860.pdf</code></li> <li>Response yang diberikan pada client yaitu<ul> <li><code>url</code> = lokasi untuk mengakses file dari client</li> <li><code>file_name</code> = nama file yang dibuat</li> <li><code>size</code>  = ukuran dari file yang di upload</li> </ul> </li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/A.%20single/#4-pengujian-pada-postman","title":"4. Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/A.%20single/#5-hasil-upload","title":"5. Hasil Upload","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/B.%20Akses/","title":"B. Akses File Upload","text":"<p>Kita sudah berhasil mengupload file, namun file tersebut belum bisa diakses melakui http request. Silahkan coba copy url yang didapatkan  dari response ke browser.</p> <p></p> <p>Hal tersebut terjadi karena folder public belum dapat diakses melalui HTTP request. Untuk membuat folder public dapat diakses maka kita harus mejadikan public sebagai folder static</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/B.%20Akses/#1-instalasi-package","title":"1. Instalasi Package","text":"terminal<pre><code>npm install @nestjs/serve-static\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/B.%20Akses/#2-servestaticmodule-pada-app-module","title":"2. ServeStaticModule pada app module","text":"app.module.ts<pre><code>...\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n@Module({\nimports: [\nServeStaticModule.forRoot({\nrootPath: join(__dirname, '..', 'public'),\n}),\nConfigModule.forRoot({\nisGlobal: true,\n}),\nTypeOrmModule.forRoot(typeOrmConfig),\nAuthModule,\nMailModule,\nKategoriModule,\nProdukModule,\nBookModule,\n],\ncontrollers: [AppController, UploadController],\nproviders: [AppService],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/B.%20Akses/#3-pengujian-pada-browser","title":"3. Pengujian pada Browser","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/C.%20Multi_upload/","title":"C. Upload Banyak file","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/C.%20Multi_upload/#1buat-kode-multi-upload","title":"1.Buat Kode Multi Upload","text":"upload.controller.ts<pre><code>import {\nController,\nDelete,\nHttpException,\nHttpStatus,\nParam,\nPost,\nUploadedFile,\nUploadedFiles,\nUseGuards,\nUseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { ResponseSuccess } from 'src/interface/response';\nimport BaseResponse from 'src/utils/response/base.response';\nimport * as fs from 'fs';\nimport { JwtGuard } from '../auth/auth.guard';\n@UseGuards(JwtGuard)\n@Controller('upload')\nexport class UploadController extends BaseResponse {\nconstructor() {\nsuper();\n}\n@UseInterceptors(\nFilesInterceptor('files', 20, {\nstorage: diskStorage({\ndestination: 'public/uploads',\nfilename: (req, file, cb) =&gt; {\nconst fileExtension = file.originalname.split('.').pop();\ncb(null, `${new Date().getTime()}.${fileExtension}`);\n},\n}),\n}),\n)\n@Post('files')\nasync uploadFileMulti(\n@UploadedFiles() files: Express.Multer.File[],\n): Promise&lt;ResponseSuccess&gt; {\ntry {\nconst file_response: Array&lt;{\nfile_url: string;\nfile_name: string;\nfile_size: number;\n}&gt; = [];\nfiles.forEach((file) =&gt; {\nconst url = `${process.env.BASE_SERVER_URL}/uploads/${file.filename}`;\nfile_response.push({\nfile_url: url,\nfile_name: file.filename,\nfile_size: file.size,\n});\n});\nreturn this._success('OK', {\nfile: file_response,\n});\n} catch (err) {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/C.%20Multi_upload/#2-pengujian-pada-postman","title":"2. Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/D.%20Delete_File/","title":"D. Delete File","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/D.%20Delete_File/#1buat-delete-file","title":"1.Buat Delete File","text":"upload.controller.ts<pre><code>import {\nController,\nDelete,\nHttpException,\nHttpStatus,\nParam,\nPost,\nUploadedFile,\nUploadedFiles,\nUseGuards,\nUseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor, FilesInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\nimport { ResponseSuccess } from 'src/interface/response';\nimport BaseResponse from 'src/utils/response/base.response';\nimport * as fs from 'fs';\nimport { JwtGuard } from '../auth/auth.guard';\n@UseGuards(JwtGuard)\n@Controller('upload')\nexport class UploadController extends BaseResponse {\nconstructor() {\nsuper();\n}\n@Delete('file/delete/:filename')\nasync DeleteFile(\n@Param('filename') filename: string,\n): Promise&lt;ResponseSuccess&gt; {\ntry {\nconst filePath = `public/uploads/${filename}`;\nfs.unlinkSync(filePath);\nreturn this._success('Berhasil menghapus File');\n} catch (err) {\nthrow new HttpException('File not Found', HttpStatus.NOT_FOUND);\n}\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/D.%20Delete_File/#2-pengujian-pada-postman","title":"2. Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/E.%20Latihan/","title":"E. Latihan","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/E.%20Latihan/#1-latihan-1","title":"1. Latihan 1","text":"<p>Buatlah Validasi Upload hanya upload file gambar dan pdf pada single file</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/E.%20Latihan/#2-latihan-2","title":"2. Latihan 2","text":"<p>Buatlah Validasi Upload hanya upload file yang berukuran kurang dari 2MB yang bisa diupload pada single file</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/E.%20Latihan/#3-latihan-3","title":"3. Latihan 3","text":"<p>Buatlah Validasi Upload hanya upload file gambar dan pdf pada array file</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/F.%20File%20Upload/E.%20Latihan/#4-latihan-4","title":"4. Latihan 4","text":"<p>Buatlah Validasi Upload hanya upload file yang berukuran kurang dari 2MB yang bisa diupload pada array file</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/","title":"A. Tambah Konsumen dan List Konsumen","text":"<p>Pada materi ini , kita akan membuat endpoint untuk CRUD pada tabel konsumen</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#1-membuat-module-controller-service","title":"1. Membuat Module, Controller, Service","text":"terminal<pre><code>npx nest g module app/konsumen\nnpx nest g controller app/konsumen\nnpx nest g service app/konsumen\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#2-membuat-konsumenentityts","title":"2. Membuat konsumen.entity.ts","text":"konsumen.entity.ts<pre><code>import { User } from 'src/app/auth/auth.entity';\nimport {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\n} from 'typeorm';\n@Entity()\nexport class Konsumen extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: false })\nnama_konsumen: string;\n@Column({ type: 'text', nullable: false })\nalamat_konsumen: string;\n@Column({ unique: true, nullable: false })\nemail: string;\n@Column({ nullable: false })\nnomor_handphone: string;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'created_by' })\ncreated_by: User;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'updated_by' })\nupdated_by: User;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#3-import-entity-pada-konsumen-module","title":"3. Import Entity pada konsumen module","text":"app.konsumen.ts<pre><code>import { Module } from '@nestjs/common';\nimport { KonsumenController } from './konsumen.controller';\nimport { KonsumenService } from './konsumen.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Konsumen } from './konsumen.entity';\n@Module({\nimports: [TypeOrmModule.forFeature([Konsumen])],\ncontrollers: [KonsumenController],\nproviders: [KonsumenService],\n})\nexport class KonsumenModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#4-membuat-dto-pada-fitur-konsumen","title":"4. Membuat DTO pada fitur konsumen","text":"konsumen.dto.ts<pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { Type } from 'class-transformer';\nimport {\nIsArray,\nIsEmail,\nIsInt,\nIsNotEmpty,\nIsObject,\nIsOptional,\nIsString,\nMaxLength,\nMinLength,\nValidateNested,\n} from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nimport { IsExists } from 'src/utils/validator/exist.validator';\nimport { Konsumen } from './konsumen.entity';\nexport class KonsumenDto {\n@IsInt()\nid: number;\n@IsString()\n@IsNotEmpty()\nnama_konsumen: string;\n@IsString()\n@IsNotEmpty()\nalamat_konsumen: string;\n@IsString()\n@IsEmail()\n@IsExists([Konsumen, 'email'])\nemail: string;\n@IsString()\n@IsNotEmpty()\n@MaxLength(13)\n@MinLength(9)\nnomor_handphone: string;\n@IsObject()\n@IsOptional()\nupdated_by: { id: number };\n@IsObject()\n@IsOptional()\ncreated_by: { id: number };\n}\nexport class CreateKonsumenDto extends OmitType(KonsumenDto, [\n'id',\n'updated_by',\n]) {}\nexport class UpdateKonsumenDto extends OmitType(KonsumenDto, ['created_by']) {}\nexport class CreateKonsumenArrayDto {\n@IsArray()\n@ValidateNested({ each: true })\n@Type(() =&gt; CreateKonsumenDto)\ndata: CreateKonsumenDto[];\n}\nexport class findAllKonsumenDto extends PageRequestDto {\n@IsString()\n@IsOptional()\nnama_Konsumen: string;\n@IsString()\n@IsOptional()\nemail: string;\n@IsString()\n@IsOptional()\nnomor_handphone: string;\n@IsString()\n@IsOptional()\nkeyword: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#5-endpoint-menambah-konsumen-secara-dan-menampilkan-produk","title":"5. Endpoint menambah konsumen secara dan Menampilkan Produk","text":"<p>Pada materi ini, kita akan membuat enpoint untuk,</p> <ul> <li>Menambakan konsumen baru pada tabel</li> <li>Menampilkan daftar konsumen yang terdaftar dengan Pagination dan memberikan fitur searching dengan param keyword</li> </ul> konsumen.service.ts<pre><code>import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Konsumen } from './konsumen.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Like, Repository } from 'typeorm';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateKonsumenDto, findAllKonsumenDto } from './konsumen.dto';\n@Injectable()\nexport class KonsumenService extends BaseResponse {\nconstructor(\n@InjectRepository(Konsumen)\nprivate readonly konsumenRepository: Repository&lt;Konsumen&gt;,\n) {\nsuper();\n}\nasync create(payload: CreateKonsumenDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nawait this.konsumenRepository.save(payload);\nreturn this._success('OK');\n} catch (err) {\nconsole.log('err', err);\nthrow new HttpException('Ada Kesalahan', HttpStatus.UNPROCESSABLE_ENTITY);\n}\n}\nasync findAll(query: findAllKonsumenDto): Promise&lt;ResponsePagination&gt; {\nconst { page, pageSize, limit, keyword } = query;\nconst filterKeyword = [];\nif (keyword) {\nfilterKeyword.push(\n{\nnama_konsumen: Like(`%${keyword}%`),\n},\n{\nalamat_konsumen: Like(`%${keyword}%`),\n},\n{\nemail: Like(`%${keyword}%`),\n},\n{\nnomor_handphone: Like(`%${keyword}%`),\n},\n);\n}\nconst total = await this.konsumenRepository.count({\nwhere: filterKeyword,\n});\nconst result = await this.konsumenRepository.find({\nwhere: filterKeyword,\nrelations: ['created_by', 'updated_by'],\nselect: {\nid: true,\nnama_konsumen: true,\nemail: true,\nnomor_handphone: true,\nalamat_konsumen: true,\ncreated_by: {\nid: true,\nnama: true,\n},\nupdated_by: {\nid: true,\nnama: true,\n},\n},\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize);\n}\n}\n</code></pre> konsumen.controller.ts<pre><code>import { Controller, Get, Post, Query, UseGuards } from '@nestjs/common';\nimport { KonsumenService } from './konsumen.service';\nimport { InjectCreatedBy } from 'src/utils/decorator/inject-created_by.decorator'; //import disini\nimport { CreateKonsumenDto, findAllKonsumenDto } from './konsumen.dto';\nimport { JwtGuard } from 'src/app/auth/auth.guard';\nimport { query } from 'express';\n@UseGuards(JwtGuard)\n@Controller('konsumen')\nexport class KonsumenController {\nconstructor(private konsumenService: KonsumenService) {}\n@Post('create')\nasync create(@InjectCreatedBy() payload: CreateKonsumenDto) {\nreturn this.konsumenService.create(payload);\n}\n@Get('list')\nasync findAll(@Query() query: findAllKonsumenDto) {\nreturn this.konsumenService.findAll(query);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#6pengujian-pada-postman","title":"6.Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#a-testing-create-konsumen-pada-postman","title":"a. Testing create konsumen pada postman","text":"payload<pre><code>{\n\"nama_konsumen\" : \"Nafisa Amatullah\",\n\"alamat_konsumen\" : \"Kp. Kebonjati Rt. 002\",\n\"email\" : \"nafisaamatullah@gmail.com\",\n\"nomor_handphone\" : \"0895320050324\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/A.%20konsumen/#b-testing-list-konsumen","title":"b. Testing list konsumen","text":"<p>Pada list di konsumen , kita akan tambahkan  fitur pencarian berdasrkan nama konsumen, alamat, email, dan nomor handphone</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/","title":"B. Custom Decorator Validation","text":"<p>Pada materi sebelumnya kita sudah berhasil untuk berhasil menambahkna data, namun ketika kita menambahkan data dengan <code>email</code> yang sama pada tabel konsumen, maka akan muncul pesan <code>Ada Kesalahan</code> seperti pada gambar di bawah.</p> <p></p> <p>Kalau tersebut dikarenkan email bersifat unique , sehingga tidak menerika email yang sama pada field email. Maka terlihat pada <code>log</code> di <code>terminal</code> muncul pesan seperti berikut.</p> <p></p> <p>Untuk mengtasi hal tersebut , kita kita gunakan 2 pendekatan,</p> <p>Pertama</p> <p>kita buat pengecekan ke data ke tabel  di service. Hal ini pernah kita lakukan pada kode register di <code>auth.service.ts</code></p> auth.service.ts<pre><code>async register(payload: RegisterDto): Promise&lt;ResponseSuccess&gt; {\nconst checkUserExists = await this.authRepository.findOne({\nwhere: {\nemail: payload.email,\n},\n});\nif (checkUserExists) {\nthrow new HttpException(\"User already registered\", HttpStatus.FOUND);\n}\npayload.password = await hash(payload.password, 12); //hash password\nawait this.authRepository.save(payload);\nreturn this._success(\"Register Berhasil\");\n}\n</code></pre> <p>Namun kalau kita mengguanakan pendekatan ini , maka jika  ada <code>field</code> yang unique kita harus buat koding pengecekan di setiap <code>service</code> pada fitur.</p> <p>Kedua</p> <p>Pada pendekatan kedua ini kita akan membuat <code>Custom Decorator</code>  yang akan kita implementasikan di Entity seperti koding berikut.</p> konsumen.dto.ts<pre><code>export class KonsumenDto {\n@IsInt()\nid: number;\n@IsString()\n@IsNotEmpty()\nnama_konsumen: string;\n@IsString()\n@IsNotEmpty()\nalamat_konsumen: string;\n@IsString()\n@IsEmail()\n@IsExists([Konsumen, 'email'])\nemail: string;\n@IsString()\n@IsNotEmpty()\n@MaxLength(13)\n@MinLength(9)\nnomor_handphone: string;\n@IsObject()\n@IsOptional()\nupdated_by: { id: number };\n@IsObject()\n@IsOptional()\ncreated_by: { id: number };\n}\n</code></pre> <p>Dengan pendekatan ini, kita cukup membuat satu Custom Validator yang bisa kita gunakan pada setiap entity.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#1membuat-custom-decorator","title":"1.Membuat Custom Decorator","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#a-ubah-maints","title":"a. ubah main.ts","text":"<p>Untuk membut Custom Validator langkah pertama kita tambahkan <code>app.useGlobalPipes(new ValidationPipe({ transform: true }));</code> pada <code>main.ts</code> . </p> main.ts<pre><code>import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\nimport { useContainer } from 'class-validator';\nasync function bootstrap() {\nconst app = await NestFactory.create(AppModule);\napp.useGlobalPipes(\nnew ValidationPipe({\nwhitelist: true,\nforbidUnknownValues: true,\ntransform: true,\nvalidateCustomDecorators: true,\ntransformOptions: {\nenableImplicitConversion: true,\n},\n}),\n);\nuseContainer(app.select(AppModule), { fallbackOnErrors: true });\nawait app.listen(5002);\n}\nbootstrap();\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#b-buat-file-uniquevalidatorts","title":"b. Buat File <code>unique.validator.ts</code>","text":"<p>kita akan membuat file <code>unique.validator.ts</code> pada folder <code>utils/validator/unique.validator.ts</code></p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#cvalidatorconstraint","title":"c.<code>ValidatorConstraint</code>","text":"<p>Selanjutnya kita akan membaut <code>ValidatorConstraint</code> dan juga <code>class</code> yang berisi logic untuk mengecek suatu data , apakah sudah ada di tabel atau belum.</p> unique.validator.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport {\nValidationArguments,\nValidationOptions,\nValidatorConstraint,\nValidatorConstraintInterface,\nregisterDecorator,\n} from 'class-validator';\nimport { EntityManager } from 'typeorm';\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class UniqueValidator implements ValidatorConstraintInterface {\nconstructor(private readonly entityManager: EntityManager) {}\nasync validate(value: any, arg?: ValidationArguments): Promise&lt;boolean&gt; {\nconst find = { [arg.constraints[1]]: arg.value };\nconst user = await this.entityManager\n.getRepository(arg.constraints[0])\n.findOne({\nwhere: find,\n});\nconsole.log('er', user);\nif (user === null) {\nreturn true;\n} else {\nreturn false;\n}\n}\ndefaultMessage(args: ValidationArguments) {\nreturn `${args.constraints[1]} sudah digunakan`;\n}\n}\n</code></pre> <p>Pada kode di atas, kita implements class <code>ValidatorConstraintInterface</code> yang memiliki dua method yaitu <code>validate</code> dan <code>defaultMessage</code></p> <p>method Validate</p> <p>Method <code>validate</code> adalah meethod untuk mengecek apakah suatu data pada tabel dengen kriteria tertentu. Jika data tidak ada , maka memiliki <code>return true</code> yang artinya request akan diteruskan ke service, namun <code>return false</code> maka akan di berikan response seperti pada method <code>defaultMessage</code></p> <p>method defaultMessage</p> <p>Method ini memiliki <code>return</code> berupa <code>message</code> kepada <code>client</code> jika ditemukan data yang sama pada tabel dengan kriteria yang direquest.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#cregisterdecorator","title":"c.<code>registerDecorator</code>","text":"<p>untuk membuat <code>custom decorator</code> kita harus mendaftarkan decorator pada <code>funtion registerDecorator</code> dari <code>class validator</code>. Berikut kode lengkah nya.</p> unique.validator.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport {\nValidationArguments,\nValidationOptions,\nValidatorConstraint,\nValidatorConstraintInterface,\nregisterDecorator,\n} from 'class-validator';\nimport { EntityManager } from 'typeorm';\n@ValidatorConstraint({ async: true })\n@Injectable()\nexport class UniqueValidator implements ValidatorConstraintInterface {\nconstructor(private readonly entityManager: EntityManager) {}\nasync validate(value: any, arg?: ValidationArguments): Promise&lt;boolean&gt; {\nconst find = { [arg.constraints[1]]: arg.value };\nconst user = await this.entityManager\n.getRepository(arg.constraints[0])\n.findOne({\nwhere: find,\n});\nif (user === null) {\nreturn true;\n} else {\nreturn false;\n}\n}\ndefaultMessage(args: ValidationArguments) {\nreturn `${args.constraints[1]} sudah digunakan`;\n}\n}\nexport function IsUnique(options: any, validationOptions?: ValidationOptions) {\nreturn function (object: any, propertyName: string) {\nregisterDecorator({\nname: 'IsUnique',\ntarget: object.constructor,\nconstraints: options,\npropertyName: propertyName,\noptions: validationOptions,\nvalidator: UniqueValidator,\nasync: true,\n});\n};\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#d-daftarkan-di-app-module","title":"d. Daftarkan di App Module","text":"<p><code>class uniqueValidator</code> merupakan class yang dengan decorator <code>@Injectable()</code>  maka ketika ingin menggunakan file ini , kita harus deklarasikan di dalam <code>property provider</code> pada file <code>app.module.ts</code> seperti berikut.</p> <pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { AuthModule } from './app/auth/auth.module';\nimport { MailModule } from './app/mail/mail.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { KategoriModule } from './app/kategori/kategori.module';\nimport { ProdukModule } from './app/produk/produk.module';\nimport { BookModule } from './book/book.module';\nimport { UploadController } from './app/upload/upload.controller';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { KonsumenModule } from './app/konsumen/konsumen.module';\nimport { UniqueValidator } from './utils/validator/unique.validator';\n@Module({\nimports: [\nServeStaticModule.forRoot({\nrootPath: join(__dirname, '..', 'public'),\n}),\nConfigModule.forRoot({\nisGlobal: true,\n}),\nTypeOrmModule.forRoot(typeOrmConfig),\nAuthModule,\nMailModule,\nKategoriModule,\nProdukModule,\nBookModule,\nKonsumenModule,\n],\ncontrollers: [AppController, UploadController],\nproviders: [AppService, UniqueValidator],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#e-implementasi-pada-dto","title":"e. Implementasi pada DTO","text":"<p>Pada contoh ini, kita akan implementasikan pada <code>konsumen.dto.ts</code></p> konsumen.dto.ts<pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { Type } from 'class-transformer';\nimport {\nIsArray,\nIsEmail,\nIsInt,\nIsNotEmpty,\nIsObject,\nIsOptional,\nIsString,\nMaxLength,\nMinLength,\nValidateNested,\n} from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nimport { IsUnique } from 'src/utils/validator/unique.validator';\nimport { Konsumen } from './konsumen.entity';\nexport class KonsumenDto {\n@IsInt()\nid: number;\n@IsString()\n@IsNotEmpty()\nnama_konsumen: string;\n@IsString()\n@IsNotEmpty()\nalamat_konsumen: string;\n@IsString()\n@IsEmail()\n@IsUnique([Konsumen, 'email'])\nemail: string;\n@IsString()\n@IsNotEmpty()\n@MaxLength(13)\n@MinLength(9)\nnomor_handphone: string;\n@IsObject()\n@IsOptional()\nupdated_by: { id: number };\n@IsObject()\n@IsOptional()\ncreated_by: { id: number };\n}\n</code></pre> <p>Pada Kode di atas,  <code>decorator IsUnique()</code> yang telah kita dibuat akan mengirimkan <code>entity Konsumen</code> sebagai  tabel yang akan di cek oleh <code>IsUnique</code>  dan <code>field email</code> sebagai field yang akan di cek oleh <code>IsUnique</code>. </p> <p><code>Decorator IsUnique()</code> ini dapat digunakan pada semua DTO pada project kita. Tinggal menyesuaikan  <code>entity</code> dan nama field nya. </p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/B.%20CustomValidator/#2-pengujian-pada-postman","title":"2. Pengujian pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/G.%20Fitur%20Konsumen/C.%20Tugas/","title":"C. Latihan","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/","title":"1. Membuat Order dan List Order","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#1-membuat-module-controller-service-untuk-order-dan-detail_order","title":"1. Membuat Module, Controller, Service untuk order dan detail_order","text":"terminal<pre><code>npx nest g module app/order\nnpx nest g controller app/order\nnpx nest g service app/order\nnpx nest g module app/order_detail\nnpx nest g controller app/order_detail\nnpx nest g service app/order_detail\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#2-membuat-entity-order","title":"2. Membuat Entity order","text":"order.entity.ts<pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\nOneToMany,\n} from 'typeorm';\nimport { User } from '../auth/auth.entity';\nimport { Konsumen } from '../konsumen/konsumen.entity';\nimport { OrderDetail } from '../order_detail/detail_order.entity';\nexport enum Status {\nBAYAR = 'bayar',\nBELUM = 'belum bayar',\n}\n@Entity()\nexport class Order extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: false })\nnomor_order: string;\n@Column({ nullable: false })\ntanggal_order: Date;\n@Column({\ntype: 'enum',\nenum: Status,\ndefault: Status.BELUM,\n})\nstatus: Status;\n@Column({ type: 'double', precision: 18, scale: 2, nullable: false })\ntotal_bayar: number;\n@ManyToOne(() =&gt; Konsumen, (v) =&gt; v.order, { onDelete: 'CASCADE' })\n@JoinColumn({ name: 'konsumen_id' })\nkonsumen: Konsumen;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'created_by' })\ncreated_by: User;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'updated_by' })\nupdated_by: User;\n@OneToMany(() =&gt; OrderDetail, (v) =&gt; v.order, {\nonDelete: 'CASCADE',\ncascade: ['insert', 'update'],\n})\norder_detail: OrderDetail[];\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre> <p>Note</p> <p><code>@OneToMany(() =&gt; OrderDetail, (v) =&gt; v.order, {onDelete: 'CASCADE' cascade: ['insert', 'update'],})</code></p> <p>Pada kode di atas, kita membuat relasi pada tabel order detail dengan menambkahkan </p> <ul> <li><code>onDelete: 'CASCADE'</code>  :  ketika data di order di hapus , maka semua data yang adda di order_detail yang berelasi akan ikut di hapus</li> <li><code>cascade: ['insert', 'update']</code> : ketika insert dan update maka order detail juga akan dipebaharui. </li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#3-membuat-entity-detail_order","title":"3. Membuat Entity detail_order","text":"order_detail.entity.ts<pre><code>import {\nEntity,\nBaseEntity,\nPrimaryGeneratedColumn,\nColumn,\nManyToOne,\nJoinColumn,\n} from 'typeorm';\nimport { User } from '../auth/auth.entity';\nimport { Produk } from '../produk/produk.entity';\nimport { Order } from '../order/order.entity';\n@Entity()\nexport class OrderDetail extends BaseEntity {\n@PrimaryGeneratedColumn()\nid: number;\n@Column({ nullable: false })\njumlah: number;\n@ManyToOne(() =&gt; Produk, (v) =&gt; v.order_detail, { onDelete: 'CASCADE' })\n@JoinColumn({ name: 'produk_id' })\nproduk: Produk;\n@ManyToOne(() =&gt; Order, (v) =&gt; v.order_detail, { onDelete: 'CASCADE' })\n@JoinColumn({ name: 'order_id' })\norder: Order;\n@ManyToOne(() =&gt; User)\n@JoinColumn({ name: 'created_by' })\ncreated_by: User;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\ncreated_at: Date;\n@Column({ type: 'datetime', default: () =&gt; 'CURRENT_TIMESTAMP' })\nupdated_at: Date;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#4-membuat-dto-pada-order","title":"4. Membuat DTO pada order","text":"order.dto.ts<pre><code>import { OmitType, PartialType } from '@nestjs/mapped-types';\nimport { Type } from 'class-transformer';\nimport {\nIsArray,\nIsInt,\nIsNotEmpty,\nIsObject,\nIsOptional,\nIsString,\nValidateNested,\nIsIn,\nIsNumber,\nIsDate,\n} from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nimport { Status } from './order.entity';\nimport { OrderDetailDto } from '../order_detail/detail_order.dto';\nexport class OrderDto {\n@IsInt()\nid: number;\n@IsString()\n@IsOptional()\nnomor_order: string;\n@IsDate()\n@IsNotEmpty()\ntanggal_order: Date;\n@IsString()\n@IsNotEmpty()\n@IsIn([Status.BAYAR, Status.BELUM])\nstatus: Status;\n@IsNumber()\n@IsNotEmpty()\ntotal_bayar: number;\n@IsNumber()\n@IsNotEmpty()\nkonsumen_id: number;\n@IsObject()\n@IsOptional()\nupdated_by: { id: number };\n@IsObject()\n@IsOptional()\ncreated_by: { id: number };\n@IsArray()\n@ValidateNested({ each: true })\n@Type(() =&gt; OrderDetailDto)\norder_detail: OrderDetailDto[];\n}\nexport class CreateOrderDto extends OmitType(OrderDto, ['id', 'updated_by']) {}\nexport class UpdateOrderDto extends PartialType(OrderDto) {\n@IsInt()\n@IsNotEmpty()\nid: number;\n}\nexport class CreateOrderArrayDto {\n@IsArray()\n@ValidateNested({ each: true })\n@Type(() =&gt; CreateOrderDto)\ndata: CreateOrderDto[];\n}\nexport class findAllOrderDto extends PageRequestDto {\n@IsString()\n@IsOptional()\nnomor_order: string;\n@IsString()\n@IsOptional()\nnama_konsumen: string;\n@IsString()\n@IsOptional()\ndari_order_tanggal: Date;\n@IsString()\n@IsOptional()\nsampai_order_tanggal: Date;\n@IsOptional()\n@IsNumber()\n@Type(() =&gt; Number)\ndari_total_bayar: number;\n@IsOptional()\n@IsNumber()\n@Type(() =&gt; Number)\nsampai_total_bayar: number;\n@IsString()\n@IsOptional()\nstatus: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#5-membuat-dto-pada-detail_order","title":"5. Membuat DTO pada detail_order","text":"order_detail.dto.ts<pre><code>import { OmitType } from '@nestjs/mapped-types';\nimport { IsInt, IsObject, IsOptional, IsNumber } from 'class-validator';\nexport class OrderDetailDto {\n@IsInt()\n@IsOptional()\nid?: number;\n@IsNumber()\njumlah: number;\n@IsObject()\nproduk: { id: number };\n@IsObject()\n@IsOptional()\nupdated_by: { id: number };\n@IsObject()\n@IsOptional()\ncreated_by: { id: number };\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#6-membuat-endpoint-create-order","title":"6. Membuat Endpoint create order","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#service-create-order","title":"Service create order","text":"order.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInject,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Between, Like, Repository } from 'typeorm';\nimport { Order } from './order.entity';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Workbook } from 'exceljs';\nimport { Response } from 'express';\n@Injectable()\nexport class OrderService extends BaseResponse {\nconstructor(\n@InjectRepository(Order)\nprivate readonly orderRepository: Repository&lt;Order&gt;,\n@Inject(REQUEST) private req: any,\n) {\nsuper();\n}\ngenerateInvoice(): string {\nreturn `INV` + new Date().getTime();\n}\nasync createOrder(payload: CreateOrderDto): Promise&lt;ResponseSuccess&gt; {\ntry {\nconst invoice = this.generateInvoice();\npayload.nomor_order = invoice;\npayload.order_detail &amp;&amp;\npayload.order_detail.forEach((item) =&gt; {\nitem.created_by = this.req.user.id;\n});\nawait this.orderRepository.save({\n...payload,\nkonsumen: {\nid: payload.konsumen_id,\n},\n});\nreturn this._success('OK');\n} catch (err) {\nconsole.log('err', err);\nthrow new HttpException('Ada Kesalahan', HttpStatus.UNPROCESSABLE_ENTITY);\n}\n}  \n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#controller-create-order","title":"Controller create order","text":"order.controller.ts<pre><code>import {\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nRes,\nUseGuards,\n} from '@nestjs/common';\nimport { OrderService } from './order.service';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { InjectCreatedBy } from 'src/utils/decorator/inject-created_by.decorator';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\nimport { InjectUpdatedBy } from 'src/utils/decorator/inject-updated_by.decorator';\nimport { Response } from 'express';\n@UseGuards(JwtGuard)\n@Controller('order')\nexport class OrderController {\nconstructor(private readonly orderService: OrderService) {}\n@Post('tambah')\nasync createOrder(@InjectCreatedBy() payload: CreateOrderDto) {\nreturn this.orderService.createOrder(payload);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#pengujian-di-postman","title":"Pengujian di Postman","text":"payload<pre><code> {\n\"tanggal_order\" : \"2023-09-01\",\n\"status\" : \"belum bayar\",\n\"total_bayar\" : 200000,\n\"konsumen_id\" : 1,\n\"order_detail\" : [\n{\n\"jumlah\" : 10,\n\"produk\" : {\n\"id\" : 1\n}\n},\n{\n\"jumlah\" : 10,\n\"produk\" : {\n\"id\" : 3\n}\n}\n]\n}\n</code></pre> <p>Setelah success silahkan cek di tabel order dan tabel detail_order</p> <p>tabel order</p> <p></p> <p>tabel order_detail</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#7-membuat-endpoint-list-order","title":"7. Membuat Endpoint list order","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#service-list-order","title":"Service list order","text":"order.service.ts<pre><code>async findAll(query: findAllOrderDto): Promise&lt;ResponsePagination&gt; {\nconst {\npage,\npageSize,\nlimit,\nnomor_order,\ndari_order_tanggal,\nsampai_order_tanggal,\nstatus,\ndari_total_bayar,\nsampai_total_bayar,\nnama_konsumen,\n} = query;\nconst filterQuery: any = [];\nif (nomor_order) {\nfilterQuery.nomor_order = Like(`%${nomor_order}%`);\n}\nif (nama_konsumen) {\nfilterQuery.konsumen = {\nnama_konsumen: Like(`%${nama_konsumen}%`),\n};\n}\nif (status) {\nfilterQuery.status = Like(`%${status}%`);\n}\nif (dari_total_bayar &amp;&amp; sampai_total_bayar) {\nfilterQuery.total_bayar = Between(dari_total_bayar, sampai_total_bayar);\n}\nif (dari_total_bayar &amp;&amp; !!sampai_total_bayar === false) {\nfilterQuery.total_bayar = Between(dari_total_bayar, dari_total_bayar);\n}\nif (dari_order_tanggal &amp;&amp; sampai_order_tanggal) {\nfilterQuery.tanggal_order = Between(\ndari_order_tanggal,\nsampai_order_tanggal,\n);\n}\nif (dari_order_tanggal &amp;&amp; !!sampai_order_tanggal === false) {\nfilterQuery.tanggal_order = Between(\ndari_order_tanggal,\nsampai_order_tanggal,\n);\n}\nconst total = await this.orderRepository.count({\nwhere: filterQuery,\n});\nconst result = await this.orderRepository.find({\nwhere: filterQuery,\nrelations: [\n'created_by',\n'konsumen',\n'order_detail',\n'order_detail.produk',\n],\nselect: {\nid: true,\nnomor_order: true,\nstatus: true,\ntotal_bayar: true,\ntanggal_order: true,\nkonsumen: {\nid: true,\nnama_konsumen: true,\n},\ncreated_by: {\nid: true,\nnama: true,\n},\norder_detail: {\nid: true,\njumlah: true,\nproduk: {\nnama_produk: true,\n},\n},\n},\nskip: limit,\ntake: pageSize,\n});\nreturn this._pagination('OK', result, total, page, pageSize);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/1.order/#controller-list-order","title":"Controller list order","text":"order.controller.ts<pre><code>@Get('list')\nasync listOrder(@Pagination() query: findAllOrderDto) {\nreturn this.orderService.findAll(query);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/","title":"2. Membuat  Detail, Update Order dan Delete Order","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#1-membuat-endpoint-detail-order","title":"1. Membuat Endpoint Detail order","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#service-detail-order","title":"Service detail order","text":"order.service.ts<pre><code>async findById(id: number): Promise&lt;ResponseSuccess&gt; {\nconst result = await this.orderRepository.findOne({\nwhere: {\nid: id,\n},\nrelations: [\n'created_by',\n'konsumen',\n'order_detail',\n'order_detail.produk',\n],\nselect: {\nid: true,\nnomor_order: true,\nstatus: true,\ntotal_bayar: true,\ntanggal_order: true,\nkonsumen: {\nid: true,\nnama_konsumen: true,\n},\ncreated_by: {\nid: true,\nnama: true,\n},\norder_detail: {\nid: true,\njumlah: true,\nproduk: {\nid: true,\nnama_produk: true,\nharga: true,\n},\n},\n},\n});\nreturn this._success('OK', result);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#controller-detail-order","title":"Controller detail order","text":"service.controller.ts<pre><code> @Get('detail/:id')\nasync detailOrder(@Param('id') id: string) {\nreturn this.orderService.findById(+id);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#pengujian-pada-postman","title":"Pengujian Pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#2-membuat-endpoint-update-order","title":"2. Membuat Endpoint update order","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#service-update-order","title":"Service update order","text":"order.service.ts<pre><code>async updateOrder(\nid: number,\npayload: UpdateOrderDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.orderRepository.findOne({\nwhere: {\nid: id,\n},\n});\nif (!check) {\nthrow new HttpException('Data tidak ditemukan', HttpStatus.NOT_FOUND);\n}\npayload.order_detail &amp;&amp;\npayload.order_detail.forEach((item) =&gt; {\nitem.created_by = this.req.user.id;\n});\nconst order = await this.orderRepository.save({ ...payload, id: id });\nreturn this._success('OK', order);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#controller-update-order","title":"Controller update order","text":"order.controller.ts<pre><code>@Put('update/:id')\nasync updateOrder(\n@Param('id') id: number,\n@InjectUpdatedBy() payload: UpdateOrderDto,\n) {\nreturn this.orderService.updateOrder(+id, payload);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#pengujian-pada-postman_1","title":"Pengujian Pada Postman","text":"payload<pre><code>{\n\"id\": 29,\n\"nomor_order\": \"INV1691115536547\",\n\"tanggal_order\": \"2023-09-01T00:00:00.000Z\",\n\"status\": \"bayar\",\n\"total_bayar\": 200000,\n\"created_by\": {\n\"id\": 1,\n\"nama\": \"ihsan santana w\"\n},\n\"konsumen\": {\n\"id\": 1,\n\"nama_konsumen\": \"Nafisa Amatullah\"\n},\n\"order_detail\": [\n{\n\"id\": 18,\n\"jumlah\": 10,\n\"produk\": {\n\"id\": 1\n}\n},\n{\n\"id\": 19,\n\"jumlah\": 10,\n\"produk\": {\n\"id\": 3\n}\n},\n{\n\"jumlah\": 12,\n\"produk\": {\n\"id\": 4\n}\n}\n]\n}\n</code></pre> <p>Setelah success silahkan cek di tabel order dan tabel detail_order</p> <p>tabel order</p> <p></p> <p>tabel order_detail</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#3-membuat-endpoint-delete-order","title":"3. Membuat Endpoint Delete Order","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#service-delete-order","title":"Service delete order","text":"order.service.ts<pre><code>async deleteOrder(id: number): Promise&lt;ResponseSuccess&gt; {\nconst check = await this.orderRepository.findOne({\nwhere: {\nid,\n},\n});\nif (!check)\nthrow new NotFoundException(`Buku dengan id ${id} tidak ditemukan`);\nawait this.orderRepository.delete(id);\nreturn this._success('Berhasil menghapus buku');\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#service-update-order_1","title":"Service update order","text":"order.controller.ts<pre><code> @Delete('delete/:id')\nasync deleteOrder(@Param('id') id: number) {\nreturn this.orderService.deleteOrder(+id);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/H.%20Order/2.update_delete/#pengujian-pada-postman_2","title":"Pengujian Pada Postman","text":"<p>tabel order</p> <p></p> <p>tabel order_detail</p> <p></p> <p>Karena kita sudah menerapkan  <code>CASCADE</code> , ketika order di hapus maka semua data yang berelasi akan ikut terhapus</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/1.%20Report/","title":"1. Membuat Laporan Excel","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/1.%20Report/#1-instalasi-package-exceljs","title":"1. Instalasi package <code>exceljs</code>","text":"<p>Exceljs merupakan library JavaScript yang digunakan untuk membaca, menulis, dan memanipulasi berkas spreadsheet (format .xlsx) </p> <p>Beberapa fitur ExcelJS meliputi:</p> <ul> <li>Membuat dan mengedit berkas Excel dari awal.</li> <li>Membaca dan menulis data ke sel-sel dalam berkas Excel.</li> <li>Membuat berbagai jenis grafik dalam berkas Excel.</li> <li>format seperti pengaturan gaya, font, lebar kolom, dan lainnya.</li> <li>Mendukung formula Excel.</li> <li>Membuat lembar kerja baru dan mengganti nama lembar kerja.</li> <li>Mendukung penggabungan sel dan penyusunan ulang data dalam bentuk tabel.</li> <li>Menyimpan hasil manipulasi ke dalam berkas .xlsx.</li> </ul> terminal<pre><code>npm install exceljs\n</code></pre> <p>Dokumentasi resmi : <code>https://github.com/exceljs/exceljs</code></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/1.%20Report/#2-membuat-service-export-excel","title":"2. Membuat service export excel","text":"order.service.ts<pre><code>async pdfReport(query: findAllOrderDto, res: Response): Promise&lt;any&gt; {\nconst result = await this.findAll(query);\ntry {\nconst workbook = new Workbook();\nconst worksheet = workbook.addWorksheet('Laporan');\nworksheet.columns = [\n{ header: 'No.', key: 'no', width: 10 },\n{ header: 'Nomor Order', key: 'nomor_order', width: 20 },\n{ header: 'Tanggal Order', key: 'tanggal_order', width: 20 },\n{ header: 'Nama Produk', key: 'nama_produk', width: 20 },\n{ header: 'Jumlah', key: 'jumlah', width: 20 },\n{ header: 'Harga', key: 'harga', width: 20 },\n{ header: 'Nama Konsumen', key: 'nama_konsumen', width: 20 },\n{ header: 'Total Bayar', key: 'total_bayar', width: 20 },\n{ header: 'Dibuat oleh', key: 'created_by', width: 20 },\n{ header: 'Diperbaharui oleh', key: 'updated_by', width: 20 },\n];\nconst merge: { start: number; finish: number }[] = [];\nlet col = 1;\nresult.data.forEach((item) =&gt; {\nif (item.order_detail.length &gt;= 1) {\nmerge.push({\nstart: col + 1,\nfinish: col + item.order_detail.length,\n});\nitem.order_detail.map((order) =&gt; {\ncol = col + 1;\nworksheet.addRow({\nno: col - 1,\nnomor_order: item.nomor_order,\ntanggal_order: item.tanggal_order,\nnama_produk: order.produk.nama_produk,\njumlah: order.jumlah,\nharga: order.produk.harga,\nnama_konsumen: item.konsumen.nama_konsumen,\ntotal_bayar: 12000,\ncreated_by: item?.created_by?.nama,\nupdated_by: item?.updated_by?.nama,\n});\n});\n} else {\ncol = col + 1;\nworksheet.addRow({\nno: col - 1,\nnomor_order: item.nomor_order,\ntanggal_order: item.tanggal_order,\nnama_produk: '',\njumlah: 0,\nharga: 0,\nnama_konsumen: item.konsumen.nama_konsumen,\ntotal_bayar: 12000,\ncreated_by: item?.created_by?.nama,\nupdated_by: item?.updated_by?.nama,\n});\n}\n});\nmerge.forEach((item) =&gt; {\nworksheet.mergeCells(item.start, 8, item.finish, 8);\n});\nres.setHeader(\n'Content-Type',\n'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n);\nreturn workbook.xlsx.write(res).then(function () {\nres.status(200).end();\n});\n} catch (err) {\nconsole.log('err', err);\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_REQUEST);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/1.%20Report/#3-membuat-controller-export-excel","title":"3. Membuat Controller Export Excel","text":"order.controller.ts<pre><code>@Get('download-report-excel')\nasync excelReport(\n@Res() res: Response,\n@Pagination() query: findAllOrderDto,\n) {\nreturn this.orderService.pdfReport(query, res);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/1.%20Report/#4-pengujian-pada-postman","title":"4. Pengujian pada postman","text":"<p>Warning</p> <p>Jika sudah berhasil , silahkan klik <code>sace response to file</code> untuk menyimpan file <code>excel</code> ke komputer.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/1.%20Report/#buka-file-excel","title":"Buka File Excel","text":"<p>Note</p> <p>Silahkan explore pada dokumentasi resmi untuk pengaturan <code>cell</code> pada <code>excel</code>.</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/2.%20Upload%20Produk/","title":"2. Import Produk dengan File Excel","text":"<p>Pada suatu aplikasi , terkadang kita butuh  fitur import dari file excel ke dalam database. Kita akan membuat fitur import ketika akan menambahkan produk ke dalam database</p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/2.%20Upload%20Produk/#1-membuat-file-excel","title":"1. Membuat File Excel","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/2.%20Upload%20Produk/#2-membuat-service-import-produk","title":"2. Membuat Service Import Produk","text":"produk.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInject,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { REQUEST } from '@nestjs/core';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Produk } from './produk.entity';\nimport { Between, Like, Repository } from 'typeorm';\nimport {\nCreateProdukArrayDto,\nUpdateProdukDto,\nfindAllProduk,\n} from './produk.dto';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { Workbook } from 'exceljs';\nimport * as fs from 'fs';\n@Injectable()\nexport class ProdukService extends BaseResponse {\nconstructor(\n@InjectRepository(Produk)\nprivate readonly produkRepository: Repository&lt;Produk&gt;,\n@Inject(REQUEST) private req: any,\n) {\nsuper();\n}\n....\nasync importProduk(filename: string): Promise&lt;ResponseSuccess&gt; {\nconst filePath = `public/uploads/${filename}`; //untuk mendapatkan lokasi file excel di upload\nconst workbook = new Workbook(); \nconst result = await workbook.xlsx\n.readFile(filePath)\n.then(async (workbook) =&gt; {\nconst ws = workbook.getWorksheet('Laporan'); // mengambil sheet Laporan\nconst produks = [];\nws.eachRow((row) =&gt; {  // Iterasi semua baris  pada excel   \nconst rowData = [];\nrow.eachCell((cell) =&gt; { // iterasi semua cell pada setiap baris\nrowData.push(cell.value);\n});\nproduks.push(rowData);\n});\nconsole.log('produk', produks);\nproduks.shift();  // menghapus baris pertama \nconst payload = [];\nproduks.forEach((row) =&gt; {  //iterasi untuk membuat payload untuk disimpan ke db sesuai CreateProdukDto\nconst mapel = {\nbarcode: row[1],\nnama_produk: row[2],\ndeskripsi_produk: row[3],\nharga: row[4],\nstok: row[5],\nkategori_id: row[6],\n};\npayload.push(mapel);\n});\nconst response = await this.createBulk({   // create data secara bulk ke database\ndata: payload,\n});\nfs.unlinkSync(filePath); // hapus file excel\nreturn response;\n})\n.catch(() =&gt; {\nthrow new HttpException('Ada Kesalahan', HttpStatus.BAD_GATEWAY);\n});\nreturn this._success(result.message);  \n//\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/2.%20Upload%20Produk/#4-hasil-controller-import-produk","title":"4. Hasil Controller Import Produk","text":"produk.controller.ts<pre><code>import {\nBody,\nController,\nGet,\nParam,\nPost,\nPut,\nUploadedFile,\nUseGuards,\nUseInterceptors,\n} from '@nestjs/common';\nimport { ProdukService } from './produk.service';\nimport {\nCreateProdukArrayDto,\nUpdateProdukDto,\nfindAllProduk,\n} from './produk.dto';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\nimport { InjectUpdatedBy } from 'src/utils/decorator/inject-updated_by.decorator';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { diskStorage } from 'multer';\n@UseGuards(JwtGuard)\n@Controller('produk')\nexport class ProdukController {\nconstructor(private produkService: ProdukService) {}\n...\n@UseInterceptors(\nFileInterceptor('file', {\nstorage: diskStorage({\ndestination: 'public/uploads',\nfilename: (req, file, cb) =&gt; {\nconst fileExtension = file.originalname.split('.').pop();\ncb(null, `${new Date().getTime()}.${fileExtension}`);\n},\n}),\n}),\n)\n@Post('import')\nasync uploadFile(@UploadedFile() file: Express.Multer.File) {\nreturn this.produkService.importProduk(file.filename);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/2.%20Upload%20Produk/#4-hasil-consolelog","title":"4. Hasil console.log","text":"<p>console.log(produks)<pre><code>[\n[\n'No',\n'barcode',\n'nama_produk',\n'deskripsi_produk',\n'harga',\n'stok',\n'kategori_id'\n],\n[ 1, 12089922, 'motor mio 1', 'motor mio 1', 5000000, 100, 2 ],\n[ 2, 12089923, 'motor mio 2', 'motor mio 2', 5000001, 100, 2, null ],\n[ 3, 12089924, 'motor mio 3', 'motor mio 3', 5000002, 100, 2 ],\n[ 4, 12089925, 'motor mio 4', 'motor mio 4', 5000003, 100, 2, null ],\n[ 5, 12089926, 'motor mio 5', 'motor mio 5', 5000004, 100, 2 ],\n[ 6, 12089927, 'motor mio 6', 'motor mio 6', 5000005, 100, 2, null ],\n[ 7, 12089928, 'motor mio 7', 'motor mio 7', 5000006, 100, 2 ],\n[ 8, 12089929, 'motor mio 8', 'motor mio 8', 5000007, 100, 2 ],\n[ 9, 12089930, 'motor mio 9', 'motor mio 9', 5000008, 100, 2 ],\n[ 10, 12089931, 'motor mio 10', 'motor mio 10', 5000009, 100, 2 ],\n[ 11, 12089932, 'motor mio 11', 'motor mio 11', 5000010, 100, 2 ],\n[ 12, 12089933, 'motor mio 12', 'motor mio 12', 5000011, 100, 2 ],\n[ 13, 12089934, 'motor mio 13', 'motor mio 13', 5000012, 100, 2 ]\n]\n</code></pre> console.log(payload)<pre><code>[\n{\nbarcode: 12089922,\nnama_produk: 'motor mio 1',\ndeskripsi_produk: 'motor mio 1',\nharga: 5000000,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089923,\nnama_produk: 'motor mio 2',\ndeskripsi_produk: 'motor mio 2',\nharga: 5000001,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089924,\nnama_produk: 'motor mio 3',\ndeskripsi_produk: 'motor mio 3',\nharga: 5000002,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089925,\nnama_produk: 'motor mio 4',\ndeskripsi_produk: 'motor mio 4',\nharga: 5000003,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089926,\nnama_produk: 'motor mio 5',\ndeskripsi_produk: 'motor mio 5',\nharga: 5000004,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089927,\nnama_produk: 'motor mio 6',\ndeskripsi_produk: 'motor mio 6',\nharga: 5000005,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089928,\nnama_produk: 'motor mio 7',\ndeskripsi_produk: 'motor mio 7',\nharga: 5000006,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089929,\nnama_produk: 'motor mio 8',\ndeskripsi_produk: 'motor mio 8',\nharga: 5000007,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089930,\nnama_produk: 'motor mio 9',\ndeskripsi_produk: 'motor mio 9',\nharga: 5000008,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089931,\nnama_produk: 'motor mio 10',\ndeskripsi_produk: 'motor mio 10',\nharga: 5000009,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089932,\nnama_produk: 'motor mio 11',\ndeskripsi_produk: 'motor mio 11',\nharga: 5000010,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089933,\nnama_produk: 'motor mio 12',\ndeskripsi_produk: 'motor mio 12',\nharga: 5000011,\nstok: 100,\nkategori_id: 2\n},\n{\nbarcode: 12089934,\nnama_produk: 'motor mio 13',\ndeskripsi_produk: 'motor mio 13',\nharga: 5000012,\nstok: 100,\nkategori_id: 2\n}\n]\n</code></pre></p>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/2.%20Upload%20Produk/#5testing-pada-postman","title":"5.Testing pada Postman","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/","title":"3. Memperbaharui Profile","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/#1-membuat-module-controller-service","title":"1. Membuat Module, Controller, Service","text":"terminal<pre><code>npx nest g module app/profile\nnpx nest g controller app/profile\nnpx nest g service app/profile\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/#2-import-entity-user-pada-module","title":"2. Import Entity User pada module","text":"profile.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { ProfileController } from './profile.controller';\nimport { ProfileService } from './profile.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../auth/auth.entity';\n@Module({\nimports: [TypeOrmModule.forFeature([User])],\ncontrollers: [ProfileController],\nproviders: [ProfileService],\n})\nexport class ProfileModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/#3-membuat-dto-pada-profile","title":"3. Membuat DTO pada profile","text":"profile.dto.ts<pre><code>import { PickType } from '@nestjs/mapped-types';\nimport { UserDto } from '../auth/auth.dto';\nexport class UpdateProfileDto extends PickType(UserDto, [\n'avatar',\n'nama',\n'id',\n]) {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/#4-membuat-service-update-profile","title":"4. Membuat Service Update Profile","text":"profile.service.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { User } from '../auth/auth.entity';\nimport { ResponseSuccess } from 'src/interface/response';\nimport { Repository } from 'typeorm';\nimport { UpdateProfileDto } from './profile.dto';\n@Injectable()\nexport class ProfileService extends BaseResponse {\nconstructor(\n@InjectRepository(User)\nprivate readonly profileRepository: Repository&lt;User&gt;,\n) {\nsuper();\n}\nasync updateProfile(\nid: number,\npayload: UpdateProfileDto,\n): Promise&lt;ResponseSuccess&gt; {\nconst update = await this.profileRepository.save({\nnama: payload.nama,\navatar: payload.avatar,\nid: id,\n});\nreturn this._success('Update Success', update);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/#5-membuat-controller-update-profile","title":"5. Membuat Controller Update Profile","text":"profile.controller.ts<pre><code>import { Body, Controller, Put, Req, UseGuards } from '@nestjs/common';\nimport { ProfileService } from './profile.service';\nimport { UpdateProfileDto } from './profile.dto';\nimport { JwtGuard } from '../auth/auth.guard';\n@UseGuards(JwtGuard)\n@Controller('profile')\nexport class ProfileController {\nconstructor(private profileService: ProfileService) {}\n@Put('update')\nasync updateProfile(@Body() payload: UpdateProfileDto, @Req() req) {\nconst { id } = req.user;\nreturn this.profileService.updateProfile(+id, payload);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/#6-testing-update-profile","title":"6. Testing Update Profile","text":""},{"location":"2.%20NestJS%20-%20Backend/6.%20Project/I.%20Fitur%20Lain/3.profile/#a-testing-update-profile-pada-postman","title":"a. Testing update profile pada Postman","text":"payload<pre><code>{\n\"id\": 1,\n\"avatar\": \"http://facebook.png\",\n\"nama\": \"ihsan santana w\"\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/","title":"A. TypeOrm Query Builder","text":"terminal<pre><code>npx nest g module queryBuilder\nnpx nest g service queryBuilder\nnpx nest g controller queryBuilder\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#module","title":"Module","text":"query-builder.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { QueryBuilderService } from './query-builder.service';\nimport { QueryBuilderController } from './query-builder.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'src/app/auth/auth.entity';\n@Module({\nimports: [TypeOrmModule.forFeature([User])],\nproviders: [QueryBuilderService],\ncontrollers: [QueryBuilderController],\n})\nexport class QueryBuilderModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#controller","title":"Controller","text":"query-builder.controller.ts<pre><code>import { Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { JwtGuard } from 'src/app/auth/auth.guard';\nimport { QueryBuilderService } from './query-builder.service';\n// @UseGuards(JwtGuard)\n@Controller('query-builder')\nexport class QueryBuilderController {\nconstructor(private readonly querybuilderService: QueryBuilderService) {}\n@Get('/latihan')\nasync LatihanController() {\nreturn this.querybuilderService.latihan();\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#service","title":"Service","text":"query-builder.service.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from 'src/app/auth/auth.entity';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Repository } from 'typeorm';\n@Injectable()\nexport class QueryBuilderService extends BaseResponse {\nconstructor(\n@InjectRepository(User)\nprivate readonly userRepository: Repository&lt;User&gt;,\n) {\nsuper();\n}\nasync latihan() {\nconst result = await this.userRepository\n.createQueryBuilder('user')\n.getMany();\nreturn this._success('ok', result);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#querybuilder-dto","title":"QueryBuilder DTO","text":"query-builder.dto.ts<pre><code>import { IsOptional, IsString } from 'class-validator';\nimport { PageRequestDto } from 'src/utils/dto/page.dto';\nexport class latihanQueryBuilderDto extends PageRequestDto {\n@IsString()\n@IsOptional()\nnama: string;\n@IsString()\n@IsOptional()\nnama_produk: string;\n@IsString()\n@IsOptional()\nstok: string;\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#where","title":"Where","text":"query-builder.service.ts<pre><code>...\nasync latihan(query: latihanQueryBuilderDto) {\nconst { nama } = query;\nconst queryBuilder = await this.userRepository.createQueryBuilder('user');\nif (nama) {\nqueryBuilder.where(`user.nama LIKE :nama`, {\nnama: `%${nama}%`,\n});\n}\nconst result = await queryBuilder.getMany();\nreturn this._success('ok', result);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#latihan-query-pada-produk","title":"Latihan query pada Produk","text":""},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#module_1","title":"Module","text":"query-builder.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { QueryBuilderService } from './query-builder.service';\nimport { QueryBuilderController } from './query-builder.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'src/app/auth/auth.entity';\nimport { Produk } from 'src/app/produk/produk.entity';\n@Module({\nimports: [TypeOrmModule.forFeature([User, Produk])],\nproviders: [QueryBuilderService],\ncontrollers: [QueryBuilderController],\n})\nexport class QueryBuilderModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#controller_1","title":"Controller","text":"query-builder.controller.ts<pre><code> @Get('/latihan2')\nasync LatihanController2(@Pagination() query: latihanQueryBuilderDto) {\nreturn this.querybuilderService.latihan2(query);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#service_1","title":"Service","text":""},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#andwere-dan-select","title":"AndWere dan Select","text":"query-builder.service.ts<pre><code>import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { User } from 'src/app/auth/auth.entity';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Repository } from 'typeorm';\nimport { latihanQueryBuilderDto } from './query-builder.dto';\nimport { Produk } from 'src/app/produk/produk.entity';\n@Injectable()\nexport class QueryBuilderService extends BaseResponse {\nconstructor(\n@InjectRepository(User)\nprivate readonly userRepository: Repository&lt;User&gt;,\n@InjectRepository(Produk)\nprivate readonly produkRepository: Repository&lt;Produk&gt;,\n) {\nsuper();\n}\nasync latihan2(query: latihanQueryBuilderDto) {\nconst { nama_produk, stok } = query;\nconst queryBuilder = await this.produkRepository.createQueryBuilder(\n'produk',\n);\nif (nama_produk) {\nqueryBuilder.where(`produk.nama_produk LIKE :nama_produk`, {\nnama_produk: `%${nama_produk}%`,\n});\n}\nif (stok) {\nqueryBuilder.andWhere(`produk.stok LIKE :stok`, {\nstok: stok,\n});\n}\nqueryBuilder.select([\n'produk.nama_produk',\n'produk.stok',\n'produk.harga',\n'produk.deskripsi_produk',\n]);\nconst result = await queryBuilder.getMany();\nreturn this._success('ok', result);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#leftjoin","title":"LeftJoin","text":"query-builder.service.ts<pre><code>async latihan2(query: latihanQueryBuilderDto) {\nconst { nama_produk, stok } = query;\nconst queryBuilder = await this.produkRepository.createQueryBuilder(\n'produk',\n);\nif (nama_produk) {\nqueryBuilder.where(`produk.nama_produk LIKE :nama_produk`, {\nnama_produk: `%${nama_produk}%`,\n});\n}\nif (stok) {\nqueryBuilder.andWhere(`produk.stok LIKE :stok`, {\nstok: stok,\n});\n}\nqueryBuilder\n.leftJoin(`produk.created_by`, 'created_by')\n.leftJoin(`produk.updated_by`, 'updated_by')\n.select([\n'produk.id',\n'produk.nama_produk',\n'produk.stok',\n'produk.harga',\n'produk.deskripsi_produk',\n'created_by.nama',\n'updated_by.nama',\n]);\nconst result = await queryBuilder.getMany();\nreturn this._success('ok', result);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/7.%20TypeOrm%20Lanjutan/2.%20querybuilder/#pagination","title":"Pagination","text":"query-builder.service.ts<pre><code>async latihan2(query: latihanQueryBuilderDto) {\nconst { nama_produk, stok, limit, page, pageSize } = query;\nconst queryBuilder = await this.produkRepository.createQueryBuilder(\n'produk',\n);\nif (nama_produk) {\nqueryBuilder.where(`produk.nama_produk LIKE :nama_produk`, {\nnama_produk: `%${nama_produk}%`,\n});\n}\nif (stok) {\nqueryBuilder.andWhere(`produk.stok LIKE :stok`, {\nstok: stok,\n});\n}\nqueryBuilder\n.leftJoin(`produk.created_by`, 'created_by')\n.leftJoin(`produk.updated_by`, 'updated_by')\n.select([\n'produk.id',\n'produk.nama_produk',\n'produk.stok',\n'produk.harga',\n'produk.deskripsi_produk',\n'created_by.nama',\n'updated_by.nama',\n])\n.skip(limit)\n.take(pageSize);\nconst result = await queryBuilder.getMany();\nconst total = await queryBuilder.getCount();\nreturn this._pagination('OK', result, total, page, pageSize);\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/8.%20Unit%20Testing/1.%20index/","title":"A. Unit Testing","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/1.%20Pengetrtian/","title":"A. Fundamental Apache Kafka?","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/1.%20Pengetrtian/#1-apa-itu-apache-kafka","title":"1. Apa itu Apache Kafka?","text":"<p>Apache Kafka adalah aplikasi yang bisa digunakan untuk melakukan pemprosesan <code>publish dan subscribe</code>. Apache Kafka merupakan <code>distributed streaming platform</code> yang di desain khusus untuk mengelola aliran data dalam lingkup yang sangat besar. Kafka dapat berfungsi untuk mengirim, menyimpan, dan memproses aliran data secara real-time, dengan toleransi kesalahan yang tinggi dan latensi yang sangat rendah. </p> <p>Apache Kafka Dikembangkan oleh Apache Software Foundation, Kafka dirancang untuk mengatasi kebutuhan pertukaran pesan dan aliran data di dalam sistem terdistribusi atau antara aplikasi. </p> <p>Pada dasarnya, Apache Kafka adalah sebuah message broker yang berperan sebagai penghubung antara produsen (producer) dan konsumen (consumer) untuk pengiriman pesan.</p> <p>Link : https://kafka.apache.org/</p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/1.%20Pengetrtian/#2-apa-itu-publish-dan-subscribe","title":"2. Apa itu Publish dan Subscribe?","text":"<p><code>Publish</code> dan <code>subscribe</code> (pub-sub) adalah pola desain yang umum digunakan dalam sistem komputasi dan komunikasi, termasuk dalam konteks Apache Kafka  yang telah kita bahas sebelumnya. </p> <p>https://aws.amazon.com/id/what-is/pub-sub-messaging/</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/1.%20Pengetrtian/#3-apa-itu-consumer-dan-publisher","title":"3. Apa itu Consumer dan Publisher?","text":"<ul> <li>Producer adalah aplikasi yang mengirim data ke message broker (Kafka)</li> <li>Consumer adalah aplikasi yang mengambil/menerima data dari message broker (Kafka)</li> <li>Aplikasi bisa bertindak sebagai producer dan consumer sekaligus</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/1.%20Pengetrtian/#apa-itu-topic","title":"Apa itu Topic?","text":"<ul> <li>Data di kafka disimpan dalam topic</li> <li>Data di topic tidak bisa di ubah</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/2.%20Instalasi/","title":"B. Instalasi Apache Kafka","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/2.%20Instalasi/#instalasi-dengan-docker","title":"Instalasi dengan Docker","text":"<p>Pada materi ini kita akan instalasi apache kafka dan kafka ui dengan <code>docker</code> agar kita tidak bermasalah dengan sistem operasi. Agar proses instalasi lebih mudah kita gunakan docker compose , silahkan teman-teman buat file baru dengan nama <code>docker-compose.yml</code> di aplikasi nestjs .</p> docker-compose.yml<pre><code>version: '3.8'\nservices:\nzookeeper:\nimage: wurstmeister/zookeeper:latest\ncontainer_name:  zookeeper\nrestart: always\nports:\n- \"2181:2181\"\nkafka:\nimage: wurstmeister/kafka:latest\ncontainer_name:  kafka\nrestart: always\nports:\n- \"9092:9092\"\nexpose:\n- \"9093\"\nenvironment:\nKAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092\nKAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT\nKAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092\nKAFKA_INTER_BROKER_LISTENER_NAME: INSIDE\nKAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\ndepends_on :\n- zookeeper\nkafka-ui:\nimage: provectuslabs/kafka-ui:latest\ncontainer_name:  kafka-ui\nrestart: always\nports:\n- \"8080:8080\"\ndepends_on :\n- kafka\n- zookeeper\nenvironment:\nKAFKA_CLUSTERS_0_NAME: local\nKAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093\nKAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181\n</code></pre> <p>untuk proses instalasi kita tinggal menjalankan <code>docker-compose up -d</code></p> terminal<pre><code>docker-compose up -d\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/2.%20Instalasi/#membuat-topic-pada-kafka-ui","title":"Membuat Topic pada Kafka UI","text":"<p>Setelah proses instalasi kafka dan kafka UI, silahkan teman-teman buka kafka ui dengan mengakses <code>localhost:8080</code></p> <p></p> <p>Untuk belajar memulai kafka silakan buat topic baru seperti konfigurasi seperti di bawah ini.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/2.%20Instalasi/#produce-message-pada-kafka-dengan-kafka-ui","title":"Produce Message pada kafka dengan Kafka UI","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/3.%20Integrasi%20dengan%20NestJS/","title":"C. Integrasi dengan NestJS","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/3.%20Integrasi%20dengan%20NestJS/#instalasi","title":"Instalasi","text":"<p>Untuk memmulai belajar kafka di nestjs pertama kita akan instalasi package yang diperlukan.</p> terminal<pre><code>npm i --save @nestjs/microservices\nnpm i --save kafkajs\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/3.%20Integrasi%20dengan%20NestJS/#_1","title":"C. Integrasi dengan NestJS","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/","title":"D. NestJs sebagai Consumer","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/#konfigurasi","title":"Konfigurasi","text":"<p>Langkah pertama buatkan konfig untuk kafka pada folder config</p> config/kafka.config.ts<pre><code>import { KafkaOptions, Transport } from '@nestjs/microservices';\nexport const kafkaConfig: KafkaOptions = {\ntransport: Transport.KAFKA,\noptions: {\nclient: {\nclientId: `backend-smkmq`,\nbrokers: [`localhost:9092`],\n},\nconsumer: {\ngroupId: `smkmq-group-1`,\n},\n},\n};\n</code></pre> <p>Kemudian pada kita implemantasikan config tersebut pada <code>main.ts</code></p> main.ts<pre><code>import { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { ValidationPipe } from '@nestjs/common';\nimport { useContainer } from 'class-validator';\nimport { kafkaConfig } from './config/kafka.config';\nimport { MicroserviceOptions } from '@nestjs/microservices';\nasync function bootstrap() {\nconst app = await NestFactory.create(AppModule);\napp.enableCors();\napp.useGlobalPipes(\nnew ValidationPipe({\nwhitelist: true,\nforbidUnknownValues: true,\ntransform: true,\nvalidateCustomDecorators: true,\ntransformOptions: {\nenableImplicitConversion: true,\n},\n}),\n);\napp.connectMicroservice&lt;MicroserviceOptions&gt;(kafkaConfig);\napp.startAllMicroservices();\nuseContainer(app.select(AppModule), { fallbackOnErrors: true });\nawait app.listen(5002);\n}\nbootstrap();\n</code></pre> <p></p> <p>apabila prosenya sudah benar, kita akan melihat consumer kita di kafka dengan nama <code>smkmq-group-1-server</code> dengan state <code>stable</code></p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/#membuat-messagepattern","title":"Membuat MessagePattern","text":"<p>Decorator <code>MessagePattern</code> digunakan untuk menangani pesan dalam <code>microservice architecture</code>. Decorator ini merupakan bagian dari package <code>@nestjs/microservices</code> dan dirancang khusus untuk menangani pesan yang dikirim melalui berbagai lapisan transport seperti Kafka, RabbitMQ, NATS, dan lain-lain.</p> <p>Penggunaan Utama <code>MessagePattern</code></p> <ul> <li>Message Routing: Memungkinkan routing pesan ke handler yang sesuai berdasarkan pola pesan. Pola ini bisa berupa string, objek, atau array yang mendefinisikan jenis pesan yang harus diproses oleh handler.</li> <li>Decoupling: Membantu dalam mendekopling produsen pesan dari konsumen. Produsen mengirim pesan ke topik atau kanal, dan layanan apa pun dengan handler untuk pola tersebut dapat mengonsumsi pesan.</li> <li>Scalability: Memungkinkan skala horizontal mikroservis. Beberapa instance dari sebuah layanan dapat menangani pola pesan yang sama, sehingga beban dapat didistribusikan ke beberapa instance.</li> <li>Protocol Agnostic: Bekerja dengan berbagai lapisan transportasi yang didukung oleh NestJS, sehingga fleksibel untuk berbagai sistem pesan.</li> </ul> <p>Pada contoh ini kita akan implementasikan MessagePAtter pada controller di konsumen.</p> konsumen.controller.ts<pre><code>import { Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { KonsumenService } from './konsumen.service';\nimport { InjectCreatedBy } from 'src/utils/decorator/inject-created_by.decorator'; //import disini\nimport { CreateKonsumenDto, findAllKonsumenDto } from './konsumen.dto';\nimport { JwtGuard } from 'src/app/auth/auth.guard';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\nimport { MessagePattern, Payload } from '@nestjs/microservices';\n@Controller('konsumen')\nexport class KonsumenController {\nconstructor(private konsumenService: KonsumenService) {}\n@UseGuards(JwtGuard)\n@Post('create')\nasync create(@InjectCreatedBy() payload: CreateKonsumenDto) {\nconsole.log('pay', payload);\nreturn this.konsumenService.create(payload);\n}\n@UseGuards(JwtGuard)\n@Get('list')\nasync findAll(@Pagination() query: findAllKonsumenDto) {\nreturn this.konsumenService.findAll(query);\n}\n@MessagePattern('belajar-kafka')\nasync simpan(@Payload() payload) {\nconsole.log('payload', payload);\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/#case-menerima-pesan-string","title":"Case menerima pesan string","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/#case-meneriman-pesan-object","title":"Case meneriman pesan object","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/#case-mengirimkan-konsumen-baru-dari-kafka-daan-simpan-ke-database","title":"Case mengirimkan konsumen baru dari kafka daan simpan ke database","text":"<p>Pada materi sebelumny kita terlah membuat api dan service untuk menambahkan konsumen yang baru. Pada contoh kasus kali ini kita akan mengirimkan message ke kafka dan akan di consume oleh nestjs data dari konsumen yang baru untuk kemudian di simpan di dalam database. Kita tambahkan kode untuk memanggil service create konsumen dari <code>konsumen.service.ts</code> seperti di bawah</p> konsumen.controller.ts<pre><code>  @MessagePattern('belajar-kafka')\nasync simpan(@Payload() payload) {\nconsole.log('payload', payload);\nreturn this.konsumenService.create({\n...payload,\ncreated_by: {\nid: 1,\n},\n});\n}\n}\n</code></pre> <p>Kemudian kita coba kirimkan data berikut di kafka</p> data konsumen baru<pre><code>{\n\"nama_konsumen\" : \"Rizky Alfiansyah\",\n\"alamat_konsumen\" : \"Kp. Kebonjati Rt. 002\",\n\"email\" : \"rizky@gmail.com\",\n\"nomor_handphone\" : \"0895320050322\"\n}\n</code></pre> <p></p> <p></p> <p>Kita lihat di log di atas jika data sudah berhasil disimpan pada database, untuk memastikan kita lihat data konsumen dengan api list konsumen</p> <p></p> <p>Kita lihat bahwa data konsumen berhasil di tambahkan ke database.</p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/#case-backend-down","title":"Case Backend Down","text":"<p>Pada contoh kali ini kita coba kirimkan data konsumen baru ke kafka, sementara BE mati</p> data konsumen baru<pre><code>{\n\"nama_konsumen\" : \"Nayhan\",\n\"alamat_konsumen\" : \"Kp. Kebonjati Rt. 002\",\n\"email\" : \"nayhan@gmail.com\",\n\"nomor_handphone\" : \"0895320050322\"\n}\n</code></pre> <p>Pertama kita matikan NestJs terlebih dahulu</p> <p></p> <p>Kemudian kita produce message data di atasi di kafka </p> <p>Kemudian kita nyalakan kembali NestJS</p> <p></p> <p>Pada saat data kita nyalakan NestJs maka data akan langsung di consume dan di simpan ke database.</p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/4.%20NestJS%20Consumer%20copy/#case-data-yang-dikirim-tidak-sesuai","title":"Case Data yang dikirim tidak sesuai","text":"konsumen.controller.ts<pre><code>import { Controller, Get, Post, UseGuards } from '@nestjs/common';\nimport { KonsumenService } from './konsumen.service';\nimport { InjectCreatedBy } from 'src/utils/decorator/inject-created_by.decorator'; //import disini\nimport { CreateKonsumenDto, findAllKonsumenDto } from './konsumen.dto';\nimport { JwtGuard } from 'src/app/auth/auth.guard';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\nimport { MessagePattern, Payload } from '@nestjs/microservices';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\n@Controller('konsumen')\nexport class KonsumenController {\nconstructor(private konsumenService: KonsumenService) {}\n....\n@MessagePattern('belajar-kafka')\nasync simpan(@Payload() payload) {\nconsole.log('payload', payload);\ntry {\nconst dto = plainToInstance(CreateKonsumenDto, payload);\nconst errors = await validate(dto);\nif (errors.length &gt; 0) {\nconsole.log('Validation failed:', errors);\nreturn;\n}\nawait this.konsumenService.create({\n...payload,\ncreated_by: {\nid: 1,\n},\n});\n} catch (err) {\nconsole.log('err', err);\n}\n}\n}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/5.%20NestJS%20Prosedur/","title":"E. NestJs sebagai Producer","text":""},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/5.%20NestJS%20Prosedur/#konfigurasi","title":"Konfigurasi","text":"<p>Pertama kita module dan service untuk kafka terlebih dahulu</p> terminal<pre><code>npx nest g module kafka\nnpx nest g service kafka\n</code></pre> <p>Kemudian kita definisikan sebuah modul global di NestJS yang mengonfigurasi klien Kafka menggunakan ClientsModule. Modul ini mencakup KafkaService sebagai penyedia layanan dan mengekspornya sehingga dapat digunakan di seluruh aplikasi tanpa perlu mendeklarasikannya lagi di modul lain. Pendekatan ini membantu dalam memisahkan konfigurasi dari logika bisnis dan memudahkan pengelolaan serta penggunaan kembali komponen di berbagai tempat dalam aplikasi.</p> kafka.module.ts<pre><code>  import { Global, Module } from '@nestjs/common';\nimport { KafkaService } from './kafka.service';\nimport { ClientsModule, Transport } from '@nestjs/microservices';\nimport { kafkaConfig } from 'src/config/kafka.config';\n@Global()\n@Module({\nimports: [\nClientsModule.register([\n{\nname: 'LATIHAN_KAFKA',\n...kafkaConfig,\n},p\n]),\n],\nproviders: [KafkaService],\nexports: [KafkaService],\n})\nexport class KafkaModule {}\n</code></pre> <p>!!! note - <code>@Global()</code>: Menjadikan modul ini tersedia di seluruh aplikasi tanpa perlu mengimpor di setiap modul yang membutuhkan. - <code>ClientsModule.register()</code>: Mengonfigurasi klien Kafka dengan menggunakan konfigurasi yang tela dipisahkan dalam file kafka.config.ts. - <code>KafkaService</code>: Layanan yang berisi logika untuk berinteraksi dengan Kafka, diekspor agar dapat digunakan oleh modul lain.</p> <p>Kemudian Kita implementasikan lifecycle <code>onModuleInit</code> pada service untuk menghubungkan klien Kafka ketika modul diinisialisasi. Ini memastikan bahwa klien siap untuk mengirim dan menerima pesan ketika aplikasi berjalan.</p> kafka.service.ts<pre><code>import { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport { ClientKafka } from '@nestjs/microservices';\n@Injectable()\nexport class KafkaService implements OnModuleInit {\nconstructor(@Inject('LATIHAN_KAFKA') private kafkaClient: ClientKafka) {}\nasync onModuleInit() {\nawait this.kafkaClient.connect();\n}\nasync sendMessagewithEmit(topic: string, key:string, payload: any) {\nreturn this.kafkaClient.emit(topic, {\nkey : key,\nvalue : payload\n});\n}\n}\n</code></pre> <p></p> <p>Pada service di atas kita membuat method untuk memproduce message ke kafka dengan method emit dari kafkaClient.</p> <p>Note</p> <ul> <li>Metode <code>sendMessagewithEmit</code> digunakan untuk mengirim pesan ke topik Kafka tertentu.</li> <li><code>topic</code>: Parameter yang menunjukkan topik Kafka yang akan menerima pesan.</li> <li><code>key</code>: Parameter yang menunjukkan kunci pesan. Kunci ini digunakan oleh Kafka untuk menentukan partisi tempat pesan akan disimpan</li> <li><code>payload</code>: Data yang akan dikirim sebagai nilai pesan.</li> <li><code>this.kafkaClient.emit()</code>: Metode ini mengirimkan pesan ke topik Kafka dengan menggunakan klien Kafka yang telah terhubung. Pesan dikirim dalam format objek yang berisi key dan value.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/5.%20NestJS%20Prosedur/#implentasikan-pada-appmodulets","title":"Implentasikan pada app.module.ts","text":"app.module.ts<pre><code>import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { AuthModule } from './app/auth/auth.module';\nimport { MailModule } from './app/mail/mail.module';\nimport { ConfigModule } from '@nestjs/config';\nimport { KategoriModule } from './app/kategori/kategori.module';\nimport { ProdukModule } from './app/produk/produk.module';\nimport { UploadController } from './app/upload/upload.controller';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { KonsumenModule } from './app/konsumen/konsumen.module';\nimport { UniqueValidator } from './utils/validator/unique.validator';\nimport { OrderModule } from './app/order/order.module';\nimport { OrderDetailModule } from './app/order_detail/order_detail.module';\nimport { UploadModule } from './app/upload/upload.module';\nimport { BookModule } from './book/book.module';\nimport { ProfileModule } from './app/profile/profile.module';\nimport { QueryBuilderModule } from './query-builder/query-builder.module';\nimport { KafkaModule } from './kafka/kafka.module';\n@Module({\nimports: [\nServeStaticModule.forRoot({\nrootPath: join(__dirname, '..', 'public'),\n}),\nConfigModule.forRoot({\nisGlobal: true,\n}),\nTypeOrmModule.forRoot(typeOrmConfig),\nAuthModule,\nMailModule,\nKategoriModule,\nProdukModule,\nBookModule,\nKonsumenModule,\nOrderModule,\nOrderDetailModule,\nUploadModule,\nProfileModule,\nQueryBuilderModule,\nKafkaModule,\n],\ncontrollers: [AppController, UploadController],\nproviders: [AppService, UniqueValidator],\n})\nexport class AppModule {}\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/5.%20NestJS%20Prosedur/#case-produce-message-ke-kafka-tanpa-menunggu-response","title":"Case Produce message ke kafka tanpa menunggu response","text":"<p>Pada case ini kita akan mengimplentasikan ketika create order dengan memanfaatkan kafka. adapun logic create order sama seperti saat kita membuat api dengan beberapa penyesuaian.</p> <p>Sebelum memulai case ini , pertama kita buat dahulu topic order</p> <p></p> <p>Langkah 1</p> <p>Pertama kita buat dulu method sebagai prosedur untuk mengirimkan message ke kafka pada topic order seperti berikut.</p> order.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInject,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Between, Like, Repository } from 'typeorm';\nimport { Order } from './order.entity';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Workbook } from 'exceljs';\nimport { Response } from 'express';\nimport { KafkaService } from 'src/kafka/kafka.service';\n@Injectable()\nexport class OrderService extends BaseResponse {\nconstructor(\n@InjectRepository(Order)\nprivate readonly orderRepository: Repository&lt;Order&gt;,\n@Inject(REQUEST) private req: any,\nprivate readonly kafkaService: KafkaService,\n) {\nsuper();\n}\n...\nasync sendOrderToKafka(payload: CreateOrderDto) {\nawait this.kafkaService.sendMessagewithEmit(\n'order',\n'order_key',\nJSON.stringify(payload),\n);\n}\n...\n}\n</code></pre> <p>Langkah 2</p> <p>Kemudian kita membuat Controller untuk mengirimkan payload dari client</p> order.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nRes,\nUseGuards,\n} from '@nestjs/common';\nimport { OrderService } from './order.service';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { InjectCreatedBy } from 'src/utils/decorator/inject-created_by.decorator';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\nimport { InjectUpdatedBy } from 'src/utils/decorator/inject-updated_by.decorator';\nimport { Response } from 'express';\nimport { MessagePattern, Payload } from '@nestjs/microservices';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n@Controller('order')\nexport class OrderController {\nconstructor(private readonly orderService: OrderService) {}\n@UseGuards(JwtGuard)\n@Post('tambah-kafka')\nasync createOrderKafka(@InjectCreatedBy() payload: CreateOrderDto) {\nreturn this.orderService.sendOrderToKafka(payload);\n}\n...\n}\n</code></pre> <p></p> payload<pre><code> {\n\"tanggal_order\" : \"2023-09-01\",\n\"status\" : \"belum bayar\",\n\"total_bayar\" : 40000,\n\"konsumen_id\" : 1,\n\"order_detail\" : [\n{\n\"jumlah\" : 10,\n\"harga\" : 20000,\n\"produk\" : {\n\"id\" : 1\n}\n},\n{\n\"jumlah\" : 5,\n\"harga\" : 50000,\n\"produk\" : {\n\"id\" : 1\n}\n}\n]\n}\n</code></pre> <p>Langkah 3</p> <p>Kemudian kita akan membuat consumer ketika ada message baru di kafka pada topic order</p> order.controller.ts<pre><code>import {\nBody,\nController,\nDelete,\nGet,\nParam,\nPost,\nPut,\nRes,\nUseGuards,\n} from '@nestjs/common';\nimport { OrderService } from './order.service';\nimport { JwtGuard } from '../auth/auth.guard';\nimport { InjectCreatedBy } from 'src/utils/decorator/inject-created_by.decorator';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { Pagination } from 'src/utils/decorator/pagination.decorator';\nimport { InjectUpdatedBy } from 'src/utils/decorator/inject-updated_by.decorator';\nimport { Response } from 'express';\nimport { MessagePattern, Payload } from '@nestjs/microservices';\nimport { validate } from 'class-validator';\nimport { plainToInstance } from 'class-transformer';\n@Controller('order')\nexport class OrderController {\nconstructor(private readonly orderService: OrderService) {}\n@MessagePattern('order')\nasync getPayloadFormKafka(@Payload() payload) {\nconsole.log('payl', payload)\n}\n...\n}\n</code></pre> <p>Lakukan Pengujian</p> <p> </p> <p>Langkah 4</p> <p>Setelah berhasil langkah selanjutkan kita akan membaut service untuk menyimpan message ke database dan merubah method getPayloadFormKafka di controller</p> order.service.ts<pre><code>import {\nHttpException,\nHttpStatus,\nInject,\nInjectable,\nNotFoundException,\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport BaseResponse from 'src/utils/response/base.response';\nimport { Between, Like, Repository } from 'typeorm';\nimport { Order } from './order.entity';\nimport { ResponsePagination, ResponseSuccess } from 'src/interface/response';\nimport { CreateOrderDto, UpdateOrderDto, findAllOrderDto } from './order.dto';\nimport { REQUEST } from '@nestjs/core';\nimport { Workbook } from 'exceljs';\nimport { Response } from 'express';\nimport { KafkaService } from 'src/kafka/kafka.service';\n@Injectable()\nexport class OrderService extends BaseResponse {\nconstructor(\n@InjectRepository(Order)\nprivate readonly orderRepository: Repository&lt;Order&gt;,\n@Inject(REQUEST) private req: any,\nprivate readonly kafkaService: KafkaService,\n) {\nsuper();\n}\n...\nasync createOrderFromKafka(\npayload: CreateOrderDto,\n): Promise&lt;ResponseSuccess&gt; {\ntry {\nconst invoice = this.generateInvoice();\npayload.nomor_order = invoice;\npayload.order_detail &amp;&amp;\npayload.order_detail.forEach((item) =&gt; {\nitem.created_by = { id: payload.created_by.id };\n});\nawait this.orderRepository.save({\n...payload,\nkonsumen: {\nid: payload.konsumen_id,\n},\n});\nreturn this._success('OK');\n} catch (err) {\nconsole.log('err', err);\nthrow new HttpException('Ada Kesalahan', HttpStatus.UNPROCESSABLE_ENTITY);\n}\n}\n...\n}\n</code></pre> order.controller.ts<pre><code>...\n@Controller('order')\nexport class OrderController {\nconstructor(private readonly orderService: OrderService) {}\n@MessagePattern('order')\nasync getPayloadFormKafka(@Payload() payload) {\nconsole.log('payl', payload)\nreturn this.orderService.createOrderFromKafka(payload)\n}\n...\n}\n</code></pre> <p>Lakukan Pengujian</p> <p> </p> <p>Terlihat pada hasil tes di atas kita berhasil menyimpan order dengan menggunakan kafka dengan skenarion Producer dan Consumer.</p> <p>Note</p> <p>Pada contoh implementasi ini kita menjadikan producer dan consumer pada topic yang sama di satu aplikasi backend.  Pada projek rill biasanya kita mengimplementasikan pada aplikasi backend berbeda</p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/5.%20NestJS%20Prosedur/#case-produce-message-ke-kafka-dengan-meneunggu-response-dari-consumer","title":"Case Produce message ke kafka dengan meneunggu response dari consumer","text":"<p>Pada contoh sebelumnya kita terlah berhasil membuat order namun kalau kita perhatikan saat producer mengirimkan message ke kafka dan consume oleh consumer , Producer tidak tahu apakah order yang dikirim berhasil di simpan atau enggk.</p> <p></p> <p>Terlihat tidak ada response dari ketika data dikirim ke kafka. Hal ini terjadi karena kita menggunkan method emit ketika mengirimkan order ke kafka karena <code>emit</code> tidak memerlukan response. Untuk mengatasi masalah ini kita bisa menggunakan method <code>send</code>seperti contoh implementasi berikut.</p> <p>Langkah 1</p> kafka.service.ts<pre><code>import { Inject, Injectable, OnModuleInit } from '@nestjs/common';\nimport { ClientKafka } from '@nestjs/microservices';\nimport { firstValueFrom } from 'rxjs';\n@Injectable()\nexport class KafkaService implements OnModuleInit {\nconstructor(@Inject('LATIHAN_KAFKA') private kafkaClient: ClientKafka) {}\nasync onModuleInit() {\nthis.kafkaClient.subscribeToResponseOf('order');\nawait this.kafkaClient.connect();\n}\nasync sendMessagewithEmit(topic: string, key: string, payload: any) {\nreturn this.kafkaClient.emit(topic, {\nkey: key,\nvalue: payload,\n});\n}\nasync sendMessagewithSend(topic: string, key: string, payload: any) {\ntry {\nconst result = await firstValueFrom(\nthis.kafkaClient.send(topic, {\nkey: key,\nvalue: payload,\n}),\n);\nconsole.log('response kafka', result);\nreturn result;\n} catch (error) {\nconsole.error('Error sending message to Kafka:', error);\nthrow error;\n}\n}\n}\n</code></pre> <p>Penjelasan</p> <p><code>this.kafkaClient.subscribeToResponseOf('order');</code> adalah metode yang digunakan dalam konteks Kafka dengan NestJS untuk memberitahu klien Kafka agar mendengarkan respons dari topik tertentu setelah mengirim pesan ke topik tersebut.</p> <p>Langkah 2</p> <p>Kita akan membuat method baru untuk mengirimkan data ke kafka dengan <code>send</code></p> order.service.ts<pre><code>@Injectable()\nexport class OrderService extends BaseResponse {\nconstructor(\n@InjectRepository(Order)\nprivate readonly orderRepository: Repository&lt;Order&gt;,\n@Inject(REQUEST) private req: any,\nprivate readonly kafkaService: KafkaService,\n) {\nsuper();\n}\n...\nasync sendOrderToKafkaWithSend(payload: CreateOrderDto) {\nconst respons = await this.kafkaService.sendMessagewithSend(\n'order',\n'order_send',\nJSON.stringify(payload),\n);\nreturn respons\n}\n...\n}\n</code></pre> <p>Langkah 3</p> order.controller.ts<pre><code>...\n@Controller('order')\nexport class OrderController {\nconstructor(private readonly orderService: OrderService) {}\n@UseGuards(JwtGuard)\n@Post('tambah-kafka')\nasync createOrderKafka(@InjectCreatedBy() payload: CreateOrderDto) {\nreturn this.orderService.sendOrderToKafkaWithSend(payload);\n}\n....\n}\n</code></pre> <p>Lakukan Pengujian</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/9.%20Kafka/5.%20NestJS%20Prosedur/#catatan-penting","title":"Catatan Penting","text":"<p>Dalam pola komunikasi <code>Request-Response Pattern</code> dengan method <code>send</code> maka secara otomatis kafka akan membuat topic <code>.reply</code>. Pada contoh ini kafka membuat topic <code>order.reply</code> secara otomaris, diamana topic ini digunakan kafka  khusus untuk menangani response terhadap request yang dikirim ke topik <code>order</code>. </p> <p>Sebagai gambar alur kerja dari proses sebagai berikut.</p> <ul> <li>Producer mengirimkan pesan ke topik order menggunakan metode send</li> <li>Consumer listen ke topik order, memproses message tersebut, dan kemudian mengirimkan balasan ke topik order.reply.</li> <li>Producer subscribe pada topik order.reply melalui metode <code>subscribeToResponseOf('order')</code>, sehingga dapat menerima balasan tersebut.</li> </ul> <p></p> <p>Note</p> <p>Dalam konteks NestJS yang menggunakan microservices dan Kafka, emit dan send adalah dua metode berbeda yang digunakan untuk mengirim pesan ke topik Kafka, tetapi keduanya memiliki perbedaan dalam cara kerja dan tujuan penggunaannya.</p> <ul> <li>Penggunaan: <code>emit</code> digunakan untuk mengirim pesan tanpa mengharapkan balasan. Ini adalah pola \"fire-and-forget\", di mana kita hanya mengirimkan pesan ke topik tertentu dan tidak menunggu respons atau balasan dari konsumen yang menerima pesan tersebut.</li> <li>Penggunaan: send digunakan ketika kita mengirim pesan dan mengharapkan balasan dari konsumen. Ini adalah pola \"request-response\", di mana kita mengirim pesan ke topik tertentu dan menunggu balasan dari konsumen yang menangani pesan tersebut. Balasan ini biasanya dikirim ke topik balasan yang terpisah.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/","title":"A. Docker Fundamental","text":""},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#1-apa-itu-container","title":"1. Apa itu Container","text":"<p><code>Container</code> merupakan suatu instance yang berjalan dari suatu image, yang merupakan paket berisi code aplikasi, runtime, library, konfigurasi, dan dependensi lainnya. Kontainer ini menggunakan fitur-fitur seperti kernel namespaces dan cgroups di sistem operasi Linux untuk memberikan isolasi yang kuat, memungkinkan aplikasi beroperasi terisolasi dari environment lainnya pada host. <code>Container</code> dapat dijalankan, dihentikan, dan dikelola dengan Docker API atau Command Line Interface (CLI), dan dapat dipindahkan dengan mudah di antara komputer, mesin virtual, atau cloud. Keunggulan utama container adalah portabilitas lintas platform, kemudahan manajemen, dan isolasi yang efisien.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#2-apa-itu-docker","title":"2. Apa itu Docker","text":"<ul> <li>Docker merupakan salah satu dari implementasi <code>Container Manager</code> yang paling populer saaat</li> <li>Docker merupakan aplikasi yagn free dan Open Source sehingga bisa kita gunakan secara bebas</li> <li>Docker adalah sebuah cara untuk package, deploy, distribusi app secara konsisten di environment manapun.</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#3-instalasi-docker","title":"3. Instalasi Docker","text":""},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#docker-dekstop","title":"Docker Dekstop","text":"<p>Untuk menjalankan docker pada komputer kita, silahkan terlebih dahulu mendownload Docker Desktop link di bawah dan lakukan proses instalasi.</p> <p>https://docs.docker.com/get-docker/</p> <p>Setelah proses instali silahkan jalankan docker dekstop pada komputer kita.  Pada gaambar di atas terlihat jika docker sudah berjalan pada komputer kita ditandai dengan status <code>Docker Dekstop is running</code>. Kemudian kita pilih <code>Preferences</code> untuk mengatur resource yang akan digunakan oleh Docker Dekstop seperti pada gambar di bawah ini.</p> <p></p> <p>Silahkan atur sesuai dengan kebutuhan resource dari Docker Dekstop.</p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#docker-version","title":"Docker Version","text":"terminal<pre><code>docker version\n</code></pre>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#4-docker-registry","title":"4. Docker Registry","text":"<p>Docker Registry adalah tempat penyimpanan yang digunakan untuk menyimpan dan mendistribusikan image Docker. Image Docker adalah paket yang berisi semua komponen yang diperlukan untuk menjalankan suatu aplikasi, termasuk kode, runtime, perpustakaan, konfigurasi, dan lainnya.</p> <p>Docker Registry menyediakan layanan untuk mengelola, menyimpan, dan mengambil image Docker. Ketika Anda membuat image Docker, Anda dapat menyimpannya di Docker Registry agar dapat diakses dan digunakan oleh orang lain atau oleh sistem lainnya. Registry ini berperan penting dalam proses pengembangan perangkat lunak dan pengelolaan kontainer, terutama ketika ingin berbagi atau mendistribusikan image Docker di antara beberapa lingkungan atau mesin.</p> <p></p> <p>Beberapa contoh Docker Registry yang umum digunakan :</p> <ul> <li>Docker Hub (yang merupakan registry publik yang dapat diakses oleh semua orang) : https://hub.docker.com/,</li> <li>Google Container Registry : https://cloud.google.com/container-registry,</li> <li>Amazon Elastic Container Registry (ECR) : https://aws.amazon.com/id/ecr</li> <li>Digital Ocean Container Registry : https://www.digitalocean.com/product/container-registry.</li> </ul> <p>Pada materi ini kita akan focus untuk menggukaan docker hub karena masih banyak image yg gratis.</p> <p>Silahkan buat akun di docker hub pada halaman dockerhub https://hub.docker.com/.</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#5-docker-image","title":"5. Docker Image","text":""},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#apa-itu-docker-image","title":"Apa itu Docker Image","text":"<p>Docker image mirip seperti installer aplikasi dimana di dalam docker image berisi semua komponen yang diperlukan untuk menjalankan suatu aplikasi dalam suatu <code>docker container</code>.</p> terminal<pre><code>docker image ls\n</code></pre> <p>untuk melihat image yang ada pada docker, kita bisa menggunakan perintah <code>docker image ls</code></p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#download-docker-image","title":"Download Docker Image","text":"<p>untuk mendownload Docker image dari Docker Registry pada Docker Hub, kita bisa menggunakan perintah : <code>docker image pull namaimage:tag</code></p> <p>Pada contoh ini, kita akan mendownload docker image dari redis dari docker hub</p> <p></p> terminal<pre><code>docker image pull redis:latest\n</code></pre> <p></p> <p>Catatan</p> <ul> <li>Pada bagian <code>tag</code> sesuaikan dengan kebutuhan dan versi yang diinginkan</li> <li>Pada contoh di atas , kita mengdownload tag lates</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#menghapus-docker-image","title":"Menghapus Docker Image","text":"terminal<pre><code>docker image rm IMAGEID\n</code></pre> <p>Pada contoh ini kita akan menghapus docker image dengan image id e9db8e342ece</p> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#6-docker-container","title":"6. Docker Container","text":"<ul> <li>Satu Docker image bida digunakan untuk membuat beberapa <code>Docker Container</code> asalkan nama <code>Docker Container</code>nya berbeda.</li> <li>Jika kita sudah membuat docker container, maka Docker image yang digunakan tidak bisa dihapus, hal ini dikarenakan sebenarnya Docker Container tidak meng-copy isi <code>Docker Image</code>, tapi hanya menggunakan isinya saja.</li> <li>Saat membuat container, secara default container tersebut tidak akan berjalan</li> <li>Container harus dijalakan secara manual</li> </ul>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#melihat-docker-container-pada-docker","title":"Melihat Docker Container pada Docker","text":"<p>Melihat semua Container</p> terminal<pre><code>docker container ls -a\n</code></pre> <p></p> <p>Melihat semua Container yang berjalan</p> terminal<pre><code>docker container ls\n</code></pre> <p></p> <p>!!!Catatan - <code>docker container ls -a</code> digunakan untuk menampilkan semua docker container yang ada - <code>docker container ls</code> digunakan untuk menampilkan docker container yang berjalan</p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#membuat-docker-container","title":"Membuat Docker Container","text":"<p>Setelah kita mendownload image redis dari docker hub, selanjutnya kita akan membuat docker container untuk redis menggunakan image tersebut. Untuk membuat docker container kita tinggal menjalan perinta <code>docker container create --name nama _container nama_image:tag_dari_image</code></p> terminal<pre><code>docker container create --name contohredis redis:latest\n</code></pre> <p></p> <p>!!!Catatan - Ketika pertama kali dibuat, docker container tidak langsung berjalan, makanya tidak ada di list ketika menjalankan <code>docker container ls</code></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#menjalakan-docker-container","title":"Menjalakan Docker Container","text":"<p>Docker container tidak langsung berjalan ketika pertama kali dibuat, maka dari itu kita harus menjalankan docker container terlebih dahulu dengan perintah di bawah.</p> terminal<pre><code>docker container start nama_container\n</code></pre> <p><code>docker container start contohredis</code> </p> <p>!!! Catatan - port yang digunakan adalah port dari container bukan port dari sistem operasi, maka port yang digunakan tidak akan bentrok dengan aplkasi lain.</p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#menghentikan-docker-container","title":"Menghentikan Docker Container","text":"<p>Untuk menghentikan container kita dapat mengguankan perinta berikut.</p> terminal<pre><code>docker container stop nama_container\n</code></pre> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#menghapus-container","title":"Menghapus Container","text":"<p>Untuk menghapus container kita dapat mengguankan perinta berikut.</p> terminal<pre><code>docker container rm nama_container\n</code></pre> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#7-docker-container-exec","title":"7. Docker Container Exec","text":"<ul> <li>Saat kita membuat container, aplikasi yang terdapat di dalam container hanya bisa diakses dari dalam container</li> <li>untuk masuk ke dalam container, kita bisa menggunakan fitur <code>Container Exec</code>, dimana dengan fitur ini kita bisa masuk kedalam docker container dan bisa menjalankan aplikasi yang da di dalamnya.</li> <li>untuk masuk ke dalam container, kita bisa mencoba mengeksekusi program <code>bash script</code> yang terdapat di dalam container dengan bantuan <code>Container exec</code></li> <li><code>i</code> adalah argument interaktif, menjaga input tetap aktif</li> <li><code>t</code> adalah argument untuk alokasi pseudo-TTY (terminal akses)</li> <li>dan /bin/bash contoh kode program yang terdapat di dalam container</li> </ul> terminal<pre><code>docker container exec -i -t namacontainer /bin/bash\n</code></pre> <p>Pada contoh di bawah ini, kita akan mencoba masuk kedalam RDBMS mysql yang ada pada docker container menggukan container exec.</p> <p></p> <p>Terlihat pada gambar di atas , ketika sudah masuk ke dalam docker container, kita bisa menampilkan daftar database yang ada mysql yang berjalan di docker container. Dengan fitur ini kita bisa mengoperasikan mysql seperti hal yang sering kita lakukan ketika mysql di install di komputer kita.</p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#8-docker-container-environment-variabel","title":"8. Docker Container Environment Variabel","text":"<p>Docker environment variables adalah environment variabel yang digunakan untuk mengkonfigurasi aplikasi atau layanan yang berjalan di dalam Docker Container. Variabel-variabel ini membantu mengatur berbagai aspek aplikasi, termasuk setting, koneksi database,API key, dan banyak lagi. Penggunaan environment variables memberikan fleksibilitas dalam mengonfigurasi aplikasi di dalam kontainer tanpa perlu mengubah kode.</p> <p>Pada contoh ini kita akan membuat mysql pada docker container, yang mana ketika membuat mysql kita perlu untuk membuat password root. Password root ini yang akan kita set terlebih dahulu pada <code>Docker environment variables</code>.</p> <p>Silahlkan download terlebih dahulu image mysql jika belum ada pada docker image.</p> <p></p> <p></p> <p>kemudian kita akan membuat docker container dengan memasukan <code>Docker environment variables</code>. untuk membuat docker container dari image mysql terdapat default <code>environment variables</code> yang bisa kita gunakan yaitu <code>MYSQL_ROOT_PASSWORD</code> yang merupakan env untuk menentukan password root dari mysql pada docker container.</p> <p>untuk menambahkan env kita cukup menambahkan <code>--env NAMA_ENV=nilai_env</code> ketika membuat docker container.</p> terminal<pre><code>docker container create --name nama_container --env NAMA_ENV1=nilai_env1 --env NAMA_ENV2=nilai env2 nama_image:tag_image\n</code></pre> <p>Berikut contoh membuat docker container dengan <code>Docker environment variables</code></p> <p></p> <ul> <li>kita membuat docker container dengan env MYSQL_ROOT_PASSWORD = ihsan</li> <li>paswword ini yg kita input ketika ingin mengakses mysql.</li> </ul> <p>!!! Keterangan - <code>Docker environment variables</code> bisa lebih dari satu tergantung dengan kebutuhan dari aplikasi yang kita buat.</p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#9-docker-container-port","title":"9. Docker Container Port","text":"<p>Docker container yang kita buat dapat kita akses melalui <code>Docker Exec</code> seperti pada contoh sebelumnya. Namun apabila kita ingin menakses aplikasi dalam docker container dari komputer host maka hal itu tidak bisa kita lakukan. Kenapa? karena port yang berjalan adalah port yg terisolet di dalam container itu sendiri seperti pada contoh gambar di bawah.</p> <p></p> <p></p> <p></p> <p>Port default dari mysql adalah 3306, namun ketika kita ingin mengkases mysql dengan komputer kita maka akan gagal karena pada komputer kita tidak ada mysql yg berjalan pada port 3306. Docker container membuat port yang digunakan terisolasi dari komputer host, hal ini memberikan keuntungan kepada kita aplikasi yang berjalan pada port tertentu tidak akan konflik dengan aplikasi lain yg berjalan pada komputer host. Pertanyaannya sekrang bagaimana jika komputer host ingin mengakses aplikasi yg ada pada docker container, jawabanya dengan <code>PORT FORWADING</code>.</p> <p><code>PORT FORWADING</code></p> <ul> <li>Port Forwading akan menerusakan port yang terdapat pada sistem ke dalam port aplikasi pada docker container</li> <li><code>-p port_host:port_container</code> atau <code>--publish port_host:port_container</code> merupakan perintah untuk membuat port forwading pda docker container</li> <li>port forwading bisa lebih dari satu.</li> </ul> <p>Pada contoh di bawah kita akan membuat port forwading pada mysql di docker container. kita hapus terlebih dahulu container contohmysql, dan kita akan buat kembali dengan menambahkan port forwading.</p> terminal<pre><code>docker container create --publish 9000:3306 --name nama_container --env NAMA_ENV1=nilai_env1 --env NAMA_ENV2=nilai env2 nama_image:tag_image\n</code></pre> <p></p> <p></p> <p></p> <p>Terlihat pada contoh di atas, komputer host sudah bisa mengakses aplikasi mysql di docker container menggunakan port 9000.</p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#10-docker-container-stats","title":"10. Docker Container Stats","text":"<p>Saat menjalankan docker container tentunya akan menggunakan resource seperti CPU, Memory dan lain-lain. Namanu pertanyaannya bagaimana kita melihat statistik dari pengguankan resource pada docker. Docker sudah menyediakan perintah untuk melihat penggunakan resource dari setiap container yang berjalan.</p> terminal<pre><code>docker container stats\n</code></pre> <p></p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#12-docker-volume","title":"12. Docker Volume","text":"<p>Docker volume adalah cara untuk menyimpan dan mengelola data persisten di dalam Docker Container. Docker Container sendiri pada umumnya bersifat stateless, yang berarti setiap kali kontainer dimatikan atau dihapus, semua perubahan pada sistem file di dalamnya akan hilang. Docker volume memungkinkan kita menyimpan data di luar kontainer, sehingga data tersebut dapat dipertahankan bahkan jika kontainer dihapus atau dihentikan.</p> <p>Beberapa karakteristik Docker volume termasuk:</p> <ul> <li> <p>Persistensi Data: Docker volume memungkinkan data untuk bertahan dan tidak hilang ketika kontainer dihapus atau dihentikan. Ini sangat berguna untuk menyimpan data aplikasi, basis data, atau konfigurasi yang perlu dipertahankan di antara siklus hidup kontainer.</p> </li> <li> <p>Kemudahan Penggunaan: Docker menyediakan perintah dan API untuk membuat, mengelola, dan menggunakan volume dengan mudah. Anda dapat membuat volume saat menjalankan kontainer atau secara terpisah menggunakan perintah docker volume.</p> </li> <li> <p>Berbagi Data Antar Kontainer: Anda dapat menggunakan volume untuk berbagi data antar kontainer. Dengan mengaitkan volume yang sama ke beberapa kontainer, mereka dapat berkomunikasi dan berbagi data melalui volume tersebut.</p> </li> </ul> <p>Melihat Docker Volume</p> terminal<pre><code>docker volume ls\n</code></pre> <p></p> <p>Membuat Volume terminal<pre><code>docker volume create namavolume\n</code></pre> </p> <p>Menghapus Vokume terminal<pre><code>docker volume rm namavolume\n</code></pre> </p>"},{"location":"2.%20NestJS%20-%20Backend/98.%20Docker/1.%20Instalasi%20Docker/#volumen-container","title":"Volumen Container","text":"<p>Saat kita sudah membuat volume , maka kita sudah bisa menggunakan volume tersebut di dalam container. Hal ini memberikan keuntungan dengan menggunakan volume maka jika container di hapus maka data akan tetap aman. Data yang berada di dalam volume dapat digunakan oleh container lain. Untuk membuat volume kita bisa menambahkan perintah `--mount \"type=volume, source=nama_volume distination=\"data_a\"</p> <p>Pada contoh ini kita akan membuat mysql yang datanya akan disimpan di dalam docker volume</p> <p></p> <p>untuk distination </p> terminal<pre><code>docker container create --name nama_container --mount \"type=volume, source=nama_volume distination=tempat_penyimpanan di aplikasi\" \ndocker container create --name db_mysql --mount \"type=volume,source=mysql-volume,destination=/var/lib/mysql\" -e MYSQL_ROOT_PASSWORD=ihsan --publish 9000:3306 mysql:8.0\ndocker container create --name db_mysql2 --mount \"type=volume,source=mysql-volume,destination=/var/lib/mysql\" -e MYSQL_ROOT_PASSWORD=ihsan --publish 9001:3306 mysql:8.0\n</code></pre> <p>Membuat container db_mysql dengan volume</p> <p></p> <p>Membuat database </p> <p>**Menbuat container db_mysql2</p>"},{"location":"2.%20NestJS%20-%20Backend/99.%20Postman/1.%20tes/","title":"1. tes","text":"<pre><code>pm.test('Success', function () {\nvar data = pm.response.json()\nconsole.log('data', data.data.access_token)\npm.environment.set(\"access_token\", data.data.access_token);\n});\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/1.%20Instalasi/","title":"1. Instalasi NextJS","text":""},{"location":"3.%20NextJS%20-%20Frontend/1.%20Instalasi/#a-apa-itu-nextjs","title":"A. Apa itu NextJS?","text":"<p>Next.js merupakan sebuah framework dari react untuk membuat aplikasi web. Kita  bisa membuat user inteface dengan React Component dan Next.js menyediakan struktur tambahan, fitur, dan optimisasi untuk aplikasi react.</p> <p>Next.js juga mengabstraksi dan secara otomatis mengonfigurasi tools  yang dibutukan saat development maupun production, seperti bundling, compiling dan lain-lain. Hal ini memungkinkan kita untuk fokus terhadap bussines process dari apliaksi daripada menghabiskan waktu untuk mengatur tools.</p> <p>NextJS membantu kita dalam mengembangkan web application secara interakti, dinas, dan cepat.</p> <p>Sebelum instalasi, ada beberapa System Requirements yang harus dipenuhi.</p> <ul> <li>Node.js 16.8 or later.</li> <li>macOS, Windows (including WSL), and Linux are supported.</li> </ul> <p>Kita akan melakukan instalasi nextjs dengan <code>Automatic Installation</code>.</p> terminal<pre><code>npx create-next-app@latest\n</code></pre> <p>Dalam proses instalasi ikut perinta berikut</p> terminal<pre><code>Need to install the following packages:\ncreate-next-app@13.4.12\nOk to proceed? (y) y\n\u2714 What is your project named? frontend-nextjs  // nama folder dari nextjs\n\u2714 Would you like to use TypeScript? \u2026 No / Yes  // pilih yes\n\u2714 Would you like to use ESLint? \u2026 No / Yes   // pilih yes\n\u2714 Would you like to use Tailwind CSS? \u2026 No / Yes   // pilih yes\n\u2714 Would you like to use `src/` directory? \u2026 No / Yes   // pilih no\n\u2714 Would you like to use App Router? (recommended) \u2026 No / Yes // pilih yes\n\u2714 Would you like to customize the default import alias? \u2026 No / Yes  // pilih no\nCreating a new Next.js app in /Volumes/luvieummunafisa/FullstackDev/frontend-nextjs.\n</code></pre> <p>Jika berhasil maka akan terbuat strukut project seperti pada gambar di bawah.</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/1.%20Instalasi/#b-packagejson-script","title":"B. Package.json script","text":"package.json<pre><code>{\n\"name\": \"frontend-nextjs\",\n\"version\": \"0.1.0\",\n\"private\": true,\n\"scripts\": {\n\"dev\": \"next dev\",\n\"build\": \"next build\",\n\"start\": \"next start\",\n\"lint\": \"next lint\"\n},\n\"dependencies\": {\n\"@types/node\": \"20.4.5\",\n\"@types/react\": \"18.2.17\",\n\"@types/react-dom\": \"18.2.7\",\n\"autoprefixer\": \"10.4.14\",\n\"clsx\": \"^2.0.0\",\n\"eslint\": \"8.46.0\",\n\"eslint-config-next\": \"13.4.12\",\n\"next\": \"13.4.12\",\n\"postcss\": \"8.4.27\",\n\"react\": \"18.2.0\",\n\"react-dom\": \"18.2.0\",\n\"tailwindcss\": \"3.3.3\",\n\"typescript\": \"5.1.6\"\n}\n}\n</code></pre> <p>Keterangan</p> <ul> <li><code>dev</code>: untuk menjalakan next ketika proses development.</li> <li><code>build</code>: untuk menjalakan build aplikasi nexjs untuk production.</li> <li><code>start</code>: untuk menjalankan nextjs dalam mode production.</li> <li><code>lint</code>:  untuk set up  built-in ESLint configuration pada nextjs.</li> </ul> <p>Jalankan pada terminal</p> terminal<pre><code>npm run dev\n</code></pre> <p>Jalankan pada browser</p> <p></p> <p>secara default nextjs berjalan pada <code>port 3000</code>, kita dapat merubah port nextjs dengan cara seperti di bawah</p> package.json<pre><code>\"scripts\": {\n\"dev\": \"next dev -p 3010\",\n\"build\": \"next build\",\n\"start\": \"next start\",\n\"lint\": \"next lint\"\n},\n</code></pre> <p>Jalankan pada browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/A.%20React%20Component/","title":"A. React Component","text":"<p>Sebelum mempelajari  Strukrur NextJS 13, kita akan mempelajari terlebih dahulu Fundamental dari ReactJS. Kita akan mulai dahulu dari <code>React Component</code>.</p> <p>Pada Project NextJS , file yang pertama kali dijalankan adalah <code>page.tsx</code> pada folder app. Kita akan ubah isi dari file tersebut menjadi seperti kode berikut</p> app/page.tsx<pre><code>export default function Home() {\nreturn (\n&lt;main&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/main&gt;\n)\n}\n</code></pre> <p>Ketika dijalankan pada browser akan tampak seperi berikut.</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/A.%20React%20Component/#1-apa-itu-react-component","title":"1. Apa itu React Component","text":"<p>React Component merupakan bagian-bagian User Interface yang menyusun keseluruhan  User Interface dari aplikasi reactjs.</p> <p></p> <p>sumber gambar : https://www.simplilearn.com/tutorials/reactjs-tutorial/reactjs-components</p> <p>Contoh pada gambar di atas , User Interface halaman register facebook dibuat dari beberapa komponen yang memiliki fungsi dan logic tertentu. Terdapat setidaknya 4 komponen, dimana setiap komponen memiliki fungsi tertentu dan ketika disusun jadilah satu User Interface web secara utuh.</p> <p><code>React Component</code> memiliki ciri sebagai berikut</p> <ul> <li><code>React Component</code> di deklarasikan menggukan function atau class dengan <code>return</code> berupa <code>JSX</code>. </li> <li><code>React Component</code> harus memiliki nama dengan Huruf Capital , contoh <code>Home</code>, <code>Latihan</code>, <code>Button</code>. </li> <li><code>React Component</code> harus bersifat <code>reusable</code> artinya dapat digunakan secara berulang-ulang.</li> <li><code>React Component</code> memilki logic baik sederhana maupun kompleks</li> <li><code>React Component</code> dapat menggunakan komponen lain maupun digunakan komponen lain (Konsep <code>Component Parent Component Child</code>).</li> <li><code>React Component</code> dapat memiliki <code>state</code> dan <code>props</code>.</li> </ul> <p>Dalam membuat React Component dari 3 cara yang bisa dilakukan</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/A.%20React%20Component/#a-class-component","title":"A. Class Component","text":"app/page.ts<pre><code>'use client'\nimport React from \"react\";\nexport default class App extends React.Component {\nrender(): React.ReactNode {\nreturn &lt;div&gt;Ini Class Component&lt;/div&gt;;\n}\n}\n</code></pre> <p>karena kita menggunakan nextjs tambahkan <code>use client</code></p> <p>Note</p> <ul> <li>Pada bahasa NextJs kita akan bahas kapan menggunakan <code>use client</code> dan tidak.</li> <li>Kita tidak akan menggunakan <code>class component</code> pada pembelajaran.</li> </ul>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/A.%20React%20Component/#b-function-component","title":"B. Function Component","text":"app/page.tsx<pre><code>export default function Home() {\nreturn (\n&lt;main&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/main&gt;\n)\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/A.%20React%20Component/#c-arrow-function-component","title":"C. Arrow Function Component","text":"app/page.tsx<pre><code>const Home = () =&gt;  {\nreturn (\n&lt;main&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/main&gt;\n)\n}\nexport default Home\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/B.%20JSX/","title":"B. JSX","text":"<p>Perhatikan  <code>React Component</code> di bawah</p> app/page.tsx<pre><code>export default function Home() {\nreturn (\n&lt;main&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/main&gt;\n)\n}\n</code></pre> <p>Pada kode di atas kita melihat kalau return dari <code>React Componenet</code> adalah element HTM. Namun sebenarnya ini bukanlah element <code>HTML</code>, namun ini adalah <code>JSX</code>.  Lalu apa kenapa bisa sama seperti <code>HTML</code>? Untuk menjawab hal tersebut mari kita pelajari mulai dari apa itu <code>JSX</code>.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/B.%20JSX/#1-apa-itu-jsx","title":"1. Apa itu JSX?","text":"<p>JSX merupakan singkatan dari <code>JavaScript XML</code>. <code>JSX</code> memungkinkan penulisan <code>HTML</code> di dalam file <code>JavaScript/React</code>. Namun sebenarnya <code>JSX</code> bukanlah <code>HTML</code> murni, malainkan kode <code>JavaScript</code> yang dibuat mirip dengan <code>HTML</code>.</p> <p>Penulisan <code>JSX</code> memiliki aturan yang berbeda dengan <code>HTML</code> biasa. Adapun aturan dalam penulisan <code>JSX</code> sebagai berikut.</p> <ul> <li>Harus mempunyai satu element parent, elemet parent bisa <code>&lt;div&gt; ... &lt;/div&gt;</code>, <code>&lt;section&gt;...&lt;/section&gt;</code> <code>&lt;React.Fragment&gt;&lt;/React.Fragment&gt;</code>.</li> <li>Setiap Element yang memilki tag pembuka dan tag penutup harus berpasangan misal :<code>&lt;p&gt; ... &lt;/p&gt;</code>, <code>&lt;h1&gt;...&lt;/h1&gt;</code>.</li> <li>Element yang tidak memilki tag pembuka dan tag penutup ditulis dengan <code>/</code> dibelakang nama element, seperti <code>&lt;input/&gt;</code> , <code>&lt;br/&gt;</code> , <code>&lt;img/&gt;</code></li> <li>Element HTML tidak boleh dibuat dengan Huruf Kapital seperti <code>&lt;H1&gt;&lt;/H1&gt;</code>, <code>&lt;Div&gt;&lt;/Div&gt;</code>.</li> <li>Huruf Kapital pada JSX digunakan memanggil Komponen.</li> <li>Property <code>class</code> pada ditulis dengan nama <code>className</code></li> <li>property pada tag ditulis dengan <code>camelCase</code> seperti <code>onClick</code>, <code>placeholder</code> , <code>name</code>, <code>className</code> dan lain-lain.</li> </ul>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/B.%20JSX/#2-contoh-salah-penulisan-jsx","title":"2. Contoh Salah Penulisan JSX","text":"Tidak memilik element root<pre><code>const Home = () =&gt;  {\nreturn (\n&lt;main&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/main&gt;\n&lt;div&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/div&gt;\n)\n}\nexport default Home\n</code></pre> mengggunakan huruf kapital pada tag HTML<pre><code>const Home = () =&gt;  {\nreturn (\n&lt;main&gt;\n&lt;H1&gt;Hello World&lt;/H1&gt;\n&lt;/main&gt;\n)\n}\nexport default Home\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/1.%20Basic/","title":"1. Props Fundamental","text":"<p>React component merupakan fungsi JavaScript, kita dapat memberikan parameter ketika menggunakannya. Namun, React component hanya dapat menerima satu parameter--berupa objek--yang biasa kita sebut dengan properties (props).</p> <p>Props di dalam JSX bisa untuk semua tipe data baik itu <code>number</code>, <code>string</code>, <code>boolean</code>,<code>array</code>, <code>object</code>, <code>function</code> dan lain-lain.</p> <p>React Data Flow</p> <p></p> <p>Sumber : https://dev.to/stuxnat/final-react-project-2poi</p> <p>Pada React Data Flow di atas dapat disimpulkan jika props adalah</p> <ul> <li>Props  dikirimkan dari parent component ke child component dan tidak bisa sebaliknya</li> <li>Props bersifat <code>immutable</code> artinya child component tidak bisa memperbaharui value props.</li> <li>Props bersifat read-only di child component.</li> <li>Jika value props diperbahaui oleh parent component , maka child component akan di render kembali.</li> </ul>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/1.%20Basic/#1-membuat-props-pada-komponen","title":"1. Membuat Props pada Komponen","text":"<p>Pada kode dibawah adalah contoh bagaimana membuat props pada komponen. </p> <p>Cara 1</p> app/component/Latihan.tsx<pre><code>interface Props {\nname: string;\nusername: string;\nage: number;\nisVerified: boolean;\n}\nexport default function Latihan(props: Props) {\nconsole.log('props', props)\nreturn (\n&lt;div className=\"container\"&gt;\n&lt;dl&gt;\n&lt;dt&gt;Name: &lt;/dt&gt;\n&lt;dd&gt;{props.name}&lt;/dd&gt;\n&lt;dt&gt;Username: &lt;/dt&gt;\n&lt;dd&gt;{props.username}&lt;/dd&gt;\n&lt;dt&gt;Age: &lt;/dt&gt;\n&lt;dd&gt;{props.age}&lt;/dd&gt;\n&lt;dt&gt;Verified: &lt;/dt&gt;\n&lt;dd&gt;{props.isVerified ? \"yes\" : \"no\"}&lt;/dd&gt;\n&lt;/dl&gt;\n&lt;/div&gt;\n);\n}\n</code></pre> <p>Pada cara 1 ini , <code>props</code> diterima sebagai <code>object</code> pada <code>argument</code>, karena kita menggunakan <code>typescript</code> maka kita define untuk <code>type data</code>.</p> <p>Kemudian ketika saat render di JSX dengan cara <code>{props.[nama_property]}</code>.</p> <p>Cara 2</p> app/component/Button.tsx<pre><code>interface ButtonProps {\ntitle: string;\nisDisabled: boolean;\n}\nconst Button: React.FC&lt;ButtonProps&gt; = ({ title, isDisabled }) =&gt; {\nreturn (\n&lt;button\ndisabled={isDisabled}\nclassName=\"w-16 h-8 rounded border bg-red-400\"\n&gt;\n{title}\n&lt;/button&gt;\n);\n};\nexport default Button;\n</code></pre> <p>Pada cara 2  , props diterima sebagai <code>Object destructuring</code> pada <code>argument</code>, terlihat kita menggukan <code>{}</code> untuk menampung nama property pada object.</p> <p>Kemudian kita ketika render pada JSX dengan cukup <code>{nama_property}</code>.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/1.%20Basic/#2-memanggil-pada-komponen-app","title":"2. Memanggil pada komponen app","text":"<p>Setelah membuat props, Kita akan memanggil komponen Latihan dan Button  yang sudah kita buat pada komponen <code>app/page.ts</code></p> app/page.ts<pre><code>import Button from \"./component/Button\";\nimport Latihan from \"./component/latihan\";\nconst Home = () =&gt; {\nreturn (\n&lt;main&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;Latihan\nname=\"ihsan\"\nusername=\"ihsanabuhanifah\"\nage={30}\nisVerified={true}\n/&gt;\n&lt;Button title=\"Simpan\" isDisabled={false} /&gt;\n&lt;Button title=\"cancel\" isDisabled={true} /&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/1.%20Basic/#3-jalankan-pada-browser","title":"3. Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/2.%20Props_children/","title":"2. Props Children","text":"<p>Dalam React, props <code>children</code> adalah salah satu cara untuk mengirimkan konten (elemen atau komponen) di antara <code>tag</code> pembuka dan penutup sebuah komponen. Dengan menggunakan <code>props children</code>, kita dapat membuat komponen yang memiliki konten dinamis di dalamnya.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/2.%20Props_children/#a-membuat-props-children","title":"A. Membuat Props Children","text":"app/component/Note.tsx<pre><code>import { ReactNode } from \"react\";\ntype status = \"warning\" | \"error\" | \"success\";\ninterface SectionProps {\ntitle: string;\nchildren: ReactNode;\nstatus: status;\n}\nconst Note: React.FC&lt;SectionProps&gt; = ({ title, status, children }) =&gt; {\nreturn (\n&lt;section className=\" border border-red-500 mt-5 rounded-lg  shadow-md px-2\"&gt;\n&lt;div className=\"border-b border-red-500  py-2 \"&gt;\n&lt;h5 className=\"font-bold text-red-500\"&gt; {title}&lt;/h5&gt;\n&lt;/div&gt;\n&lt;div className=\"py-3 text-red-500 text-sm\"&gt;{children}&lt;/div&gt;\n&lt;/section&gt;\n);\n};\nexport default Note;\n</code></pre> <p>Note</p> <p>Tipe Data untuk <code>children</code> adalah <code>ReactNode</code></p> <p>Kode di atas adalah contoh bagaimana membuat props <code>children</code>. Pada <code>props children</code> kita bisa memberikan konten apapu bersifat dinamis. Konten tersebut dapat berupa elemen <code>HTML</code> biasa, komponen-komponen <code>React</code> atau bahkan teks atau angka.</p> <p>Penggunaan umum dari <code>props children</code> adalah dalam pembuatan komponen layout yang <code>fleksibel</code> dan <code>reusable</code>, di mana konten komponen akan berbeda pada setiap penggunaannya.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/2.%20Props_children/#2-memanggil-pada-komponen-app","title":"2. Memanggil pada komponen app","text":"app/page.tsx<pre><code>import Button from \"./component/Button\";\nimport Latihan from \"./component/latihan\";\nimport Note from \"./component/Note\";\nconst Home = () =&gt; {\nreturn (\n&lt;main&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;Latihan\nname=\"ihsan\"\nusername=\"ihsanabuhanifah\"\nage={30}\nisVerified={true}\n/&gt;\n&lt;Button title=\"Simpan\" isDisabled={false} /&gt;\n&lt;Button title=\"cancel\" isDisabled={true} /&gt;\n&lt;Note title=\"Belajar ReactJS\" status='warning' &gt;\n&lt;p&gt;Saya belajar React&lt;/p&gt;\n&lt;/Note&gt;\n&lt;Note title=\"Belajar TypeScript\" status='warning' &gt;\n&lt;div className=\"bg-blue-500\"&gt;\n&lt;p className=\"text-white\"&gt;Saya sedang belajar TypeScript&lt;/p&gt;\n&lt;/div&gt;\n&lt;/Note&gt;\n&lt;Note title=\"Belajar NestJS\" status='warning' &gt;\n&lt;div className=\"bg-green-500\"&gt;\n&lt;p className=\"text-white\"&gt;Saya sedang belajar NestJS untuk menjadi backend developer&lt;/p&gt;\n&lt;/div&gt;\n&lt;/Note&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/2.%20Props_children/#3-jalankan-pada-browser","title":"3. Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/3.%20SpreadProps/","title":"3. Spread Operator","text":"<p>Spread Operator pada props <code>...props</code> digunakan untuk menggabungkan semua property defaullt pada tag html  menjadi props pada komponen. </p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/3.%20SpreadProps/#a-membuat-spread-operator","title":"A. Membuat Spread Operator","text":"app/component/InputText.tsx<pre><code>interface InputProps {\nisError?: boolean;\nmessageError?: string;\n}\nconst InputText: React.FC&lt;\nInputProps &amp; React.InputHTMLAttributes&lt;HTMLInputElement&gt;\n&gt; = ({ messageError, isError = false, ...props }) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;input\nclassName=\"w-full h-8 border border-gray-700 rounded px-2\"\n{...props}\n/&gt;\n{isError ? (\n&lt;p className=\"text-red-500 font-bold\"&gt;{messageError}&lt;/p&gt;\n) : (\n&lt;&gt;&lt;/&gt;\n)}\n&lt;/section&gt;\n);\n};\nexport default InputText;\n</code></pre> <p>Pada kode di atas, kita menggunakan <code>spread operator</code> pada <code>props</code> dengan cara <code>...props</code> dijadikan sebagai argument pada komponen. Kemudian pada kita implementasikan pada element input. Hal ini berarti kita bisa menggunakan semua <code>property</code> pada input sebagai props dari komponent <code>TextInput</code>.</p> <p>Note</p> <ul> <li><code>...props</code> diletakan pada terakhir sama mendefinsikan <code>argument</code> di komponen</li> <li>Tambahkan <code>React.InputHTMLAttributes&lt;HTMLInputElement&gt;</code> saat mendefinikasikan argument</li> </ul>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/3.%20SpreadProps/#2-memanggil-pada-komponen-app","title":"2. Memanggil pada komponen app","text":"<p>app/page.tsx<pre><code>'use client'  // gunakan use client karena ada onChange pda komponen\nimport Button from \"./component/Button\";\nimport InputText from \"./component/InputText\";\nimport Latihan from \"./component/latihan\";\nimport Note from \"./component/Note\";\nconst Home = () =&gt; {\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;InputText\nplaceholder=\"username\"\ntype=\"text\"\nisError\nmessageError=\"Username not empty\"\n/&gt;\n&lt;InputText placeholder=\"******\" type=\"passoword\" /&gt;\n&lt;InputText\nvalue={12}\nonChange={() =&gt; {\nconsole.log(\"ok\");\n}}\n/&gt;\n&lt;Button title=\"Simpan\" isDisabled={false} /&gt;\n&lt;Button title=\"cancel\" isDisabled={true} /&gt;\n&lt;Note title=\"Belajar ReactJS\" status=\"warning\"&gt;\n&lt;p&gt;Saya belajar React&lt;/p&gt;\n&lt;/Note&gt;\n&lt;Note title=\"Belajar TypeScript\" status=\"warning\"&gt;\n&lt;div className=\"bg-blue-500\"&gt;\n&lt;p className=\"text-white\"&gt;Saya sedang belajar TypeScript&lt;/p&gt;\n&lt;/div&gt;\n&lt;/Note&gt;\n&lt;Note title=\"Belajar NestJS\" status=\"warning\"&gt;\n&lt;div className=\"bg-green-500\"&gt;\n&lt;p className=\"text-white\"&gt;\nSaya sedang belajar NestJS untuk menjadi backend developer\n&lt;/p&gt;\n&lt;/div&gt;\n&lt;/Note&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> Pada kode diatas , terlihat kita memberikan props <code>placeholder</code> , <code>text</code>, <code>onChange</code> pada komponen <code>TextInput</code>. Padahal di <code>Interface InputProps</code> tidak ada , hal ini bisa terjadi karena kita mengimplementasikan <code>...props</code> pada komponen <code>TextInput</code>.</p> <p>Note</p> <ul> <li><code>props</code> yang diambil dari default property <code>...props</code> tidak bersifat required saat komponen digunakan.</li> <li>Jika ingin menjadikan props wajib saat digunakan tambahkan pada <code>Interface InputProps</code></li> </ul>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/3.%20SpreadProps/#3-jalankan-pada-browser","title":"3. Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/4.%20Conditional/","title":"4. Conditional Rendering","text":"<p>Conditional rendering artinya merender sesuatu berdasarkan kondisi tertentu, mirip pada logika IF. Ada beberapa cara melakukan menyelesaikan hal ini.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/4.%20Conditional/#1-membuat-conditional-rendering","title":"1. Membuat Conditional Rendering","text":"app/component/TextInput.tsx<pre><code>interface InputProps {\nisError?: boolean;\nmessageError?: string;\n}\nconst InputText: React.FC&lt;\nInputProps &amp; React.InputHTMLAttributes&lt;HTMLInputElement&gt;\n&gt; = ({ messageError = \"wajib di isi\", isError = false, ...props }) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;input\nclassName=\"w-full h-8 border border-gray-700 rounded px-2\"\n{...props}\n/&gt;\n{isError ? (\n&lt;p className=\"text-red-500 font-bold\"&gt;{messageError}&lt;/p&gt;\n) : (\n&lt;&gt;&lt;/&gt;\n)}\n&lt;/section&gt;\n);\n};\nexport default InputText;\n</code></pre> <p>Komponen <code>InputText</code> memiliki props isError yang mana props ini memiliki value boolean, memiliki default value adalah false dan bersifat optional.</p> <p>Pada JSX kita membuat <code>conditional Rendering</code> dengan kondisi **Jika <code>isError</code> bernilai <code>true</code> maka akan merender <code>props messageError</code> dan jika <code>false</code> maka akan merender &lt;&gt; **</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/4.%20Conditional/#2-penggil-komponen-di-app","title":"2. Penggil Komponen di app","text":"app/page.tsx<pre><code>'use client'  // gunakan use client karena ada onChange pda komponen\nimport Button from \"./component/Button\";\nimport InputText from \"./component/InputText\";\nimport Latihan from \"./component/latihan\";\nimport Note from \"./component/Note\";\nconst Home = () =&gt; {\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;InputText\nplaceholder=\"username\"\ntype=\"text\"\nisError\nmessageError=\"Username not empty\"\n/&gt;\n&lt;InputText placeholder=\"******\" type=\"passoword\" isError /&gt;\n&lt;InputText\nvalue={12}\nonChange={() =&gt; {\nconsole.log(\"ok\");\n}}\n/&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/4.%20Conditional/#3-jalankan-pada-browser","title":"3. Jalankan pada Browser","text":"<p>Perhatikan ketika <code>isError</code> bernilai <code>true</code> , maka akan merender  pesan error.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/5.%20ConditionalClassname/","title":"5. Conditional ClassName","text":"<p>Selain <code>conditional rendering</code> kita juga sering mengimplementasikan  <code>conditional className</code> berdasarkan props yand dikirim oleh <code>Parent Component</code>.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/5.%20ConditionalClassname/#1-membuat-conditional-classname","title":"1. Membuat Conditional ClassName","text":"<p>Pada contoh ini , kita akan membuat kondisi jika isError bernilai true, maka border pada <code>TextInput akan berwarna merah</code></p> app/component/TextInput.tsx<pre><code>interface InputProps {\nisError?: boolean;\nmessageError?: string;\n}\nconst InputText: React.FC&lt;\nInputProps &amp; React.InputHTMLAttributes&lt;HTMLInputElement&gt;\n&gt; = ({ messageError = \"wajib di isi\", isError = false, ...props }) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;input\nclassName={`w-full h-8 border ${\nisError ? \"border-red-500 border-2\" : \"border-gray-700\"\n} rounded px-2`}\n{...props}\n/&gt;\n{isError ? (\n&lt;p className=\"text-red-500 font-bold\"&gt;{messageError}&lt;/p&gt;\n) : (\n&lt;&gt;&lt;/&gt;\n)}\n&lt;/section&gt;\n);\n};\nexport default InputText;\n</code></pre> <p>pada property <code>className</code> kita gunakan <code>{}</code> dan membukan dengan <code>backtik ``</code> . Kemudian pada kode <code>${ isError ? \"border-red-500 border-2\" : \"border-gray-700\"}</code> kita membuat kondisi jika isError bernilai true, maka border pada <code>TextInput</code> akan berwarna merah`</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/5.%20ConditionalClassname/#2-jalankan-pada-browser","title":"2. Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/5.%20ConditionalClassname/#3-library-clsx","title":"3. Library <code>clsx</code>","text":"<p>Kita sudah berhasil membuat conditional className menggunakan <code>ternary operator</code>. Namun cara seperti ini akan merepotkan jika banya conditional className dan secara penulisan akan tidak rapi.</p> <p>Untuk membuat conditional className kita akan menggunakan library <code>clsx</code> agar kodingan kita lebih rapi dan mudah untuk di maintenance.</p> <p>dokumentasi : https://www.npmjs.com/package/clsx</p> terminal<pre><code>npm install --save clsx\n</code></pre> <p>Kemudian kita edit koding pada komponen <code>InputText</code></p> app/component/InputText.tsx<pre><code>import clsx from \"clsx\";\ninterface InputProps {\nisError?: boolean;\nmessageError?: string;\n}\nconst InputText: React.FC&lt;\nInputProps &amp; React.InputHTMLAttributes&lt;HTMLInputElement&gt;\n&gt; = ({ messageError = \"wajib di isi\", isError = false, ...props }) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;input\nclassName={clsx(`w-full h-8 border rounded px-2`, {\n\"border-red-500 border-2\": isError,  \n\"border-gray-700\": !isError,\n})}\n{...props}\n/&gt;\n{isError ? (\n&lt;p className=\"text-red-500 font-bold\"&gt;{messageError}&lt;/p&gt;\n) : (\n&lt;&gt;&lt;/&gt;\n)}\n&lt;/section&gt;\n);\n};\nexport default InputText;\n</code></pre> <p>Lihat kembali pada browser</p> <p></p> <p>Hasilnya tetap sama seperti sebelumnya</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/5.%20ConditionalClassname/#4-contoh-penggunaan-clsx","title":"4. Contoh Penggunaan <code>clsx</code>","text":"<p>Implementasikan pada komponen Note</p> app/component/Note.tsx<pre><code>import { ReactNode } from \"react\";\nimport clsx from \"clsx\";\ntype status = \"warning\" | \"error\" | \"success\";\ninterface SectionProps {\ntitle: string;\nchildren: ReactNode;\nstatus: status;\n}\nconst Note: React.FC&lt;SectionProps&gt; = ({\ntitle,\nstatus,\nchildren,\n...props\n}) =&gt; {\nreturn (\n&lt;section\nclassName={clsx(`mt-5 rounded-lg border-2  shadow-md px-2`, {\n\"border-red-500\": status === \"error\",\n\"border-yellow-500\": status === \"warning\",\n\"border-green-500\": status === \"success\",\n})}\n&gt;\n&lt;div\nclassName={clsx(`py-2 border-b-2`, {\n\"border-red-500\": status === \"error\",\n\"border-yellow-500\": status === \"warning\",\n\"border-green-500\": status === \"success\",\n})}\n&gt;\n&lt;h5\nclassName={clsx(\"font-bold\", {\n\"text-red-500\": status === \"error\",\n\"text-yellow-500\": status === \"warning\",\n\"text-green-500\": status === \"success\",\n})}\n&gt;\n{\" \"}\n{title}\n&lt;/h5&gt;\n&lt;/div&gt;\n&lt;div {...props} className=\"py-3 \"&gt;\n{children}\n&lt;/div&gt;\n&lt;/section&gt;\n);\n};\nexport default Note;\n</code></pre> <p>**Panggil kembali komponen Note di <code>app/page.tsx</code></p> app/page.tsx<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport Button from \"./component/Button\";\nimport InputText from \"./component/InputText\";\nimport Latihan from \"./component/latihan\";\nimport Note from \"./component/Note\";\nconst Home = () =&gt; {\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;InputText\nplaceholder=\"username\"\ntype=\"text\"\nisError\nmessageError=\"Username not empty\"\n/&gt;\n&lt;InputText placeholder=\"******\" type=\"passoword\" isError /&gt;\n&lt;InputText\nvalue={12}\nonChange={() =&gt; {\nconsole.log(\"ok\");\n}}\n/&gt;\n&lt;Note title=\"Belajar ReactJS\" status=\"warning\"&gt;\n&lt;p&gt;Saya belajar React&lt;/p&gt;\n&lt;/Note&gt;\n&lt;Note title=\"Belajar TypeScript\" status=\"error\"&gt;\n&lt;div className=\"bg-blue-500\"&gt;\n&lt;p className=\"text-white\"&gt;Saya sedang belajar TypeScript&lt;/p&gt;\n&lt;/div&gt;\n&lt;/Note&gt;\n&lt;Note title=\"Belajar NestJS\" status=\"success\"&gt;\n&lt;div className=\"bg-green-500\"&gt;\n&lt;p className=\"text-white\"&gt;\nSaya sedang belajar NestJS untuk menjadi backend developer\n&lt;/p&gt;\n&lt;/div&gt;\n&lt;/Note&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/6.%20Latihan/","title":"6. Latihan","text":""},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/6.%20Latihan/#latihan-1","title":"Latihan 1","text":"<p>Tambahkan <code>props id, value, name</code> menjadi <code>required/wajib</code> pada komponen <code>InputText</code>, sehingga akan <code>error</code>  pada Text Editor jika props tidak dikirimkan pada saat komponen digunakan.</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/6.%20Latihan/#latihan-2","title":"Latihan 2","text":"<p>Berikan <code>props</code>,  <code>conditional className</code> dan <code>spread operator</code> pada komponen <code>Button</code>, sehingga komponen button akan memiliki pilihan <code>User Interface</code> seperti di gambar di bawah.</p> <p></p> interface props button<pre><code>type Variant = 'solid' | 'outline'\ntype ColorSchema = 'blue' | 'red' | 'green'\ninterface ButtonProps {\ntitle: string;\nisDisabled?: boolean;\nvariant? : Variant,\ncolorSchema : ColorSchema\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/6.%20Latihan/#latihan-3","title":"Latihan 3","text":"<p>Buatlah komponen <code>Label</code> dengan <code>interface Props</code>  seperti di bawah.</p> interface props label<pre><code>interface LabelProps {\nhtmlFor: string;\nisRequired?: boolean;\ntitle:string\n} \n</code></pre> <p>Berikan tanda <code>*</code> jika Label <code>isRequired</code> bernilai <code>true</code></p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/C.%20Props/6.%20Latihan/#hasil-yang-diharapkan","title":"Hasil Yang diharapkan","text":"<p>Copy Paste Kode di bawah pada <code>app/page/tsx</code>.</p> app/page.tsx<pre><code>\"use client\"\nimport Button from \"./component/Button\";\nimport InputText from \"./component/InputText\";\nimport Label from \"./component/Label\";\nimport Latihan from \"./component/latihan\";\nimport Note from \"./component/Note\";\nconst Home = () =&gt; {\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;section&gt;\n&lt;Label title=\"username\" htmlFor=\"username\" isRequired /&gt;\n&lt;InputText\nid=\"username\"\nname=\"username\"\nvalue={\"ihsanabuhanifah\"}\nplaceholder=\"username\"\ntype=\"text\"\nmessageError=\"Username not empty\"\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label title=\"password\" htmlFor=\"password\" isRequired /&gt;\n&lt;InputText\nid=\"password\"\nname=\"password\"\nvalue={\"12345678\"}\nplaceholder=\"******\"\ntype=\"passoword\"\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label title=\"name\" htmlFor=\"name\" /&gt;\n&lt;InputText\nid=\"name\"\nname=\"name\"\nvalue={\"ihsan\"}\nonChange={() =&gt; {\nconsole.log(\"ok\");\n}}\n/&gt;\n&lt;/section&gt;\n&lt;section className=\"space-x-5\"&gt;\n&lt;Button\ntitle=\"simpan\"\nisDisabled={false}\nvariant=\"solid\"\ncolorSchema=\"blue\"\n/&gt;\n&lt;Button\ntitle=\"simpan\"\nisDisabled={true}\nvariant=\"solid\"\ncolorSchema=\"blue\"\n/&gt;\n&lt;Button\ntitle=\"Update\"\nisDisabled={false}\nvariant=\"outline\"\ncolorSchema=\"blue\"\n/&gt;\n&lt;Button\ntitle=\"Update\"\nisDisabled={true}\nvariant=\"outline\"\ncolorSchema=\"blue\"\n/&gt;\n&lt;Button\ntitle=\"Draft\"\nisDisabled={false}\nvariant=\"outline\"\ncolorSchema=\"green\"\n/&gt;\n&lt;Button title=\"batal\" isDisabled variant=\"solid\" colorSchema=\"red\" /&gt;\n&lt;Button title=\"batal\" isDisabled={false} variant=\"solid\" colorSchema=\"red\" /&gt;\n&lt;/section&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Ketika menjalankan kode di atas pada <code>app/page.jsx</code>maka pada browser seperti pada gambar di bawah.</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/1.Basic/","title":"1. State Fundamental","text":"<p>State adalah data yang dimiliki oleh sebuah komponen yang berasal dari komponen itu sendiri dan data dalam state boleh berubah. <code>useState</code> digunakan untuk membuat <code>state</code> pada <code>function component</code>.</p> <p>Pada <code>React Component</code> ketika nilai <code>state</code> berubah maka komponen akan dirender ulang dan user interface pada browser akan berubah sesuai dengan perubahan nilai dari <code>state</code> itu sendiri.</p> <p>Berikut format penulisan <code>state</code> pada <code>React Component</code></p> format penulisam<pre><code>const [nameState, setterState] = React.useState(initialValue)\n</code></pre> <p>Keterangan</p> <ul> <li><code>const/let</code> adalah keyword pendeklarasi state.</li> <li><code>nameState</code> adalah nama dari state.</li> <li><code>setterState</code> adalah nama function yang akan digunakan untuk mengubah nilai state.</li> <li><code>initialValue</code> adalah nilai awal dari state.</li> </ul> <p>Perhatian</p> <p>Pada <code>NextJS 13</code> di <code>folder app</code> ketika menggunakan <code>state</code> harus menggunakan menjadikan komponen sebagai client component dengan tanda <code>use client</code> pada awal baris kode. Pembahasan selengkapnya pada materi <code>nextjs fundamental</code>.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/1.Basic/#1-membuat-state-pada-component","title":"1. Membuat State pada <code>Component</code>","text":"<p>Berikut beberapa contoh pembuatan state pada <code>React Component</code> dengan beberapa tipe data.</p> app/page.ts<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\ntype Identitas = {\nnama: string;\nsekolah: string;\numur: number | null;\n};\ntype Hasil = {\nmata_pelajaran: string;\nnilai: number | null;\n};\nconst Home = () =&gt; {\nlet [message, setMessage] = useState(\"hai\"); // jika string, dengan data awal \"hai\"\nlet [count, setCount] = useState(0); // jika number , dengan data awal 0\nlet [isLogin, setIsLogin] = useState(false); // jika booelan, dengan data awal false\nlet [profile, setProfile] = useState&lt;Identitas&gt;({\n// jika sebuah object\nnama: \"\",\nsekolah: \"\",\numur: null,\n});\nlet [hasil, setHasil] = useState&lt;Hasil[]&gt;([]); // jika sebuah array dengan data awal array kosong\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/1.Basic/#2-render-state-pada-jsx","title":"2. Render State pada  <code>JSX</code>","text":"<p>untuk merender state pada <code>JSX</code> cara sama dengan kita merender props maupun variabel biasa di <code>JavaScript</code> yaitu dengan <code>{nama_state}</code></p> app/page.ts<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\ntype Identitas = {\nnama: string;\nsekolah: string;\numur: number | null;\n};\ntype Hasil = {\nmata_pelajaran: string;\nnilai: number | null;\n};\nconst Home = () =&gt; {\nlet [message, setMessage] = useState(\"hai\"); // jika string, dengan data awal \"hai\"\nlet [count, setCount] = useState(0); // jika number , dengan data awal 0\nlet [isLogin, setIsLogin] = useState(false); // jika booelan, dengan data awal false\nlet [profile, setProfile] = useState&lt;Identitas&gt;({\n// jika sebuah object\nnama: \"Ilham Jaya kusuma\",\nsekolah: \"SMK MADINATULQURAN\",\numur: 17,\n});\nlet [hasil, setHasil] = useState&lt;Hasil[]&gt;([\n{\nmata_pelajaran: \"matematika\",\nnilai: 80,\n},\n{\nmata_pelajaran: \"fisika\",\nnilai: 90,\n},\n{\nmata_pelajaran: \"kimia\",\nnilai: 95,\n},\n]); // jika sebuah array\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;\n&lt;p&gt;Count adalah {count}&lt;/p&gt;\n&lt;p&gt; {isLogin ? \"Sudah Login\" : \"Belum Login\"}&lt;/p&gt;\n&lt;div className=\"flex flex-col\"&gt;\n&lt;h5&gt;Nama : {profile.nama}&lt;/h5&gt;\n&lt;h5&gt;Sekolah : {profile.sekolah}&lt;/h5&gt;\n&lt;h5&gt;Umur : {profile.umur}&lt;/h5&gt;\n&lt;/div&gt;\n&lt;div&gt;\n&lt;h2&gt;Daftar Nilai&lt;/h2&gt;\n{hasil.map((n, index) =&gt; (\n&lt;section key={index}&gt;\n&lt;h5&gt;Nama Mata pelajaran : {n.mata_pelajaran} &lt;/h5&gt;\n&lt;h5&gt;Nilai : {n.nilai} &lt;/h5&gt;\n&lt;/section&gt;\n))}\n&lt;/div&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Pada kode di atas adalah contoh bagaimana state di render pada komponen, baik itu <code>string</code>, <code>number</code>, <code>boolean</code>, <code>object</code> maupun <code>array</code>.</p> <p>Note</p> <p><code>List Rendering</code> pada ssat merender <code>Array</code> pada <code>JSX</code> akan dibahas pada materi selanjutnya.</p> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/1.Basic/#2-function-updater","title":"2. Function Updater","text":"<p><code>Function Updater</code> merupakan suatu <code>function</code> untuk merubah <code>value</code> dari <code>state</code>. Merubah <code>value</code> dengan <code>function updater</code> merupakan cara yang paling aman dan best practice. <code>Function Update</code> biasanya diberikan nama <code>setNamaState</code>, seperti pada contoh <code>let [message, setMessage] = useState(\"hai\")</code> maka <code>setMessage</code> merupakan <code>function Updater</code> dari <code>state message</code>.</p> <p>Berikut contoh pengunaan <code>Function Updater</code>  pada komponen.</p> app/page.tsx<pre><code>...\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;Button\ntitle=\"Hello\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Hello\");\n}}\n/&gt;\n&lt;Button\ntitle=\"Salam\"\nvariant=\"outline\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Assalamualaikum\");\n}}\n/&gt;\n&lt;p&gt;Count adalah {count}&lt;/p&gt;\n&lt;Button\ntitle=\"Tambah\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetCount((prevCount) =&gt; prevCount + 1);\n}}\n/&gt;\n&lt;Button\ntitle=\"Kurang\"\nisDisabled={count &lt; 1}\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={() =&gt; {\nsetCount((prevCount) =&gt; prevCount - 1);\n}}\n/&gt;\n&lt;p&gt; {isLogin ? \"Sudah Login\" : \"Belum Login\"}&lt;/p&gt;\n&lt;Button\ntitle=\"Login\"\nisDisabled={isLogin === true}\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetIsLogin(true);\n}}\n/&gt;\n&lt;Button\ntitle=\"Logout\"\nisDisabled={isLogin === false}\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={() =&gt; {\nsetIsLogin(false);\n}}\n/&gt;\n&lt;div className=\"flex flex-col\"&gt;\n&lt;h5&gt;Nama : {profile.nama}&lt;/h5&gt;\n&lt;h5&gt;Sekolah : {profile.sekolah}&lt;/h5&gt;\n&lt;h5&gt;Umur : {profile.umur}&lt;/h5&gt;\n&lt;/div&gt;\n&lt;Button\ntitle=\"Ubah Nama\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetProfile((prevProfile) =&gt; {\nreturn {\n...prevProfile,\nnama: \"Ilham Maulana Fikri\",\n};\n});\n}}\n/&gt;\n&lt;Button\ntitle=\"Update\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetProfile((prevProfile) =&gt; {\nreturn {\n...prevProfile,\nsekolah: \"SMP MADINATULQURAN\",\n};\n});\n}}\n/&gt;\n&lt;div&gt;\n&lt;h2&gt;Daftar Nilai&lt;/h2&gt;\n{hasil.map((n, index) =&gt; (\n&lt;section key={index}&gt;\n&lt;h5&gt;Nama Mata pelajaran : {n.mata_pelajaran} &lt;/h5&gt;\n&lt;h5&gt;Nilai : {n.nilai} &lt;/h5&gt;\n&lt;/section&gt;\n))}\n&lt;Button\ntitle=\"Tambah\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetHasil((prevHasil) =&gt; {\nreturn [\n...prevHasil,\n{\nmata_pelajaran: \"B. Indonesia\",\nnilai: 100,\n},\n];\n});\n}}\n/&gt;\n&lt;Button\ntitle=\"Kurang\"\nisDisabled={hasil.length &lt;= 1}\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={() =&gt; {\nsetHasil((prevHasil) =&gt; {\nprevHasil.pop();\nreturn [...prevHasil];\n});\n}}\n/&gt;\n&lt;/div&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Pengujian pada Postman</p> <p></p> <p>Cara Penggunaan <code>function updater</code> tidak hanya seperti contoh di atas, sering dengen perkembangan materi kita akan mempelajari cara-cara yang lainnya. </p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/2.%20state_as_props/","title":"2. State sebagai Props","text":"<p>Pada dasarnya state adalah data yang dimiliki oleh sebuah komponen dan dikelola oleh komponen itu sendiri. Namun kita dapat mengirimkan <code>state</code> dan <code>function updater</code> ke komponen lain melalui sebuah props. Kita dapat mengirimkan <code>state</code>saja, <code>function updater</code>saja, atau keduanya. </p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/2.%20state_as_props/#1-buat-komponen-belajarstate","title":"1. Buat Komponen BelajarState","text":"<p>Pada contoh ini, kita buat terlebih dahulu Komponen BelajarState, dimana komponen ini akan meneriman <code>props</code> dari komponen <code>parent</code>. <code>Props</code> yang dikirimkan oleh <code>parent</code> adalah <code>state</code> dan <code>function updater</code> yang ada pada komponen <code>parent</code></p> app/module.belajarState.tsx<pre><code>import Button from \"../component/Button\";\nimport { Dispatch, SetStateAction } from \"react\";\nimport { Hasil, Identitas } from \"../page\";\ninterface BelajarStateProps {\nhasil: Hasil[];\nsetHasil: Dispatch&lt;SetStateAction&lt;Hasil[]&gt;&gt;;\nprofile: Identitas;\nsetProfile: Dispatch&lt;SetStateAction&lt;Identitas&gt;&gt;;\n}\nconst BelajarState: React.FC&lt;BelajarStateProps&gt; = ({\nhasil,\nsetHasil,\nprofile,\nsetProfile,\n}) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;h1&gt;Belajar Event&lt;/h1&gt;\n&lt;div className=\"flex flex-col\"&gt;\n&lt;h5&gt;Nama : {profile.nama}&lt;/h5&gt;\n&lt;h5&gt;Sekolah : {profile.sekolah}&lt;/h5&gt;\n&lt;h5&gt;Umur : {profile.umur}&lt;/h5&gt;\n&lt;/div&gt;\n&lt;Button\ntitle=\"Ubah Nama\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetProfile((prevProfile) =&gt; {\nreturn {\n...prevProfile,\nnama: \"Ilham Maulana Fikri\",\n};\n});\n}}\n/&gt;\n&lt;Button\ntitle=\"Update\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetProfile((prevProfile) =&gt; {\nreturn {\n...prevProfile,\nsekolah: \"SMP MADINATULQURAN\",\n};\n});\n}}\n/&gt;\n&lt;div&gt;\n&lt;h2&gt;Daftar Nilai&lt;/h2&gt;\n{hasil.map((n, index) =&gt; (\n&lt;section key={index}&gt;\n&lt;h5&gt;Nama Mata pelajaran : {n.mata_pelajaran} &lt;/h5&gt;\n&lt;h5&gt;Nilai : {n.nilai} &lt;/h5&gt;\n&lt;/section&gt;\n))}\n&lt;/div&gt;\n&lt;Button\ntitle=\"Tambah\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetHasil((prevHasil) =&gt; {\nreturn [\n...prevHasil,\n{\nmata_pelajaran: \"B. Indonesia\",\nnilai: 100,\n},\n];\n});\n}}\n/&gt;\n&lt;Button\ntitle=\"Kurang\"\nisDisabled={hasil.length &lt;= 1}\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={() =&gt; {\nsetHasil((prevHasil) =&gt; {\nprevHasil.pop();\nreturn [...prevHasil];\n});\n}}\n/&gt;\n&lt;/section&gt;\n);\n};\nexport default BelajarState;\n</code></pre> <p>Kode <code>interface BelajarStateProps</code> merupakan deklarasi dari tipe data sebuah state. Sebuah <code>function updater</code> didefinisikan dengan <code>Dispatch&lt;SetStateAction&lt;Hasil[]&gt;&gt;;</code>, dimana <code>Hasil[]</code> tergantung dari <code>state-nya</code>.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/2.%20state_as_props/#2-panggil-komponen-belajarstate","title":"2. Panggil Komponen BelajarState","text":"app/page.tsx<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport BelajarState from \"./module/belajarState\";\nexport type Identitas = {\nnama: string;\nsekolah: string;\numur: number | null;\n};\nexport type Hasil = {\nmata_pelajaran: string;\nnilai: number | null;\n};\nconst Home = () =&gt; {\nlet [profile, setProfile] = useState&lt;Identitas&gt;({\n// jika sebuah object\nnama: \"Ilham Jaya kusuma\",\nsekolah: \"SMK MADINATULQURAN\",\numur: 17,\n});\nlet [hasil, setHasil] = useState&lt;Hasil[]&gt;([\n{\nmata_pelajaran: \"matematika\",\nnilai: 80,\n},\n{\nmata_pelajaran: \"fisika\",\nnilai: 90,\n},\n{\nmata_pelajaran: \"kimia\",\nnilai: 95,\n},\n]); // jika sebuah array\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;BelajarState hasil={hasil} setHasil={setHasil} profile={profile} setProfile={setProfile} /&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/2.%20state_as_props/#3-jalankan-pada-browser","title":"3. Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/D.%20State/3.%20latihan/","title":"3. Latihan","text":"<p>Latiha ini bertujuan agar kita lebih memahami konsep dari state dan props.</p> <p>Pertama copy paste kode di bawah ke app/page.tsx</p> app/page.tsx<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport BelajarState from \"./module/belajarState\";\nimport Card from \"./latihan/Card\";\nimport Button from \"./component/Button\";\nimport InputText from \"./component/InputText\";\nexport type Identitas = {\nnama: string;\nsekolah: string;\numur: number | null;\n};\nexport type Hasil = {\nmata_pelajaran: string;\nnilai: number | null;\n};\nconst Home = () =&gt; {\nlet [tanggal, setTanggal] = useState(0);\nlet [bulan, setBulan] = useState(\"Agustus\");\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Latihan&lt;/h1&gt;\n&lt;Card\nbulan={bulan}\ntanggal={tanggal}\nsetTanggal={setTanggal}\nsetBulan={setBulan}\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nsetTanggal((c) =&gt; c + 1);\n}}\ncolorSchema=\"blue\"\ntitle=\"tambah\"\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nsetTanggal((c) =&gt; c - 1);\n}}\ncolorSchema=\"red\"\ntitle=\"kurang\"\n/&gt;\n&lt;InputText\nid=\"bulan\"\nname={\"bulan\"}\nvalue={bulan}\nonChange={(e) =&gt; {\nsetBulan(e.target.value);\n}}\n/&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Tugas</p> <ol> <li>Buatlah komponen Card yang menerima state tanggal dan bulan.</li> <li>Jika kode tersebut dijalankan maka harus mendapatkan tampilan seperti di bawah.</li> <li>Jika <code>button tambah</code>  di klik, maka angka akan bertambah</li> <li>Jika <code>button kurang</code> di klik, maka angka akan berkurang</li> <li>Jika <code>input</code> berubah, maka nama bulan akan berubah</li> <li>Jika <code>button clear</code> di klik maka tampilan akan kembali seperti awal, tanggal 0 dan bulan Agustus</li> </ol> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/E.%20List%20Rendering/list/","title":"1. List Rendering","text":"<p>List rendering  merupakan bagaimana cara react merender data dari sebuah array menjadi list pada  <code>JSX</code>.</p> <p>Pada contoh <code>state</code>, kita sudah mengimplementasikan list rendering pada kode</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/E.%20List%20Rendering/list/#1-list-rendering_1","title":"1. List Rendering","text":"app/page.tsx<pre><code>  {hasil.map((n, index) =&gt; (\n&lt;section key={index}&gt;\n&lt;h5&gt;Nama Mata pelajaran : {n.mata_pelajaran} &lt;/h5&gt;\n&lt;h5&gt;Nilai : {n.nilai} &lt;/h5&gt;\n&lt;/section&gt;\n))}\n</code></pre> <p>Dalam membuat <code>list rendering</code> pada <code>JSX</code> harus memperhatikan hal-hal berikut.</p> <ul> <li>Menggunakan <code>method map</code> pada array.</li> <li>return dari <code>method map</code> merupakan <code>JSX</code> dan memiliki element <code>parent</code>.</li> <li>Pada element <code>parent</code> diberikan props <code>key</code> dengan value harus <code>unique</code>, biasanya menggunakan <code>id</code> dari item atau <code>index</code> dari array.</li> </ul>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/E.%20List%20Rendering/list/#2-conditional-list-rendering","title":"2. Conditional List Rendering","text":"<p>Pada contoh ini kita membuat kondisi jika jumlah  <code>item</code> pada <code>array</code> adalah 0 , maaka akan ditampikan pesan Data Tidak Ditemukan</p> app/page.tsx<pre><code>  \"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport Button from \"./component/Button\";\ntype Hasil = {\nmata_pelajaran: string;\nnilai: number | null;\n};\nconst Home = () =&gt; {\nlet [hasil, setHasil] = useState&lt;Hasil[]&gt;([]); // jika sebuah array\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;div&gt;\n&lt;h2&gt;Daftar Nilai&lt;/h2&gt;\n{hasil.length === 0 ? (\n&lt;p className=\"text-red-500\"&gt;Data tidak ditemukan&lt;/p&gt;\n) : (\nhasil.map((n, index) =&gt; (\n&lt;section key={index}&gt;\n&lt;h5&gt;Nama Mata pelajaran : {n.mata_pelajaran} &lt;/h5&gt;\n&lt;h5&gt;Nilai : {n.nilai} &lt;/h5&gt;\n&lt;/section&gt;\n))\n)}\n&lt;/div&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>hasil.length === 0</p> <p></p> <p>hasil memiliki data</p> <p></p> <p>Warning</p> <p><code>Conditional List Rendering</code>  memilki banyak varian, kuncinya adalah kita memahami logic conditonal <code>IF ELSE ELSE IF</code> di <code>javascript</code></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/","title":"1. Event Handling","text":"<p><code>Event Handling</code> adalah  cara program/aplikasi merespons aksi yang terjadi, seperti mengklik tombol, mengetikkan sesuatu, atau melakukan <code>event</code> lain. Ketika suatu <code>event</code> terjadi, program akan mengeksekusi <code>event</code> yang telah ditentukan sebelumnya untuk merespons aksi tersebut. <code>Event handling</code> memungkinkan program/aplikasi berinteraksi dengan user secara dinamis.</p> <p>Ada beberapa contoh <code>event</code> yang sering kita gunakan  di HTML, seperti berikut</p> <ul> <li><code>mouse</code>: ada event onClick, onDoubleClick, onMouseEnter, onContextMenu, onDrag, onDrop.</li> <li><code>keyboard</code>: ada event onKeyDown, onKeyUp, &amp; onKeyPress.</li> <li><code>focus</code>: ada event onFocus &amp; onBlur</li> <li><code>form</code>: ada event onSubmit, onInput, &amp; onChange</li> <li><code>clipboard</code>: ada event onCopy, onCut, &amp; onPaste</li> <li><code>selection</code>: ada event onSelect</li> <li><code>image</code>: ada event onLoad &amp; onError</li> <li>t<code>ouch</code>: ada event onTouchStart, onTouchCancel, onTouchEnd &amp; onTouchMove</li> <li><code>UI</code>: ada event onScroll</li> </ul> <p>Penulisan <code>event</code> pada property element menggunakan <code>camelCase</code> seperi <code>onChange</code>, <code>onClick</code> dan lain-lain. Pada materi <code>state</code>, kita sudah menggunakan <code>event</code> yang ada pada <code>property</code> element dengan cara inline.</p> app/page.ts<pre><code>...\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;Button\ntitle=\"Hello\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Hello\");\n}}\n/&gt;\n&lt;/div&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p><code>event</code> di property akan memanggil <code>function</code>, baik itu secara inline maupun kita dekralasikan terlebih dahulu. Dalam membuat <code>event</code> di ReactJS , kita dapat menggunakan beberapa cara sebagai berikut.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/#1-event-dengan-inline","title":"1. Event dengan Inline","text":"<p><code>Inline</code> artinya kita langsung memanggil <code>function</code> di dalam <code>event</code> tanpa dideklarasikan terlebuh dahulu.</p> <p>app/page.ts<pre><code>...\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;Button\ntitle=\"Hello\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Hello\");\n}}\n/&gt;\n&lt;/div&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> Pada contoh di atas , kita memanggil function di <code>onClick</code> tanpa didekrasikan terlebih dahulu. Ketika button di klik , maka akan memanggil <code>function updater</code> untuk merubah  <code>message</code> menjadi hello.</p> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/#2-deklarasikan-function-tanpa-argument","title":"2. Deklarasikan <code>Function</code> tanpa <code>argument</code>","text":"<p>Kita bisa  mendeklarasikan <code>function</code> terlebih dahulu , kemudian kita panggil <code>function</code> tersebut di <code>event onClick</code>. </p> app/page.ts<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport Button from \"./component/Button\";\nconst Home = () =&gt; {\nlet [message, setMessage] = useState(\"hai\"); // jika string, dengan data awal \"hai\"\nlet [count, setCount] = useState(0); // jika number , dengan data awal 0\nconst increment = () =&gt; {\nsetCount((c) =&gt; c + 1);\n};\nconst decrement = () =&gt; {\nsetCount((c) =&gt; c - 1);\n};\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;Button\ntitle=\"Hello\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Hello\");\n}}\n/&gt;\n&lt;div&gt;{count}&lt;/div&gt;\n&lt;Button\ntitle=\"Tambah\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={increment}\n/&gt;\n&lt;Button\ntitle=\"Kurang\"\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={decrement}\n/&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Pada contoh di atas, kita deklarasikan dua <code>function</code> yaitu <code>increment</code> dan <code>decrement</code> , kemudian kita panggil di dalam <code>onClick</code>.</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/#3-deklarasikan-function-dengan-argument-event-type","title":"3. Deklarasikan <code>function</code> dengan  <code>argument event type</code>","text":"<p><code>argument</code> dari function juga bisa merupakan <code>event type</code> yang mana nanti kita bisa mengakes propery dari suatu element HTML seperti <code>nama</code>, <code>value</code>, <code>id</code> dan lain-lain. Berikut contoh bagaimana membuat function dengan <code>argument event type</code> dan cara menggunakannnya pada <code>event</code>.</p> app/page.ts<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport InputText from \"../component/InputText\";\nimport { ChangeEvent } from \"react\";\nconst Home = () =&gt; {\nlet [message, setMessage] = useState(\"hai\"); // jika string, dengan data awal \"hai\"\nlet [count, setCount] = useState(0); // jika number , dengan data awal 0\nlet [payload, setPayload] = useState({\nname: \"\",\npassword: \"\",\nemail: \"\",\nalamat: \"\",\n});\nconst handleChange = (event: ChangeEvent&lt;any&gt;) =&gt; {\nsetPayload(() =&gt; {\nreturn {\n...payload,\n[event.target.name]: event.target.value,\n};\n});\n};\nconsole.log(\"pay\", payload);\nreturn (\n&lt;main className=\"space-y-5 p-10\"&gt;\n{JSON.stringify(payload)}\n&lt;InputText\nid=\"name\"\nname=\"name\"\nplaceholder=\"name\"\nvalue={payload.name}\nonChange={(event) =&gt; {\nconsole.log(\"eve\", event.target.value);\nsetPayload(() =&gt; {\nreturn {\n...payload,\nname: event.target.value,\n};\n});\n}}\n/&gt;\n&lt;InputText\nid=\"name\"\nplaceholder=\"name\"\nname=\"name\"\nvalue={payload.name}\nonChange={handleChange}\n/&gt;\n&lt;InputText\nid=\"password\"\nplaceholder=\"password\"\nname=\"password\"\nvalue={payload.password}\nonChange={handleChange}\n/&gt;\n&lt;InputText\nid=\"email\"\nplaceholder=\"email\"\nname=\"email\"\nvalue={payload.email}\nonChange={(e: ChangeEvent) =&gt; {\nhandleChange(e);\n}}\n/&gt;\n&lt;InputText\nid=\"alamat\"\nname=\"alamat\"\nplaceholder=\"alamat\"\nvalue={payload.alamat}\nonChange={(e: ChangeEvent) =&gt; {\nhandleChange(e);\n}}\n/&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Kita bisa langsung memanggil nama <code>function</code> pada <code>onChange</code> dan tidak menuliskan <code>argument</code> nya, seperti pada kode <code>onChange={handleChange}</code>.<code>JSX</code> akan secara otomatis memberikan <code>argument</code> yang diberikan yaitu <code>event type</code> dari suatu element. </p> <p>Selain itu, kita juga bisa memanggil <code>function</code> seperti inline, namun dalam <code>function</code> itu memanggil <code>function handleChange</code> dan memberikan <code>argument</code> event <code>onChange={(event)=&gt; {handleChange(event)}}</code>.</p> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/#4-deklarasikan-function-dengan-argument","title":"4. Deklarasikan <code>function</code> dengan <code>argument</code>","text":"<p>Sebelumnya kita belajar membuat <code>function</code> untuk  <code>event</code> jika <code>argumentnya</code> adalah sebuah <code>event type</code>, selain itu kita bisa membuat <code>function</code> yang digunakan dalam <code>event</code> dengan <code>argument</code> bebas. <code>Argument</code> yang diberikan bisa satu maupun lebih dari satu.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/#function-dengan-satu-argument","title":"<code>Function</code> dengan satu <code>argument</code>","text":"app/page.tsx<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport Button from \"./component/Button\";n\nconst Home = () =&gt; {\nlet [message, setMessage] = useState(\"hai\"); // jika string, dengan data awal \"hai\"\nlet [count, setCount] = useState(0); // jika number , dengan data awal 0\nconst handleSubmit = (id : number) =&gt; {\nalert(id)\n}\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;Button\ntitle=\"Hello\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Hello\");\n}}\n/&gt;\n&lt;div&gt;{count}&lt;/div&gt;\n&lt;Button\ntitle=\"10\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={()=&gt; {\nhandleSubmit(10)\n}}\n/&gt;\n&lt;Button\ntitle=\"100\"\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={()=&gt; {\nhandleSubmit(100)\n}}\n/&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/#function-dengan-lebih-dari-argument","title":"<code>Function</code> dengan lebih dari <code>argument</code>","text":"app/page.tsx<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport Button from \"./component/Button\";\nconst Home = () =&gt; {\nlet [message, setMessage] = useState(\"hai\"); // jika string, dengan data awal \"hai\"\nlet [count, setCount] = useState(0); // jika number , dengan data awal 0\nconst handleSubmit = (id : number, nama : string) =&gt; {\nalert(`nama adalah ${nama} dengan id adalah ${id}`)\n}\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;Button\ntitle=\"Hello\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Hello\");\n}}\n/&gt;\n&lt;div&gt;{count}&lt;/div&gt;\n&lt;Button\ntitle=\"10\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={()=&gt; {\nhandleSubmit(10, \"ihsan\")\n}}\n/&gt;\n&lt;Button\ntitle=\"100\"\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={()=&gt; {\nhandleSubmit(100, \"akbar\")\n}}\n/&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/F.%20Event/1.%20Event_handle/#5-function-sebagai-suatu-props","title":"5. Function sebagai suatu Props","text":"<p>Pada struktur project reactjs, terkadang ada kebuutuhan yang mengharuskan kita membuat <code>function</code> pada komponen <code>parent</code> dan dikirimkan ke komponen <code>child</code> sebagai sebuah props. Berikut contoh bagaimana mengimplentasikan hal tersebut.</p> <p>Membuat Komponen Belajar di folder module</p> app/module/belajar.tsx<pre><code>import Button from \"../component/Button\";\ninterface BelajarProps {\nhandleSubmit: (a: number, b: string) =&gt; void;\n}\nconst BelajarEvent: React.FC&lt;BelajarProps&gt; = ({ handleSubmit }) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;h1&gt;Belajar Event&lt;/h1&gt;\n&lt;Button\ntitle=\"testing\"\ncolorSchema=\"green\"\nonClick={() =&gt; {\nhandleSubmit(200, \"akbar\");\n}}\n/&gt;\n&lt;/section&gt;\n);\n};\nexport default BelajarEvent;\n</code></pre> <p>Panggil di app/page.tsx</p> app/page.tsx<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { useState } from \"react\";\nimport Button from \"./component/Button\";\nimport BelajarEvent from \"./module/belajar\";\nconst Home = () =&gt; {\nlet [message, setMessage] = useState(\"hai\"); // jika string, dengan data awal \"hai\"\nlet [count, setCount] = useState(0); // jika number , dengan data awal 0\nconst handleSubmit = (id : number, nama : string) =&gt; {\nalert(`nama adalah ${nama} dengan id adalah ${id}`)\n}\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n&lt;h1&gt;Hello World&lt;/h1&gt;\n&lt;p&gt;message addalah {message}&lt;/p&gt;{\" \"}\n&lt;Button\ntitle=\"Hello\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={() =&gt; {\nsetMessage(\"Hello\");\n}}\n/&gt;\n&lt;div&gt;{count}&lt;/div&gt;\n&lt;Button\ntitle=\"10\"\nvariant=\"solid\"\ncolorSchema=\"blue\"\nonClick={()=&gt; {\nhandleSubmit(10, \"ihsan\")\n}}\n/&gt;\n&lt;Button\ntitle=\"100\"\nvariant=\"solid\"\ncolorSchema=\"red\"\nonClick={()=&gt; {\nhandleSubmit(100, \"akbar\")\n}}\n/&gt;\n&lt;BelajarEvent handleSubmit={handleSubmit} /&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Pada kode di atas adalah contoh  bagaimana <code>function</code> yang dibuat di komponen <code>parent</code> dikirimkan ke <code>child</code> melalui <code>props.</code> Kemudian pada komponen  <code>child</code> kita menggunakan <code>function</code> tersebut dan memanggilnya dalam <code>event</code></p> <p></p> <p>Warning</p> <p>Latihan sangat diperlukan untuk memahami materi ini, buatlah latihan mandiri dan diskusikan dengan guru.</p>"},{"location":"3.%20NextJS%20-%20Frontend/2.%20React%20Fundamental/H.%20Form/1.%20form/","title":"1. Form Handle","text":"<p>Pada materi ini kita akan mempelajari basic dari bagaimana membuat form pada reactjs. Setiap aplikasi pasti memiliki form yang digunakan untuk menyimpan data dan mengupdate data. Hal ini sudah umum dan pasti kita semua pernah mengguankan form yang ada pada aplikasi.</p> component/select.tsx<pre><code>import clsx from \"clsx\";\nimport { ChangeEvent } from \"react\";\ntype Variant = \"solid\" | \"outline\";\ntype ColorSchema = \"blue\" | \"red\" | \"green\";\ninterface ButtonProps {\noptions: { value: string | number; label: string }[];\nname: string;\nisError?: boolean;\nmessageError?: string;\nid: string;\nvalue: string | number | null;\nonChange: (e: ChangeEvent&lt;HTMLSelectElement&gt;) =&gt; void;\n}\nconst Select: React.FC&lt;\nButtonProps &amp; React.SelectHTMLAttributes&lt;HTMLSelectElement&gt;\n&gt; = ({\noptions,\nvalue,\nname,\nid,\nmessageError = \"wajib di isi\",\nisError = false,\n...props\n}) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;select\nvalue={value}\nname={name}\nid={id}\nclassName={clsx(`w-full h-8 border rounded px-2`, {\n\"border-red-500 border-2\": isError,\n\"border-gray-700\": !isError,\n})}\n{...props}\n&gt;\n{!!value === false &amp;&amp; &lt;option&gt;Pilih&lt;/option&gt;}\n{options?.map((option, index) =&gt; (\n&lt;option key={index} value={option.value}&gt;\n{option.label}\n&lt;/option&gt;\n))}\n&lt;/select&gt;\n{isError ? (\n&lt;p className=\"text-red-500 font-bold\"&gt;{messageError}&lt;/p&gt;\n) : (\n&lt;&gt;&lt;/&gt;\n)}\n&lt;/section&gt;\n);\n};\nexport default Select;\n</code></pre> app/page.tsx<pre><code>\"use client\"; // gunakan use client karena ada onChange pda komponen\nimport { ChangeEvent, useState } from \"react\";\nimport BelajarState from \"./module/belajarState\";\nimport Card from \"./latihan/Card\";\nimport Button from \"./component/Button\";\nimport InputText from \"./component/InputText\";\nimport Select from \"./component/Select\";\nimport Label from \"./component/Label\";\ninterface Value {\ntitle: string;\nauthor: string;\nyear: number | string;\n}\nconst Home = () =&gt; {\nconst [values, setValues] = useState&lt;Value&gt;({\ntitle: \"\",\nauthor: \"\",\nyear: \"\",\n});\nconst handleChange = (event: ChangeEvent&lt;any&gt;) =&gt; {\nsetValues((prevValues) =&gt; {\nreturn {\n...prevValues,\n[event.target.name]: event.target.value,\n};\n});\n};\nconst handleSubmit = (e: ChangeEvent&lt;any&gt;) =&gt; {\ne.preventDefault();\nalert(JSON.stringify(values));\n};\nreturn (\n&lt;main className=\"space-y-5\"&gt;\n{JSON.stringify(values)}\n&lt;h1 className=\"text-red-500 font-bold\"&gt;Latihan Form&lt;/h1&gt;\n&lt;form onSubmit={handleSubmit} className=\"space-y-3\"&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"author\" isRequired title=\"Penulis\" /&gt;\n&lt;InputText\nplaceholder=\"Nama Penulis buku\"\nid=\"author\"\nname=\"author\"\nvalue={values.author}\nonChange={handleChange}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"title\" isRequired title=\"Judul Buku\" /&gt;\n&lt;InputText\nplaceholder=\"Nama Judul buku\"\nid=\"title\"\nname=\"title\"\nvalue={values.title}\nonChange={handleChange}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"year\" title=\"Tahun Terbit\" /&gt;\n&lt;Select\nvalue={values.year}\nname=\"year\"\nonChange={handleChange}\nisError\nid=\"year\"\noptions={[\n{\nvalue: 2020,\nlabel: \"2020\",\n},\n{\nvalue: 2021,\nlabel: \"2021\",\n},\n{\nvalue: 2022,\nlabel: \"2022\",\n},\n{\nvalue: 2023,\nlabel: \"2023\",\n},\n]}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button type=\"submit\" colorSchema=\"blue\" title=\"Simpan\" /&gt;\n&lt;/section&gt;\n&lt;/form&gt;\n&lt;/main&gt;\n);\n};\nexport default Home;\n</code></pre> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/A.%20useState/","title":"A. useState","text":"<p>useState merupakan <code>react hook</code> untuk membuat state dan fungsi update <code>state</code> pada <code>Function Component</code> dapat.</p> <p>Penjelasan <code>state</code> dapat kita lihat pda materi <code>state fundamental</code></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/B.%20useEffect/","title":"B. useEffect","text":"<p><code>useEffect</code> adalah salah satu hook penting dalam React yang memungkinkan kita untuk menangani side effects  dalam <code>function component</code>. <code>Side effects</code> adalah tindakan yang terjadi di luar lingkup pembaruan tampilan normal, seperti berlangganan data, memanggil API, memperbarui DOM, dan sejenisnya.</p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/B.%20useEffect/#1-penggunaaan-useeffect","title":"1. Penggunaaan  useEffect","text":"format penulisan<pre><code>useEffect(fn, deps)\n</code></pre> <p>Note</p> <ul> <li><code>fn</code> merupakan <code>function</code> yang akan kita berikan ke dalam useEffect agar dipanggil setelah komponen selesai melakukan render. </li> <li><code>deps</code> adalah <code>Array</code> berisi identifier baik variabel atau fungsi yang akan menyebabkan <code>fn</code> dipanggil lagi saat nilai <code>identifier</code> tersebut mengalami perubahan. </li> <li>Pada Nextjs 13, gunakan <code>client component</code> jika menggunakan <code>useEffect</code> dengan menambahkan kode <code>'use client'</code></li> </ul> <p>Warning</p> <p>Peringatan! fungsi <code>fn</code> tidak boleh <code>async</code>. Jika perlu fungsi <code>async</code> bikin fungsi lain di luar <code>effect</code> kemudian panggil di dalam <code>effect</code>.</p> <p>Berikut ini contoh sederhana dari <code>useEffect</code></p> Contoh useEffect<pre><code>'use client'\nimport { useEffect } from \"react\";\nconst Home = () =&gt; {\nuseEffect(() =&gt; {\nconsole.log(\"effect berjalan\");\n}, []);\nreturn &lt;div&gt;Belajar useEffect&lt;/div&gt;;\n};\nexport default Home;\n</code></pre> <p>Pada kode di atas, jika komponen di render maka komponen akan menjalankan kode yang ada di dalam <code>useEffect</code> dalam hal ini adalah <code>console.log(\"effect berjalan\")</code>. </p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/B.%20useEffect/#2-useeffect-tanpa-array-dependency","title":"2. <code>useEffect</code> tanpa <code>array dependency</code>","text":"<p>Jika kita membuat <code>useEffect</code> tanpa memberikan array depedency maka useEffect akan dipanggil terus menerus setiap kali komponen di <code>render</code>, baik  <code>render</code> pertama maupun <code>re-render</code> berikutnya. Seperti contoh berikut.</p> Contoh useEffect tanpa array depedency<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nconst Home = () =&gt; {\nlet [count, setCount] = useState(0);\nuseEffect(() =&gt; {\nsetCount((c) =&gt; c + 1);\nconsole.log('useEffect berjalan')\n});\nreturn &lt;div&gt;{count}&lt;/div&gt;;\n};\nexport default Home;\n</code></pre> <p>Pada kode di atas, kita membuat <code>useEffect</code> tanpa memberikan <code>array depedency</code>, maka yang terjadi adalah useEffect akan berjalan terus menerus. Hal ini tidak disarankan karena akan membuat aplikasi menjadi crash.</p> <p>Jalankan pada browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/B.%20useEffect/#3-useeffect-dengan-array-dependency-kosong","title":"3. <code>useEffect</code> dengan <code>array dependency</code> kosong","text":"<p>Jika kita memberikan <code>array</code> kosong pada <code>depedency</code> maka <code>useEffect</code> hanya akan dijalankan sekali saja pada <code>render</code> pertama.</p> Contoh useEffect dengan array kosong<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nconst Home = () =&gt; {\nlet [count, setCount] = useState(0);\nuseEffect(() =&gt; {\nsetCount((c) =&gt; c + 1)\nconsole.log('useEffect berjalan')\n},[]);\nreturn &lt;div&gt;{count}&lt;/div&gt;;\n};\nexport default Home;\n</code></pre> <p>Pada kode diatas, <code>useEffect</code> akan dijalankan sekali ketika render pertama yang akan mengupdate nilai dari count.</p> <p>Jalankan pada browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/B.%20useEffect/#4-useeffect-dengan-array-dependency","title":"4. <code>useEffect</code> dengan <code>array dependency</code>","text":"contoh useEffet dengan array depedency<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nimport InputText from \"./component/InputText\";\nconst Home = () =&gt; {\nlet [count, setCount] = useState(0);\nlet [text, setText] = useState(\"\");\nuseEffect(() =&gt; {\nsetCount((c) =&gt; c + 1);\nconsole.log(\"useEffect berjalan\");\n}, [text]);\nreturn (\n&lt;&gt;\n&lt;div&gt;{count}&lt;/div&gt;\n&lt;InputText\nvalue={text}\nid=\"text\"\nname=\"text\"\nonChange={(e) =&gt; {\nsetText(e.target.value);\n}}\n/&gt;\n&lt;/&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan pada browser</p> <p></p> contoh useEffet dengan array depedency<pre><code>\"use client\";\nimport { useEffect, useState } from \"react\";\nimport InputText from \"./component/InputText\";\nimport Button from \"./component/Button\";\nconst Home = () =&gt; {\nlet [count, setCount] = useState(0);\nlet [text, setText] = useState(\"\");\nlet [change, setChange] = useState(false);\nuseEffect(() =&gt; {\nsetCount((c) =&gt; c + 1);\nconsole.log(\"useEffect berjalan\");\n}, [text, change]);\nreturn (\n&lt;&gt;\n&lt;div&gt;{count}&lt;/div&gt;\n&lt;InputText\nvalue={text}\nid=\"text\"\nname=\"text\"\nonChange={(e) =&gt; {\nsetText(e.target.value);\n}}\n/&gt;\n&lt;Button\ntitle=\"ubah count\"\ncolorSchema=\"red\"\nvariant=\"solid\"\nonClick={() =&gt; {\nsetChange(!change);\n}}\n/&gt;\n&lt;/&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan pada browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/B.%20useEffect/#5-clean-up-function","title":"5. Clean Up Function","text":""},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/C.%20useCallback/","title":"C. useCallback","text":"<p><code>useCallback</code> memiliki penulisan sama seperti <code>useEffect</code>, yaitu menerima 2 <code>argument</code>, <code>argument</code> pertama yaitu <code>function</code> yang dipanggil, dan <code>argument</code> kedua adalah <code>depedency array</code></p> format penulisan<pre><code>useCallback(fn, deps)\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/C.%20useCallback/#1-penggunaaan-usecallback","title":"1. Penggunaaan  useCallback","text":"<p><code>useCallback</code> adalah salah satu hook yang di React yang digunakan untuk mengoptimalkan kinerja komponen dengan cara menghindari <code>re-render</code> <code>function</code> setiap kali komponen dirender ulang.</p> <p>Dalam React, setiap kali komponen dirender ulang, <code>function - function</code> yang dideklarasikan di dalamnya juga akan dibuat ulang. Hal ini akan menjadi masalah dalam hal performace di aplikasi terutama ketika <code>function</code> tersebut digunakan sebagai prop untuk komponen lain.</p> <p><code>useCallback</code> digunakan untuk mengatasi masalah ini dengan cara memori caching (mengingat) <code>function</code> yang diberikan dan hanya membuat ulangnya saat dependensi yang ditentukan berubah. Ini membantu mengoptimalkan kinerja dengan mengurangi beban komputasi yang tidak perlu. Perhatikan contoh dibawah ini</p> <p>Buatlah komponen User di folder module  seperti gambar di bawah</p> <p></p> module/user.tsx<pre><code>import { memo } from \"react\";\nimport Button from \"../component/Button\";\ntype UserProps = {\nusers: string[];\nhandleDelete: (index: number) =&gt; void;\n};\nconst User = memo(({ users, handleDelete }: UserProps) =&gt; {\nconsole.log(\"render komponen user\");\nreturn users.map((user, index) =&gt; (\n&lt;li className=\"flex items-center justify-between\" key={index}&gt;\n&lt;h1 className=\"capitalize\"&gt;{user}&lt;/h1&gt;\n&lt;Button\ntitle=\"Hapus\"\ncolorSchema=\"red\"\nonClick={() =&gt; handleDelete(index)}\n/&gt;\n&lt;/li&gt;\n));\n});\nexport default User;\n</code></pre> <p>Kemudian ubahlah app/page.tsx menjadi koding di bawah</p> app/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState, memo, useCallback } from \"react\";\nimport InputText from \"./component/InputText\";\nimport Button from \"./component/Button\";\nimport Link from \"next/link\";\nimport User from \"./module/User\";\nconst Home = () =&gt; {\nconst [users, setUser] = useState&lt;string[]&gt;([\"ihsan\", \"faisal\", \"arriq\"]);\nconst [text, setText] = useState&lt;string&gt;(\"\");\nconst handleDelete = (index: number) =&gt; {\nsetUser((user) =&gt; {\nuser.splice(index, 1);\nreturn [...user];\n});\n};\nconst handleAddUser = () =&gt; {\nsetUser((user) =&gt; {\nreturn [...user, text];\n});\nsetText(\"\");\n};\nreturn (\n&lt;section className=\"space-y-5\"&gt;\n&lt;User users={users} handleDelete={handleDelete} /&gt;\n&lt;InputText\nplaceholder=\"ketik \"\nid=\"text\"\nname=\"text\"\nvalue={text}\nonChange={(e) =&gt; setText(e.target.value)}\n/&gt;\n&lt;Button title=\"tambah\" colorSchema=\"blue\" onClick={handleAddUser} /&gt;\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan di browser</p> <p></p> <p>Kita lihat pada browser jika kita melakukan perubahan pada <code>state text</code> di komponenn Home maka komponen User akan dirender ulang.  Terlihat pada <code>console.log</code> menampilkan pesan <code>render komponen user</code>.  Hal ini tentu tidak boleh terjadi karena perubahan pada <code>state text</code> harusnya tidak membuat komponen User di render ulang.  Komponen User akan di render ulang jika <code>state users</code> yang berubah. Untuk mengatasi hal ini kita bisa memberikan <code>useCallback</code> pada <code>function handleDelete</code> untuk mencegah pembuatan ulang <code>function handleDelete</code> ketika komponen Home di render ulang.</p> app/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState, memo, useCallback } from \"react\";\nimport InputText from \"./component/InputText\";\nimport Button from \"./component/Button\";\nimport Link from \"next/link\";\nimport User from \"./module/User\";\nconst Home = () =&gt; {\nconst [users, setUser] = useState&lt;string[]&gt;([\"ihsan\", \"faisal\", \"arriq\"]);\nconst [text, setText] = useState&lt;string&gt;(\"\");\nconst handleDelete = useCallback(\n(index: number) =&gt; {\nsetUser((user) =&gt; {\nuser.splice(index, 1);\nreturn [...user];\n});\n},\n[]\n);\nconst handleAddUser = () =&gt; {\nsetUser((user) =&gt; {\nreturn [...user, text];\n});\nsetText(\"\");\n};\nreturn (\n&lt;section className=\"space-y-5\"&gt;\n&lt;User users={users} handleDelete={handleDelete} /&gt;\n&lt;InputText\nplaceholder=\"ketik \"\nid=\"text\"\nname=\"text\"\nvalue={text}\nonChange={(e) =&gt; setText(e.target.value)}\n/&gt;\n&lt;Button title=\"tambah\" colorSchema=\"blue\" onClick={handleAddUser} /&gt;\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan di browser</p> <p></p> <p>Kita lihat pada browser , setelah memberikan <code>useCallback</code> pada <code>function handleDelete</code> maka ketika perubahan pada <code>state text</code> tidak akan membuat komponen User di render ulang.</p> <p>Warning</p> <p>Penggunaan <code>useCallback</code> harus memperhatikan kondisi-kondisi yang memang dibutuhkan. Tidak semua <code>function</code> harus dibungkus di dalam <code>useCallback</code></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/D.%20useMemo/","title":"D. useMemo","text":"<p><code>useMemo</code> digunakan untuk mengingat (memorize) nilai yang dihasilkan oleh suatu komputasi. </p> format penulisan<pre><code>useMemo(()=&gt; fn, deps)\n</code></pre> <p><code>useMemo</code> menggunakan <code>deps</code> untuk menentukan apakan <code>fn</code> akan dipanggil atau tidak. Jika <code>deps</code> yang diberikan pada <code>useMemo</code> tidak berubah, maka <code>useMemo</code> akan otomatis mengembalikan <code>value</code> yang sama seperti pemanggilan <code>fn</code> sebelumnya, tanpa memanggil <code>fn</code> lagi</p> app/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState, memo, useCallback, useMemo } from \"react\";\nimport InputText from \"./component/InputText\";\nimport Button from \"./component/Button\";\nimport Link from \"next/link\";\nimport User from \"./module/User\";\nconst Home = () =&gt; {\nconst [users, setUser] = useState&lt;string[]&gt;([\"ihsan\", \"faisal\", \"arriq\"]);\nconst [text, setText] = useState&lt;string&gt;(\"\");\nconst handleDelete = useCallback((index: number) =&gt; {\nsetUser((user) =&gt; {\nuser.splice(index, 1);\nreturn [...user];\n});\n}, []);\nconst handleAddUser = () =&gt; {\nsetUser((user) =&gt; {\nreturn [...user, text];\n});\nsetText(\"\");\n};\nconst result = () =&gt; {\nconsole.log(\"perhitungan berjalan\");\nlet i = 0;\nwhile (i &lt; 20) i++;\nconsole.log(i)\nreturn users;\n};\nreturn (\n&lt;section className=\"space-y-5\"&gt;\n&lt;User users={result()} handleDelete={handleDelete} /&gt;\n&lt;InputText\nplaceholder=\"ketik \"\nid=\"text\"\nname=\"text\"\nvalue={text}\nonChange={(e) =&gt; setText(e.target.value)}\n/&gt;\n&lt;Button title=\"tambah\" colorSchema=\"blue\" onClick={handleAddUser} /&gt;\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p></p> app/page.tsx<pre><code>\"use client\";\nimport { useEffect, useState, memo, useCallback, useMemo } from \"react\";\nimport InputText from \"./component/InputText\";\nimport Button from \"./component/Button\";\nimport Link from \"next/link\";\nimport User from \"./module/User\";\nconst Home = () =&gt; {\nconst [users, setUser] = useState&lt;string[]&gt;([\"ihsan\", \"faisal\", \"arriq\"]);\nconst [text, setText] = useState&lt;string&gt;(\"\");\nconst handleDelete = useCallback((index: number) =&gt; {\nsetUser((user) =&gt; {\nuser.splice(index, 1);\nreturn [...user];\n});\n}, []);\nconst handleAddUser = () =&gt; {\nsetUser((user) =&gt; {\nreturn [...user, text];\n});\nsetText(\"\");\n};\nconst result = useMemo(() =&gt; {\nconsole.log(\"perhitungan berjalan\");\nlet i = 0;\nwhile (i &lt; 200000000) i++;\nreturn users;\n}, [users]);\nreturn (\n&lt;section className=\"space-y-5\"&gt;\n&lt;User users={result} handleDelete={handleDelete} /&gt;\n&lt;InputText\nplaceholder=\"ketik \"\nid=\"text\"\nname=\"text\"\nvalue={text}\nonChange={(e) =&gt; setText(e.target.value)}\n/&gt;\n&lt;Button title=\"tambah\" colorSchema=\"blue\" onClick={handleAddUser} /&gt;\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/E.%20useRef/","title":"E. useRef","text":"<p>useRef adalah salah satu  hook yang disediakan oleh React, yang digunakan untuk mengakses dan mengelola referensi ke elemen DOM atau value dari komponen React. Penggunaan yang paling umum dari useRef adalah untuk mengakses elemen DOM  pada elemen tersebut, kemudian memanipulasi mengubah nilai, menambahkan atau menghapus <code>class</code>, dan lain-lain.</p> <p>Pengguanaan useRef memungkinkan kita untuk mengakses dan manipulasi DOM node seperti native javascript. Jika di native javascript kita bisa menggunakan <code>getElementById</code>, <code>getElementsByClassName</code> dan <code>getElementsByName</code> . Maka di ReactJS kita bisa mengguakan <code>useRef</code></p> app/page.tsx<pre><code>\"use client\";\nimport { useRef } from \"react\";\nimport Button from \"./component/Button\";\nimport InputText from \"./component/InputText\";\nconst Home = () =&gt; {\nconst targetAbout = useRef&lt;HTMLDivElement&gt;(null);\nconst targetHome = useRef&lt;HTMLDivElement&gt;(null);\nconst targetContent = useRef&lt;HTMLDivElement&gt;(null);\nconst scrollToHome = () =&gt; {\nconsole.log(\"content\", targetHome);\nif (targetHome.current) {\ntargetHome.current.classList.add('text-3xl')\ntargetHome.current.scrollIntoView({\nbehavior: \"smooth\",\nblock: \"start\",\n});\n}\n};\nconst scrollToContent = () =&gt; {\nconsole.log(\"content\", targetContent);\nif (targetContent.current) {\ntargetContent.current.scrollIntoView({\nbehavior: \"smooth\",\nblock: \"start\",\n});\n}\n};\nconst scrollToAbout = () =&gt; {\nconsole.log(\"content\", targetAbout);\nif (targetAbout.current) {\nconst node = document.createElement(\"div\");\nnode.className =\"text-white bg-red-500 p-2\"\nconst textnode = document.createTextNode(\"Water\");\nnode.appendChild(textnode);\ntargetAbout.current.appendChild(node);\ntargetAbout.current.scrollIntoView({\nbehavior: \"smooth\",\nblock: \"start\",\n});\n}\n};\nreturn (\n&lt;section className=\"h-screen w-screen\"&gt;\n&lt;nav className=\"h-[50px]\"&gt;\n&lt;Button\nonClick={scrollToHome}\ncolorSchema=\"blue\"\nvariant=\"solid\"\ntitle=\"Home\"\n/&gt;\n&lt;Button\nonClick={scrollToContent}\ncolorSchema=\"red\"\nvariant=\"solid\"\ntitle=\"Content\"\n/&gt;\n&lt;Button\nonClick={scrollToAbout}\ncolorSchema=\"green\"\nvariant=\"solid\"\ntitle=\"About\"\n/&gt;\n&lt;/nav&gt;\n&lt;section className=\"h-[90%] overflow-auto\"&gt;\n&lt;div\nref={targetHome}\nclassName=\"min-h-screen bg-red-500 flex items-center justify-center\"\n&gt;\n&lt;h1 className=\"text-white\"&gt;Home &lt;/h1&gt;\n&lt;/div&gt;\n&lt;div\nref={targetContent}\nclassName=\"min-h-screen bg-blue-500 flex items-center justify-center\"\n&gt;\n&lt;h1 className=\"text-white\"&gt;Content &lt;/h1&gt;\n&lt;/div&gt;\n&lt;div\nref={targetAbout}\nclassName=\"min-h-screen bg-yellow-500 flex items-center justify-center\"\n&gt;\n&lt;h1 className=\"text-white\"&gt;About &lt;/h1&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/F.%20CustomHook/","title":"F. Custom Hook","text":"<p>Selain hook yang disediakan oleh reactjs, kita juga bisa membuat hook kita sendiri atau yang bisa disebut dengan  <code>custom hook</code>.</p> <p><code>custom hook</code> memungkinkan kita untuk membuat hook untuk fungsi tertentu dengan logika yang kita buat sendiri.  Dengan membuat <code>custom hook</code>, kita bisa membuat function yang bisa digunakan berulang-ulang seperti layakanya membuat komponen. </p> <p>Pada contoh di bawah ini, kita akan pelajari bagimana membuat custom hook.</p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/F.%20CustomHook/#1-contoh-1-membuat-usedisclosure","title":"1. Contoh 1 membuat useDisclosure","text":"<p>Pada kode  yang  diblok dibawah. Kita membuat state <code>isOpen</code> dan membuat <code>function onOpen</code> dan <code>onClose</code>.  Dimana function <code>onOpen</code> ketika dipanggil akan merubah nilai <code>isOpen</code> menjadi <code>true</code> sedangkan <code>onClose</code> akan membuat isOpen menjadi <code>false</code>. </p> app/page.tsx<pre><code>\"use client\";\nimport { useRef, useState } from \"react\";\nimport Button from \"../components/Button\";\nconst Home = () =&gt; {\nlet [isOpen, setIsOpen] = useState&lt;boolean&gt;(false);\nconst onOpen = () =&gt; {\nsetIsOpen(true);\n};\nconst onClose = () =&gt; {\nsetIsOpen(false);\n};\nreturn (\n&lt;section className=\"h-screen w-screen space-y-5\"&gt;\n&lt;Button onClick={onOpen} colorSchema=\"blue\" title=\"open\" /&gt;\n&lt;Button onClick={onClose} colorSchema=\"red\" title=\"closed\" /&gt;\n{isOpen ? &lt;p&gt;Open&lt;/p&gt; : &lt;p&gt;Close&lt;/p&gt;}\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Jalankan pada Browser</p> <p></p> <p>Kode dengan fungsi seperti itu bisa dibutuhkan di banyak komponen. Tentu memungkinkan kita untuk menulis kode berkali-kali. untuk menghindari hal tersebut maka kode di atas kita jadikan sebagai <code>Custom Hook</code></p> <p>Dalam Project react , biasanya kita akan membuat folder dengan nama <code>hook</code> yang nantinya akan berisi kode-kode dari <code>custom hook</code> yang kita buat. Pada contoh ini, kita akan membuat <code>custom hook</code> dengan nama <code>useDisclosure</code></p> <p>Note</p> <p>Dalam membaut <code>custom hook</code> nama dari <code>custom hook</code> harus dimulai dengan keyword <code>use</code></p> <p>Jalankan pada Browser</p> <p></p> <p>Membuat useDisclosure</p> hook/useDisclosure.ts<pre><code>import { useState } from \"react\";\nexport const useDisclosure = () =&gt; {\nlet [isOpen, setIsOpen] = useState&lt;boolean&gt;(false);\nconst onOpen = () =&gt; {\nsetIsOpen(!isOpen);\n};\nconst onClose = () =&gt; {\nsetIsOpen(false);\n};\nreturn { onOpen, onClose, isOpen };\n};\n</code></pre> hook/index.ts<pre><code>export * from './useDisclosure'\n</code></pre> <p>Pindahkan <code>state</code> , <code>onOpen</code>, <code>onClose</code> dari file <code>app/page.tsx</code> ke file <code>useDisclosure</code> seperti pada kode di atas.</p> <p>Memanggil hook useDisclosure pada komponen</p> app/page.tsx<pre><code>\"use client\";\nimport { useRef, useState } from \"react\";\nimport Button from \"../components/Button\";\nimport { useDisclosure } from \"@/hook\";\nconst Home = () =&gt; {\nconst {isOpen, onOpen, onClose} = useDisclosure()\nreturn (\n&lt;section className=\"h-screen w-screen space-y-5\"&gt;\n&lt;Button onClick={onOpen} colorSchema=\"blue\" title=\"open\" /&gt;\n&lt;Button onClick={onClose} colorSchema=\"red\" title=\"closed\" /&gt;\n{isOpen ? &lt;p&gt;Open&lt;/p&gt; : &lt;p&gt;Close&lt;/p&gt;}\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Pada kode di atas, contoh bagaimana memanggil <code>custom hook</code> pada komponen. </p> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/3.%20React%20Hook/F.%20CustomHook/#2-contoh-2-membuat-usedebounce","title":"2. Contoh 2 membuat useDebounce","text":"<p>Pada kode di bawah kita akan membuat suatu fungsi untuk menerapkan delay  sebelum memproses nilai sebelum berubah.</p> app/page.tsx<pre><code>\"use client\";\nimport { useEffect, useRef, useState } from \"react\";\nimport Button from \"@/component/Button\";\nimport useDislosure from \"@/hook/useDisclosure\";\nimport InputText from \"@/component/InputText\";\nimport useDislosure from \"@/hook/useDisclosure\";\nconst Home = () =&gt; {\nconst [keyword, setKeyword] = useState(\"\");\nconst { isOpen, onOpen, onClose } = useDislosure();\nconst [debouncedValue, setDebouncedValue] = useState(\"\");\nuseEffect(() =&gt; {\nconst handler = setTimeout(() =&gt; {\nsetDebouncedValue(keyword);\n}, 1000);\nreturn () =&gt; {\nclearTimeout(handler);\n};\n// eslint-disable-next-line react-hooks/exhaustive-deps\n}, [keyword]);\nreturn (\n&lt;section className=\"h-screen w-screen space-y-5\"&gt;\n&lt;Button onClick={onOpen} colorSchema=\"blue\" title=\"open\" /&gt;\n&lt;Button onClick={onClose} colorSchema=\"red\" title=\"closed\" /&gt;\n&lt;InputText\nvalue={keyword}\nonChange={(e) =&gt; {\nsetKeyword(e.target.value);\n}}\n/&gt;\n{debouncedValue}\n{isOpen ? &lt;p&gt;Open&lt;/p&gt; : &lt;p&gt;Close&lt;/p&gt;}\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Membuat useDebounce</p> <p></p> hook/useDebounce<pre><code>import { useEffect, useState } from \"react\";\nexport default function useDebounce(value: string, delay: number) {\nconst [debouncedValue, setDebouncedValue] = useState(value);\nuseEffect(() =&gt; {\nconst handler = setTimeout(() =&gt; {\nsetDebouncedValue(value);\n}, delay);\nreturn () =&gt; {\nclearTimeout(handler);\n};\n}, [value, delay]);\nreturn {debouncedValue}\n}\n</code></pre> <p>Memanggil hook useDebounce pada komponen</p> app/page.tsx<pre><code>\"use client\";\nimport { useEffect, useRef, useState } from \"react\";\nimport Button from \"@/component/Button\";\nimport useClosure from \"@/hook/useDisclosure\";\nimport InputText from \"@/component/InputText\";\nimport useDebounce from \"@/hook/useDebounce\";\nimport useDislosure from \"@/hook/useDisclosure\";\nconst Home = () =&gt; {\nconst [keyword, setKeyword] = useState(\"\");\nconst { debouncedValue } = useDebounce(keyword, 1000);\nconst { isOpen, onOpen, onClose } = useDislosure();\nreturn (\n&lt;section className=\"h-screen w-screen space-y-5\"&gt;\n&lt;Button onClick={onOpen} colorSchema=\"blue\" title=\"open\" /&gt;\n&lt;Button onClick={onClose} colorSchema=\"red\" title=\"closed\" /&gt;\n&lt;InputText\nplaceholder=\"ketika\"\nvalue={keyword}\nonChange={(e) =&gt; {\nsetKeyword(e.target.value);\n}}\n/&gt;\n{debouncedValue}\n{isOpen ? &lt;p&gt;Open&lt;/p&gt; : &lt;p&gt;Close&lt;/p&gt;}\n&lt;/section&gt;\n);\n};\nexport default Home;\n</code></pre> <p>Note</p> <p>Dengan membuat <code>custom hook</code> kita tidak perlu berkali-kali membuat kode dengan fungsi yang sama pada setiap komponen</p>"},{"location":"3.%20NextJS%20-%20Frontend/4.%20Routing_dan_Layouting/Routing/","title":"A. Routing","text":"<p>Sumber : https://nextjs.org/docs/app/building-your-application/routing</p> <p>Routing meerupakan proses mengarahkan satu halaman web ke halaman web lainnya dalam suatu aplikasi. Routing memungkinkan kita untuk membuat aplikasi web dengan beberapa halaman, yang sangat berguna ketika kita ingin membuat aplikasi yang lebih kompleks dengan navigasi antarhalaman.</p> <p>NextJs menyediakan mekanisme pembuatan routing yang sangat simple dibandingkan jika kita menggunakan reactjs.</p>"},{"location":"3.%20NextJS%20-%20Frontend/4.%20Routing_dan_Layouting/Routing/#1-basic-routing","title":"1. Basic Routing","text":"<p>Untuk membuat route standart di nextjs 13 dengan folder app. buatlah folder dengan nama tertentu misalkan <code>about</code> kemudian buatlah file dengan nama <code>page.tsx</code> seperti gambar di bawah ini.</p> <p></p> app/about/page.tsx<pre><code>const About = () =&gt; {\nreturn (\n&lt;div&gt;Ini adalah page About&lt;/div&gt;\n)\n}\nexport default About\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/4.%20Routing_dan_Layouting/Routing/#2-nested-route","title":"2. Nested Route","text":"<p>Untuk membuat Nested Route di nextjs 13 dengan folder app. buatlah folder dengan nama tertentu misalkan <code>about</code> kemudian buat kembali folder dan buatlah file <code>page.tsx</code> pada folder tersebut seperti gambar di bawah ini.</p> <p></p> app/about/contact.tsx<pre><code>const Contact = () =&gt; {\nreturn (\n&lt;div&gt;Ini adalah page Contact&lt;/div&gt;\n)\n}\nexport default Contact\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/4.%20Routing_dan_Layouting/Routing/#3-dynamic-route","title":"3. Dynamic Route","text":"<p>Untuk membuat Dynamic Route di NextJS 13 dengan membuat nama folder dalam <code>square brackets []</code></p> <p></p> <p>Pada gambar di atas kita square brackets folder <code>[id]</code> yang artinya nama params dari dynamic route adalah <code>id</code>. Sehinggal implentasi pada <code>detail/page.tsx</code> seperti berikut.</p> app/about/[id]/detail/page.tsx<pre><code>const DetailPage = ({ params }: { params: { id: string } }) =&gt; {\nlet { id } = params;\nreturn &lt;div&gt;Ini adalah page Detail dengan {id} &lt;/div&gt;;\n};\nexport default DetailPage;\n</code></pre> <p>Jalankan pada Browser</p> <p></p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/","title":"A. Instalasi Package","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/#1-instalasi-axios","title":"1. Instalasi axios","text":"terminal<pre><code>npm install axios\nnpm install react-spinners --save\nnpm install sweetalert2 -- save\nnpm i @heroicons/react -- save\nnpm i @react-spring/web\n</code></pre> package.json<pre><code>{\n\"name\": \"frontend-nextjs\",\n\"version\": \"0.1.0\",\n\"private\": true,\n\"scripts\": {\n\"dev\": \"next dev -p 3010\",\n\"build\": \"next build\",\n\"start\": \"next start\",\n\"lint\": \"next lint\"\n},\n\"dependencies\": {\n\"@heroicons/react\": \"^2.0.18\",\n\"@react-spring/web\": \"^9.7.3\",\n\"@types/node\": \"20.4.5\",\n\"@types/react\": \"18.2.17\",\n\"@types/react-dom\": \"18.2.7\",\n\"autoprefixer\": \"10.4.14\",\n\"axios\": \"^1.5.0\",\n\"clsx\": \"^2.0.0\",\n\"eslint\": \"8.46.0\",\n\"eslint-config-next\": \"13.4.12\",\n\"next\": \"13.4.12\",\n\"postcss\": \"8.4.27\",\n\"react\": \"18.2.0\",\n\"react-dom\": \"18.2.0\",\n\"react-spinners\": \"^0.13.8\",\n\"sweetalert2\": \"^11.7.27\",\n\"tailwindcss\": \"3.3.3\",\n\"typescript\": \"5.1.6\"\n}\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/#setup-axios","title":"Setup axios","text":"lib/axiosClient.ts<pre><code>import axios, { AxiosInstance } from \"axios\";\nexport const axiosClient: AxiosInstance = axios.create({\nbaseURL: \"http://localhost:5002\",\nheaders: { \"Content-Type\": \"application/json\" },\n});\nexport interface BaseResponsePagination {\nstatus: string;\nmessage: string;\npagination: {\npage: number;\nlimit: number;\npageSize: number;\ntotal: number;\n};\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/#dokumentasi-axios","title":"Dokumentasi axios","text":"<p>Pelajari Selengkapnya di <code>https://axios-http.com/docs/intro</code></p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/#2-instalasi-formik-dan-yup","title":"2. Instalasi formik dan yup","text":"terminal<pre><code>npm install formik yup --save\n</code></pre> package.json<pre><code>{\n\"name\": \"frontend-nextjs\",\n\"version\": \"0.1.0\",\n\"private\": true,\n\"scripts\": {\n\"dev\": \"next dev -p 3010\",\n\"build\": \"next build\",\n\"start\": \"next start\",\n\"lint\": \"next lint\"\n},\n\"dependencies\": {\n\"@heroicons/react\": \"^2.0.18\",\n\"@react-spring/web\": \"^9.7.3\",\n\"@types/node\": \"20.4.5\",\n\"@types/react\": \"18.2.17\",\n\"@types/react-dom\": \"18.2.7\",\n\"autoprefixer\": \"10.4.14\",\n\"axios\": \"^1.5.0\",\n\"clsx\": \"^2.0.0\",\n\"eslint\": \"8.46.0\",\n\"eslint-config-next\": \"13.4.12\",\n\"formik\": \"^2.4.3\",\n\"next\": \"13.4.12\",\n\"postcss\": \"8.4.27\",\n\"react\": \"18.2.0\",\n\"react-dom\": \"18.2.0\",\n\"react-spinners\": \"^0.13.8\",\n\"sweetalert2\": \"^11.7.27\",\n\"tailwindcss\": \"3.3.3\",\n\"typescript\": \"5.1.6\",\n\"yup\": \"^1.2.0\"\n}\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/#dokumentasi-formik-dan-yup","title":"Dokumentasi Formik dan yup","text":"<p>Pelajari Selengkapnya di <code>https://formik.org/docs/overview</code></p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/#2-instalasi-reactquery","title":"2. Instalasi ReactQuery","text":"terminal<pre><code>npm install @tanstack/react-query @tanstack/react-query-devtools\n</code></pre> package.json<pre><code>{\n\"name\": \"frontend-nextjs\",\n\"version\": \"0.1.0\",\n\"private\": true,\n\"scripts\": {\n\"dev\": \"next dev -p 3010\",\n\"build\": \"next build\",\n\"start\": \"next start\",\n\"lint\": \"next lint\"\n},\n\"dependencies\": {\n\"@tanstack/react-query\": \"^4.33.0\",\n\"@tanstack/reac\n\"@heroicons/react\": \"^2.0.18\",\n\"@react-spring/web\": \"^9.7.3\",t-query-devtools\": \"^4.33.0\",\n\"@types/node\": \"20.4.5\",\n\"@types/react\": \"18.2.17\",\n\"@types/react-dom\": \"18.2.7\",\n\"autoprefixer\": \"10.4.14\",\n\"axios\": \"^1.5.0\",\n\"clsx\": \"^2.0.0\",\n\"eslint\": \"8.46.0\",\n\"eslint-config-next\": \"13.4.12\",\n\"formik\": \"^2.4.3\",\n\"next\": \"13.4.12\",\n\"postcss\": \"8.4.27\",\n\"react\": \"18.2.0\",\n\"react-dom\": \"18.2.0\",\n\"react-spinners\": \"^0.13.8\",\n\"sweetalert2\": \"^11.7.27\",\n\"tailwindcss\": \"3.3.3\",\n\"typescript\": \"5.1.6\",\n\"yup\": \"^1.2.0\"\n}\n}\n</code></pre> componenet/ReactQuery.tsx<pre><code>\"use client\";\nimport React, { ReactNode } from \"react\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { ReactQueryDevtools } from \"@tanstack/react-query-devtools\";\ninterface ReactQueryProps {\nchildren: ReactNode;\n}\nconst ReactQuery: React.FC&lt;ReactQueryProps&gt; = ({ children }) =&gt; {\nconst queryClient = new QueryClient();\nreturn (\n&lt;QueryClientProvider client={queryClient}&gt;\n{children}\n&lt;ReactQueryDevtools initialIsOpen={false} /&gt;\n&lt;/QueryClientProvider&gt;\n);\n};\nexport default ReactQuery;\n</code></pre> app/layout.tsx<pre><code>import './globals.css'\nimport type { Metadata } from 'next'\nimport { Inter } from 'next/font/google'\nimport ReactQuery from './component/ReactQuery'\nconst inter = Inter({ subsets: ['latin'] })\nexport const metadata: Metadata = {\ntitle: 'Create Next App',\ndescription: 'Generated by create next app',\n}\nexport default function RootLayout({\nchildren,\n}: {\nchildren: React.ReactNode\n}) {\nreturn (\n&lt;html lang=\"en\"&gt;\n&lt;body className={'px-5'}&gt;\n&lt;ReactQuery&gt;\n{children}\n&lt;/ReactQuery&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n)\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/1.%20Instalasi/#dokumentasi-formik-dan-yup_1","title":"Dokumentasi Formik dan yup","text":"<p>Pelajari Selengkapnya di <code>https://tanstack.com/query/v4/docs/react/overview</code></p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/","title":"B. Integrasi List book","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#1-integrasi-list-buku","title":"1. Integrasi list Buku","text":"<p>Pada materi ini kita akan integrasikan api dari backend untuk digunakan pada frontend menggunakan NextJS. Buatlah folder <code>book</code> di dalam folder <code>app</code> dan buatlah file <code>page.tsx</code> seperti gambar di bawah ini.</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#membuat-tabel-book","title":"Membuat Tabel Book","text":"<p>Pada <code>app/book/page.tsx</code> kita membuat user interface dalam bentuk tabel untuk menampilkan buku yang akan didapatkan melalui <code>api list book</code>.</p> app/book/page.tsx<pre><code>import { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nconst Book = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;section className=\"container px-4 mx-auto\"&gt;\n&lt;Table&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;button className=\"flex items-center gap-x-2\"&gt;\n&lt;span&gt;Invoice&lt;/span&gt;\n&lt;svg\nclassName=\"h-3\"\nviewBox=\"0 0 10 11\"\nfill=\"none\"\nxmlns=\"http://www.w3.org/2000/svg\"\n&gt;\n&lt;path\nd=\"M2.13347 0.0999756H2.98516L5.01902 4.79058H3.86226L3.45549 3.79907H1.63772L1.24366 4.79058H0.0996094L2.13347 0.0999756ZM2.54025 1.46012L1.96822 2.92196H3.11227L2.54025 1.46012Z\"\nfill=\"currentColor\"\nstroke=\"currentColor\"\nstrokeWidth=\"0.1\"\n/&gt;\n&lt;path\nd=\"M0.722656 9.60832L3.09974 6.78633H0.811638V5.87109H4.35819V6.78633L2.01925 9.60832H4.43446V10.5617H0.722656V9.60832Z\"\nfill=\"currentColor\"\nstroke=\"currentColor\"\nstrokeWidth=\"0.1\"\n/&gt;\n&lt;path\nd=\"M8.45558 7.25664V7.40664H8.60558H9.66065C9.72481 7.40664 9.74667 7.42274 9.75141 7.42691C9.75148 7.42808 9.75146 7.42993 9.75116 7.43262C9.75001 7.44265 9.74458 7.46304 9.72525 7.49314C9.72522 7.4932 9.72518 7.49326 9.72514 7.49332L7.86959 10.3529L7.86924 10.3534C7.83227 10.4109 7.79863 10.418 7.78568 10.418C7.77272 10.418 7.73908 10.4109 7.70211 10.3534L7.70177 10.3529L5.84621 7.49332C5.84617 7.49325 5.84612 7.49318 5.84608 7.49311C5.82677 7.46302 5.82135 7.44264 5.8202 7.43262C5.81989 7.42993 5.81987 7.42808 5.81994 7.42691C5.82469 7.42274 5.84655 7.40664 5.91071 7.40664H6.96578H7.11578V7.25664V0.633865C7.11578 0.42434 7.29014 0.249976 7.49967 0.249976H8.07169C8.28121 0.249976 8.45558 0.42434 8.45558 0.633865V7.25664Z\"\nfill=\"currentColor\"\nstroke=\"currentColor\"\nstrokeWidth=\"0.3\"\n/&gt;\n&lt;/svg&gt;\n&lt;/button&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Date&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Status&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Customer&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Purchase&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;span className=\"sr-only\"&gt;Actions&lt;/span&gt;\n&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n&lt;Tr&gt;\n&lt;Td&gt;\n&lt;span&gt;ok&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;ok&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;ok&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;ok&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;ok&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;ok&lt;/span&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#endpoint-list-book","title":"Endpoint List Book","text":"<p>Lihatlah kembali endpoint list book yang sudah kita buat pada materi backend seperti gambar  di bawah ini.</p> <p></p> request endpoint list<pre><code>http://localhost:5002/book/list\nhttp://localhost:5002/book/list?page=1&amp;pageSize=1&amp;title=up&amp;author=ihsan&amp;from_year=2022&amp;to_year=2023\n</code></pre> response endpoint list<pre><code>{\n\"status\": \"Success\",\n\"message\": \"OK\",\n\"data\": [\n{\n\"id\": 1,\n\"title\": \"NestJS For Backend\",\n\"author\": \"Ihsan\",\n\"year\": 2023,\n\"created_at\": \"2023-08-29T06:27:27.000Z\",\n\"updated_at\": \"2023-08-29T06:27:27.000Z\"\n},\n{\n\"id\": 2,\n\"title\": \"Server Admin\",\n\"author\": \"Raihan\",\n\"year\": 2022,\n\"created_at\": \"2023-08-29T06:27:27.000Z\",\n\"updated_at\": \"2023-08-29T06:27:27.000Z\"\n},\n{\n\"id\": 3,\n\"title\": \"NextJs Developer\",\n\"author\": \"Ihsan\",\n\"year\": 2023,\n\"created_at\": \"2023-08-29T06:27:27.000Z\",\n\"updated_at\": \"2023-08-29T06:27:27.000Z\"\n},\n{\n\"id\": 4,\n\"title\": \"HTML CSS\",\n\"author\": \"Nur\",\n\"year\": 2022,\n\"created_at\": \"2023-08-29T06:27:27.000Z\",\n\"updated_at\": \"2023-08-29T06:27:27.000Z\"\n},\n{\n\"id\": 5,\n\"title\": \"TypeScript\",\n\"author\": \"Ihsan\",\n\"year\": 2023,\n\"created_at\": \"2023-08-29T06:27:27.000Z\",\n\"updated_at\": \"2023-08-29T06:27:27.000Z\"\n},\n{\n\"id\": 6,\n\"title\": \"Become Network Engineer\",\n\"author\": \"Fathi\",\n\"year\": 2021,\n\"created_at\": \"2023-08-29T06:27:27.000Z\",\n\"updated_at\": \"2023-08-29T06:27:27.000Z\"\n},\n{\n\"id\": 7,\n\"title\": \"Database MySQL\",\n\"author\": \"Akbar\",\n\"year\": 2023,\n\"created_at\": \"2023-08-29T06:27:27.000Z\",\n\"updated_at\": \"2023-08-29T06:27:27.000Z\"\n},\n{\n\"id\": 8,\n\"title\": \"NestJS For Backend\",\n\"author\": \"Ihsan\",\n\"year\": 2023,\n\"created_at\": \"2023-08-30T14:16:40.000Z\",\n\"updated_at\": \"2023-08-30T14:16:40.000Z\"\n},\n{\n\"id\": 9,\n\"title\": \"Server Admin\",\n\"author\": \"Raihan\",\n\"year\": 2022,\n\"created_at\": \"2023-08-30T14:16:40.000Z\",\n\"updated_at\": \"2023-08-30T14:16:40.000Z\"\n},\n{\n\"id\": 10,\n\"title\": \"TypeScript\",\n\"author\": \"Ihsan\",\n\"year\": 2023,\n\"created_at\": \"2023-08-30T14:16:40.000Z\",\n\"updated_at\": \"2023-08-30T14:16:40.000Z\"\n}\n],\n\"pagination\": {\n\"total\": 39,\n\"page\": 1,\n\"total_page\": 4,\n\"pageSize\": 10\n}\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#membuat-interface-book","title":"Membuat Interface Book","text":"<p>Pada file ini kita membuat interface yang akan mendefinikan struktur data yang ada pada fitur book ini.  </p> app/book/interface/index.ts<pre><code>import { BaseResponsePagination } from \"@/lib/axiosClient\";\ninterface Book {\nid: number;\ntitle: string;\nauthor: string;\nyear: number | undefined | string;\ncreated_at: string;\nupdated_at: string;\n}\nexport interface BookListResponse extends BaseResponsePagination {\ndata: Book[];\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#membuat-service-book","title":"Membuat Service Book","text":"book/lib/index.ts<pre><code>import { useQuery } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { BookListResponse } from \"../interface\";\nconst useBookModule = () =&gt; {\nconst getBookList = async (): Promise&lt;BookListResponse&gt; =&gt; {\nreturn axiosClient.get(\"/book/list\").then((res) =&gt; res.data);\n};\nconst useBookList = () =&gt; {\nconst { data, isFetching, isLoading } = useQuery(\n[\"/book/list\"],\n() =&gt; getBookList(),\n{\nkeepPreviousData: true,\nselect: (response) =&gt; response,\n}\n);\nreturn { data, isFetching, isLoading };\n};\nreturn { useBookList };\n};\nexport default useBookModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#memanggil-service-list-book","title":"Memanggil Service List Book","text":"book/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { useRouter } from \"next/navigation\";\nconst Book = () =&gt; {\nconst { useBookList } = useBookModule();\nconst { data, isFetching, isError } = useBookList();\nreturn (\n&lt;&gt;\n&lt;section className=\"container px-4 mx-auto space-y-5\"&gt;\n&lt;section className=\"flex items-center justify-between\"&gt;\n&lt;Button colorSchema=\"red\" title=\"Tambah Buku\" /&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Table\nisFetching={isFetching}\nisEmpty={data?.data?.length === 0}\nisError={isError}\n&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Title&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Author&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Year&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Created At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Updated At&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n{data &amp;&amp;\ndata.data.map((item, index) =&gt; (\n&lt;Tr key={index}&gt;\n&lt;Td&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.title}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.author}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.year}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.created_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.updated_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n))}\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre> <p>Jalankan pada Bowser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#2-implementasi-filter","title":"2. Implementasi Filter","text":"book/interface.ts<pre><code>import {\nBaseResponsePagination,\n} from \"@/lib/axiosClient\";\ninterface Book {\nid: number;\ntitle: string;\nauthor: string;\nyear: number | undefined | string;\ncreated_at: string;\nupdated_at: string;\n}\nexport interface BookListResponse extends BaseResponsePagination {\ndata: Book[];\n}\nexport interface BookListFilter extends Partial&lt;Book&gt; {\nfrom_year?: string;\nto_year?: string;\npage : number ,\npageSize : number\n}\n</code></pre> book/lib/index.ts<pre><code>import { useQuery } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { BookListFilter, BookListResponse } from \"../interface\";\nimport { ChangeEvent, useState } from \"react\";\nconst useBookModule = () =&gt; {\nconst defaultParams = {\ntitle: \"\",\nauthor: \"\",\nfrom_year: \"\",\nto_year: \"\",\npage: 1,\npageSize: 10,\n};\nconst getBookList = async (\nparams: BookListFilter\n): Promise&lt;BookListResponse&gt; =&gt; {\nreturn axiosClient.get(\"/book/list\", { params }).then((res) =&gt; res.data);\n};\nconst useBookList = () =&gt; {\nlet [params, setParams] = useState&lt;BookListFilter&gt;(defaultParams);\nlet [filterParams, setFilterParams] =\nuseState&lt;BookListFilter&gt;(defaultParams);\nconst handleFilter = () =&gt; {\nsetFilterParams({ ...params });\n};\nconst handleClear = () =&gt; {\nsetFilterParams(defaultParams);\nsetParams(defaultParams);\n};\nconst handlePageSize = (e: ChangeEvent&lt;any&gt;) =&gt; {\nsetParams((params) =&gt; ({ ...params, pageSize: e.target.value }));\nsetFilterParams((params) =&gt; ({ ...params, pageSize: e.target.value }));\n};\nconst handlePage = (page: number) =&gt; {\nsetParams((params) =&gt; ({ ...params, page: page }));\nsetFilterParams((params) =&gt; ({ ...params, page: page }));\n};\nconst { data, isFetching, isLoading, isError } = useQuery(\n[\"/book/list\", [filterParams]],\n() =&gt; getBookList(filterParams),\n{\nkeepPreviousData: true,\nselect: (response) =&gt; response,\n}\n);\nreturn {\ndata,\nisFetching,\nisLoading,\nisError,\nparams,\nsetParams,\nhandlePageSize,\nhandlePage,\nhandleFilter,\nhandleClear,\n};\n};\nreturn { useBookList };\n};\nexport default useBookModule;\n</code></pre> book/module/filter.ts<pre><code>import { ChangeEvent, Dispatch, ReactNode, SetStateAction } from \"react\";\nimport { BookListFilter } from \"@/app/book/interface\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Select from \"@/components/Select\";\ntype FilterProps = {\nparams: BookListFilter;\nsetParams: Dispatch&lt;SetStateAction&lt;any&gt;&gt;;\n};\nconst option = [\n{\nvalue: 2020,\nlabel: \"2020\",\n},\n{\nvalue: 2021,\nlabel: \"2021\",\n},\n{\nvalue: 2022,\nlabel: \"2022\",\n},\n{\nvalue: 2023,\nlabel: \"2023\",\n},\n];\nconst Filter: React.FC&lt;FilterProps&gt; = ({ params, setParams }) =&gt; {\nconst handleChange = (e: ChangeEvent&lt;any&gt;) =&gt; {\nsetParams((params: BookListFilter) =&gt; {\nreturn {\n...params,\n[e.target.name]: e.target.value,\n};\n});\n};\nreturn (\n&lt;section className=\"space-y-2\"&gt;\n&lt;section&gt;\n&lt;Label title=\"Title\" htmlFor=\"title\" /&gt;\n&lt;InputText\nonChange={handleChange}\nvalue={params.title}\nname=\"title\"\nid=\"title\"\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label title=\"Author\" htmlFor=\"author\" /&gt;\n&lt;InputText\nonChange={handleChange}\nvalue={params.author}\nname=\"author\"\nid=\"author\"\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label title=\"Title\" htmlFor=\"from_year\" /&gt;\n&lt;Select\nonChange={handleChange}\noptions={option}\nvalue={params.from_year}\nname=\"from_year\"\nid=\"from_year\"\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label title=\"Title\" htmlFor=\"to_year\" /&gt;\n&lt;Select\nonChange={handleChange}\noptions={option}\nvalue={params.to_year}\nname=\"to_year\"\nid=\"to_year\"\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default Filter;\n</code></pre> book/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { Drawer } from \"@/components/Drawer\";\nimport Filter from \"./module/Filter\";\nimport { useDisclosure } from \"@/hook\";\nconst Book = () =&gt; {\nconst { useBookList } = useBookModule();\nconst {\ndata,\nisFetching,\nisError,\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\n} = useBookList();\nconst { isOpen, onOpen, onClose } = useDisclosure();\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\"w-screen h-screen p-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;Button width=\"sm\" colorSchema=\"red\" title=\"tambah\" /&gt;\n&lt;/section&gt;\n&lt;section className=\"h-full w-full mt-5 \"&gt;\n&lt;Table\nisFetching={isFetching}\nisEmpty={data?.data?.length === 0}\nisError={isError}\n&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;No&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Title&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Author&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Year&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Created At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Updated At&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n{data &amp;&amp;\ndata.data.map((item, index) =&gt; (\n&lt;Tr key={index}&gt;\n&lt;Td&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/Td&gt;\n&lt;Td&gt;{(params.page - 1) * params.pageSize + index + 1}&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.title}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.author}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.year}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.created_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.updated_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n))}\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;Pagination\npage={params.page}\npageSize={params.pageSize}\nhandlePageSize={handlePageSize}\nhandlePage={handlePage}\npagination={data?.pagination}\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/2.list/#merapihkan-koding-usebooklist","title":"Merapihkan koding useBookList","text":"hook/usePagination.ts<pre><code>import { ChangeEvent, useState } from \"react\";\ninterface PaginationParams {\npage: number;\npageSize: number;\n}\nexport const usePagination = &lt;T extends PaginationParams&gt;(defaultParams: T) =&gt; {\nlet [params, setParams] = useState&lt;T&gt;(defaultParams);\nlet [filterParams, setFilterParams] = useState&lt;T&gt;(defaultParams);\nconst handleFilter = () =&gt; {\nsetFilterParams({ ...params });\n};\nconst handleClear = () =&gt; {\nsetFilterParams(defaultParams);\nsetParams(defaultParams);\n};\nconst handlePageSize = (e: ChangeEvent&lt;any&gt;) =&gt; {\nsetParams((params) =&gt; ({ ...params, pageSize: e.target.value }));\nsetFilterParams((params) =&gt; ({ ...params, pageSize: e.target.value }));\n};\nconst handlePage = (page: number) =&gt; {\nsetParams((params) =&gt; ({ ...params, page: page }));\nsetFilterParams((params) =&gt; ({ ...params, page: page }));\n};\nreturn {\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\nfilterParams,\n};\n};\n</code></pre> book/lib/index.ts<pre><code>import { useQuery } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { BookListFilter, BookListResponse } from \"../interface\";\nimport { usePagination } from \"@/hook/usePagination\";\nconst useBookModule = () =&gt; {\nconst defaultParams : BookListFilter = {\ntitle: \"\",\nauthor: \"\",\nfrom_year: \"\",\nto_year: \"\",\npage: 1,\npageSize: 10,\n};\nconst getBookList = async (\nparams: BookListFilter\n): Promise&lt;BookListResponse&gt; =&gt; {\nreturn axiosClient.get(\"/book/list\", { params }).then((res) =&gt; res.data);\n};\nconst useBookList = () =&gt; {\nconst{\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\nfilterParams\n} = usePagination(defaultParams)\nconst { data, isFetching, isLoading, isError } = useQuery(\n[\"/book/list\", [filterParams]],\n() =&gt; getBookList(filterParams),\n{\nkeepPreviousData: true,\nselect: (response) =&gt; response,\n}\n);\nreturn {\ndata,\nisFetching,\nisLoading,\nisError,\nparams,\nsetParams,\nhandlePageSize,\nhandlePage,\nhandleFilter,\nhandleClear,\n};\n};\nreturn { useBookList };\n};\nexport default useBookModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/3.%20create/","title":"C. Integrasi Create Book","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/3.%20create/#1-integrasi-endpoint-tambah-buku","title":"1. Integrasi endpoint tambah buku","text":"request endpoint create<pre><code>http://localhost:5002/book/create\n{\n\"title\" : \"Nextjs\",\n\"author\" : \"ihsan\",\n\"year\" : 2020\n}\n</code></pre> response endpoint create<pre><code>{\n\"status\": \"Success\",\n\"message\": \"OK\",\n\"data\": {}\n}\n</code></pre> book/interface/index.ts<pre><code>import {\nBaseResponsePagination,\n} from \"@/lib/axiosClient\";\ninterface Book {\nid: number;\ntitle: string;\nauthor: string;\nyear: number | undefined | string;\ncreated_at: string;\nupdated_at: string;\n}\nexport interface BookListResponse extends BaseResponsePagination {\ndata: Book[];\n}\nexport interface BookListFilter extends Partial&lt;Book&gt; {\nfrom_year?: string;\nto_year?: string;\npage : number ,\npageSize : number \n}\nexport interface BookCreatePayload extends Pick&lt;Book, \"author\" | \"title\" | \"year\"&gt; {}\n</code></pre> book/page.ts<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { Drawer } from \"@/components/Drawer\";\nimport Filter from \"./module/Filter\";\nimport { useClosure } from \"@/hook\";\nimport { useRouter } from \"next/navigation\";\nconst Book = () =&gt; {\nconst { useBookList} = useBookModule();\nconst router = useRouter()\nconst {\ndata,\nisFetching,\nisError,\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\n} = useBookList();\nconst { isOpen, onOpen, onClose } = useClosure();\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\" p-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;Button onClick={()=&gt; {\nrouter.push('/book/tambah')\n}} width=\"sm\" colorSchema=\"red\" title=\"tambah\" /&gt;\n&lt;/section&gt;\n...\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre> book/lib/index.ts<pre><code>import { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport Swal from \"sweetalert2\";\nimport {\nBookCreatePayload,\nBookListFilter,\nBookListResponse,\n} from \"../interface\";\nimport { usePagination } from \"@/hook/usePagination\";\nconst useBookModule = () =&gt; {\n...\nconst useCreateBook = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookCreatePayload) =&gt; {\nreturn axiosClient.post(\"/book/create\", payload);\n},\n{\nonSuccess: (response) =&gt; {\nSwal.fire({\nposition: \"top-end\",\nicon: \"success\",\ntitle: response.data.message,\nshowConfirmButton: false,\ntimer: 1500,\n});\n},\nonError: (error) =&gt; {\nalert(\"ok\");\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn { useBookList, useCreateBook };\n};\nexport default useBookModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/3.%20create/#membuat-komponenn-create-book","title":"Membuat Komponenn Create Book","text":"book/tambah/page.ts<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Select from \"@/components/Select\";\nimport { useFormik, Form, FormikProvider } from \"formik\";\nimport * as yup from \"yup\";\nimport { BookCreatePayload } from \"../interface\";\nimport useBookModule from \"../lib\";\nimport Link from \"next/link\";\nimport { ArrowLongLeftIcon } from \"@heroicons/react/20/solid\";\nconst createBookSchema = yup.object().shape({\ntitle: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nauthor: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nyear: yup.number().nullable().default(undefined).required(\"Wajib pilih\"),\n});\nconst option = [\n{\nvalue: 2020,\nlabel: \"2020\",\n},\n{\nvalue: 2021,\nlabel: \"2021\",\n},\n{\nvalue: 2022,\nlabel: \"2022\",\n},\n{\nvalue: 2023,\nlabel: \"2023\",\n},\n];\nconst CreateBook = () =&gt; {\nconst formik = useFormik&lt;BookCreatePayload&gt;({\ninitialValues: {},\nvalidationSchema: createBookSchema,\nenableReinitialize: true,\nonSubmit: () =&gt; {\nconsole.log(\"ok\");\n},\n});\nreturn (\n&lt;section className=\"flex items-center  justify-center w-full h-full\"&gt;\n&lt;section className=\"w-1/2\"&gt;\n&lt;Link href={\"/book\"}&gt;\n&lt;span className=\"flex items-center\"&gt;\n{\" \"}\n&lt;ArrowLongLeftIcon className=\"h-5 w-5 mr-2\" /&gt;\nKembali\n&lt;/span&gt;\n&lt;/Link&gt;\n&lt;h2 className=\"text-xl font-bold text-gray-500\"&gt;Tambah Buku&lt;/h2&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\"&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"title\" title=\"Title\" /&gt;\n&lt;InputText\nvalue={\"123\"}\nplaceholder=\"Judul Buku\"\nid=\"title\"\nname=\"title\"\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"author\" title=\"Auhtor\" /&gt;\n&lt;InputText\nvalue={\"123\"}\nplaceholder=\"Penulis Buku\"\nid=\"author\"\nname=\"author\"\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"year\" title=\"Year\" /&gt;\n&lt;Select value={\"123\"} id=\"year\" name=\"year\" options={option} /&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button height=\"md\" title=\"Simpan\" colorSchema=\"blue\" /&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default CreateBook;\n</code></pre> book/tambah/page.ts<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Select from \"@/components/Select\";\nimport { useFormik, Form, FormikProvider } from \"formik\";\nimport * as yup from \"yup\";\nimport { BookCreatePayload } from \"../interface\";\nimport useBookModule from \"../lib\";\nimport Link from \"next/link\";\nimport { ArrowLongLeftIcon } from \"@heroicons/react/20/solid\";\nconst createBookSchema = yup.object().shape({\ntitle: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nauthor: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nyear: yup.number().nullable().default(undefined).required(\"Wajib pilih\"),\n});\nconst option = [\n{\nvalue: 2020,\nlabel: \"2020\",\n},\n{\nvalue: 2021,\nlabel: \"2021\",\n},\n{\nvalue: 2022,\nlabel: \"2022\",\n},\n{\nvalue: 2023,\nlabel: \"2023\",\n},\n];\nconst CreateBook = () =&gt; {\nconst { useCreateBook } = useBookModule();\nconst { mutate, isLoading } = useCreateBook();\nconst onSubmit = async (values: BookCreatePayload) =&gt; {\nmutate(values, {\nonSuccess: () =&gt; {\nresetForm();\nsetValues(createBookSchema.getDefault());\n},\n});\n};\nconst formik = useFormik&lt;BookCreatePayload&gt;({\ninitialValues: createBookSchema.getDefault(),\nvalidationSchema: createBookSchema,\nenableReinitialize: true,\nonSubmit: onSubmit,\n});\nconst {\nhandleChange,\nhandleSubmit,\nsetFieldValue,\nhandleBlur,\nvalues,\nerrors,\nresetForm,\nsetValues,\n} = formik;\nreturn (\n&lt;section className=\"flex items-center  justify-center w-full h-full\"&gt;\n&lt;section className=\"w-1/2\"&gt;\n&lt;Link href={\"/book\"}&gt;\n&lt;span className=\"flex items-center\" &gt; &lt;ArrowLongLeftIcon className=\"h-5 w-5 mr-2\"/&gt;Kembali&lt;/span&gt;\n&lt;/Link&gt;\n&lt;h2 className=\"text-xl font-bold text-gray-500\"&gt;Tambah Buku&lt;/h2&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"title\" title=\"Title\" /&gt;\n&lt;InputText\nvalue={values.title}\nplaceholder=\"Judul Buku\"\nid=\"title\"\nname=\"title\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.title}\nmessageError={errors.title}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"author\" title=\"Auhtor\" /&gt;\n&lt;InputText\nvalue={values.author}\nplaceholder=\"Penulis Buku\"\nid=\"author\"\nname=\"author\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.author}\nmessageError={errors.author}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"year\" title=\"Year\" /&gt;\n&lt;Select\nvalue={values.year}\nid=\"year\"\nname=\"year\"\nonChange={handleChange}\nonBlur={handleBlur}\noptions={option}\nisError={!!errors.year}\nmessageError={errors.year}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"md\"\ntitle=\"Simpan\"\ncolorSchema=\"blue\"\nisLoading={isLoading}\nisDisabled={isLoading}\n/&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default CreateBook;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/","title":"D. Integrasi Detail dan Update Book","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#1-integrasi-detail-book","title":"1. Integrasi Detail Book","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#membuat-routing-halaman-update","title":"Membuat Routing Halaman Update","text":"app/book/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { Drawer } from \"@/components/Drawer\";\nimport Filter from \"./module/Filter\";\nimport { useDisclosure } from \"@/hook\";\nimport { useRouter } from \"next/navigation\";\nimport { TrashIcon, PencilSquareIcon } from \"@heroicons/react/20/solid\";\nimport { DeleteButton, EditButton } from \"@/components/ButtonAction\";\nconst Book = () =&gt; {\nconst { useBookList } = useBookModule();\nconst router = useRouter();\nconst {\ndata,\nisFetching,\nisError,\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\n} = useBookList();\nconst { isOpen, onOpen, onClose } = useDisclosure();\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\" p-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah\");\n}}\nwidth=\"sm\"\ncolorSchema=\"red\"\ntitle=\"tambah\"\n/&gt;\n&lt;/section&gt;\n&lt;section className=\"h-full w-full mt-5 \"&gt;\n&lt;Table\nisFetching={isFetching}\nisEmpty={data?.data?.length === 0}\nisError={isError}\n&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;No&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Title&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Author&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Year&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Created At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Updated At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Aksi&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n{data &amp;&amp;\ndata.data.map((item, index) =&gt; (\n&lt;Tr key={index}&gt;\n&lt;Td&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/Td&gt;\n&lt;Td&gt;{(params.page - 1) * params.pageSize + index + 1}&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.title}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.author}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.year}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.created_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.updated_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;DeleteButton\nonClick={() =&gt; {\nconsole.log(\"ok\");\n}}\n/&gt;\n&lt;EditButton\nonClick={() =&gt; {\nrouter.push(`book/${item.id}/edit`)\n}}\n/&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n))}\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;Pagination\npage={params.page}\npageSize={params.pageSize}\nhandlePageSize={handlePageSize}\nhandlePage={handlePage}\npagination={data?.pagination}\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#membuat-halaman-update","title":"Membuat Halaman Update","text":"app/book/[id]/update/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Select from \"@/components/Select\";\nimport { useFormik, Form, FormikProvider } from \"formik\";\nimport * as yup from \"yup\";\nimport { BookUpdatePayload } from \"../../interface\";\nimport useBookModule from \"../../lib\";\nimport Link from \"next/link\";\nimport { ArrowLongLeftIcon } from \"@heroicons/react/20/solid\";\nimport { option } from \"../../tambah/page\";\nconst createBookSchema = yup.object().shape({\ntitle: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nauthor: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nyear: yup.number().nullable().default(undefined).required(\"Wajib pilih\"),\n});\nconst UpdateBook = ({ params }: { params: { id: string } }) =&gt; {\nconst formik = useFormik&lt;BookUpdatePayload&gt;({\ninitialValues: {\ntitle:  \"\",\nyear: \"\",\nauthor:  \"\",\nid: 0,\n},\nvalidationSchema: createBookSchema,\nenableReinitialize: true,\nonSubmit: ()=&gt; console.log('update'),\n});\nconst {\nhandleChange,\nhandleSubmit,\nsetFieldValue,\nhandleBlur,\nvalues,\nerrors,\nresetForm,\nsetValues,\n} = formik;\nreturn (\n&lt;section className=\"flex items-center  justify-center w-full h-full\"&gt;\n&lt;section className=\"w-1/2\"&gt;\n&lt;Link href={\"/book\"}&gt;\n&lt;span className=\"flex items-center\"&gt;\n{\" \"}\n&lt;ArrowLongLeftIcon className=\"h-5 w-5 mr-2\" /&gt;\nKembali\n&lt;/span&gt;\n&lt;/Link&gt;\n&lt;h2 className=\"text-xl font-bold text-gray-500\"&gt;Perbaharui Buku&lt;/h2&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"title\" title=\"Title\" /&gt;\n&lt;InputText\nvalue={values.title}\nplaceholder=\"Judul Buku\"\nid=\"title\"\nname=\"title\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.title}\nmessageError={errors.title}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"author\" title=\"Auhtor\" /&gt;\n&lt;InputText\nvalue={values.author}\nplaceholder=\"Penulis Buku\"\nid=\"author\"\nname=\"author\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.author}\nmessageError={errors.author}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"year\" title=\"Year\" /&gt;\n&lt;Select\nvalue={values.year}\nid=\"year\"\nname=\"year\"\nonChange={handleChange}\nonBlur={handleBlur}\noptions={option}\nisError={!!errors.year}\nmessageError={errors.year}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"md\"\ntitle=\"Perbarui\"\ncolorSchema=\"blue\"\n/&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default UpdateBook;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#membuat-interface-detail-book","title":"Membuat interface Detail Book","text":"request endpoint detail<pre><code>http://localhost:5002/book/detail/1\n</code></pre> response endpoint detail<pre><code>{\n\"status\": \"Success\",\n\"message\": \"OK\",\n\"data\": {\n\"id\": 1,\n\"title\": \"nestjs testing update 1\",\n\"author\": \"ihsan santana\",\n\"year\": 2021,\n\"created_at\": \"2023-09-22T06:05:48.000Z\",\n\"updated_at\": \"2023-09-22T06:05:48.000Z\"\n}\n}\n</code></pre> app/book/interface/index.ts<pre><code>import {\nBaseResponsePagination,\n} from \"@/lib/axiosClient\";\ninterface Book {\nid: number | undefined;\ntitle: string;\nauthor: string;\nyear: number | undefined | string;\ncreated_at: string;\nupdated_at: string;\n}\nexport interface BookListResponse extends BaseResponsePagination {\ndata: Book[];\n}\nexport interface BookListFilter extends Partial&lt;Book&gt; {\nfrom_year?: string;\nto_year?: string;\npage : number ,\npageSize : number\n}\nexport interface BookCreatePayload extends Pick&lt;Book, \"author\" | \"title\" | \"year\"&gt; {}\nexport interface BookDetail extends Book{}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#membuat-service-detail-book","title":"Membuat Service Detail Book","text":"app/book/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport Swal from \"sweetalert2\";\nimport {\nBookCreatePayload,\nBookDetail,\nBookListFilter,\nBookListResponse,\n} from \"../interface\";\nimport { usePagination } from \"@/hook/usePagination\";\nconst useBookModule = () =&gt; {\nconst queryClient = useQueryClient();\nconst defaultParams: BookListFilter = {\ntitle: \"\",\nauthor: \"\",\nfrom_year: \"\",\nto_year: \"\",\npage: 1,\npageSize: 10,\n};\n....\nconst getDetailBook = async (\nid:string\n): Promise&lt;BookDetail&gt; =&gt; {\nreturn axiosClient.get(`/book/detail/${id}`).then((res) =&gt; res.data.data);\n};\nconst useDetailBook = (id:string) =&gt; {\nconst { data, isLoading, isFetching } = useQuery(\n[\"/book/detail\", { id }],\n() =&gt; getDetailBook(id),\n{\nselect: (response) =&gt; response,\n}\n);\nreturn { data, isFetching, isLoading };\n}\nreturn { useBookList, useCreateBook, useDetailBook };\n};\nexport default useBookModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#memanggil-service-detail-di-halaman-update","title":"Memanggil Service Detail di Halaman  update","text":"book/[id]/update/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Select from \"@/components/Select\";\nimport { useFormik, Form, FormikProvider } from \"formik\";\nimport * as yup from \"yup\";\nimport { BookUpdatePayload } from \"../../interface\";\nimport useBookModule from \"../../lib\";\nimport Link from \"next/link\";\nimport { ArrowLongLeftIcon } from \"@heroicons/react/20/solid\";\nimport { option } from \"../../tambah/page\";\nconst createBookSchema = yup.object().shape({\ntitle: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nauthor: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nyear: yup.number().nullable().default(undefined).required(\"Wajib pilih\"),\n});\nconst UpdateBook = ({ params }: { params: { id: string } }) =&gt; {\nconst { useDetailBook, useUpdateBook } = useBookModule();\nconst { mutate, isLoading } = useUpdateBook(params.id);\nconst { data, isFetching } = useDetailBook(params.id);\nconst formik = useFormik&lt;BookUpdatePayload&gt;({\ninitialValues: {\ntitle: data?.title || \"\",\nyear: data?.year,\nauthor: data?.author || \"\",\nid: data?.id,\n},\nvalidationSchema: createBookSchema,\nenableReinitialize: true,\nonSubmit: ()=&gt; console.log('update'),\n});\nconst {\nhandleChange,\nhandleSubmit,\nsetFieldValue,\nhandleBlur,\nvalues,\nerrors,\nresetForm,\nsetValues,\n} = formik;\nif(isFetching) {\nreturn (\n&lt;p&gt;Loading&lt;/p&gt;\n)\n}\nreturn (\n&lt;section className=\"flex items-center  justify-center w-full h-full\"&gt;\n&lt;section className=\"w-1/2\"&gt;\n&lt;Link href={\"/book\"}&gt;\n&lt;span className=\"flex items-center\"&gt;\n{\" \"}\n&lt;ArrowLongLeftIcon className=\"h-5 w-5 mr-2\" /&gt;\nKembali\n&lt;/span&gt;\n&lt;/Link&gt;\n&lt;h2 className=\"text-xl font-bold text-gray-500\"&gt;Perbaharui Buku&lt;/h2&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"title\" title=\"Title\" /&gt;\n&lt;InputText\nvalue={values.title}\nplaceholder=\"Judul Buku\"\nid=\"title\"\nname=\"title\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.title}\nmessageError={errors.title}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"author\" title=\"Auhtor\" /&gt;\n&lt;InputText\nvalue={values.author}\nplaceholder=\"Penulis Buku\"\nid=\"author\"\nname=\"author\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.author}\nmessageError={errors.author}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"year\" title=\"Year\" /&gt;\n&lt;Select\nvalue={values.year}\nid=\"year\"\nname=\"year\"\nonChange={handleChange}\nonBlur={handleBlur}\noptions={option}\nisError={!!errors.year}\nmessageError={errors.year}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"md\"\ntitle=\"Perbarui\"\ncolorSchema=\"blue\"\nisLoading={isLoading}\nisDisabled={isLoading}\n/&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default UpdateBook;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#2-integrasi-update-book","title":"2. Integrasi Update Book","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#membuat-interface-update-book","title":"Membuat interface update book","text":"<p>request endpoint update<pre><code>http://localhost:5002/book/update/1\n</code></pre> payload endpoint update<pre><code>{\n\"title\" : \"NestJS Up\",\n\"author\" : \"Ihsan Update\",\n\"year\" : 2023\n}\n</code></pre></p> response endpoint update<pre><code>{\n\"status\": \"Success \",\n\"message\": \"Buku berhasil di update\",\n\"data\": {\n\"title\": \"NestJS Up\",\n\"author\": \"Ihsan Update\",\n\"year\": 2023,\n\"id\": 1\n}\n}\n</code></pre> book/interface/index.ts<pre><code>import {\nBaseResponsePagination,\n} from \"@/lib/axiosClient\";\ninterface Book {\nid: number | undefined;\ntitle: string;\nauthor: string;\nyear: number | undefined | string;\ncreated_at: string;\nupdated_at: string;\n}\nexport interface BookListResponse extends BaseResponsePagination {\ndata: Book[];\n}\nexport interface BookListFilter extends Partial&lt;Book&gt; {\nfrom_year?: string;\nto_year?: string;\npage : number ,\npageSize : number \n}\nexport interface BookCreatePayload extends Pick&lt;Book, \"author\" | \"title\" | \"year\"&gt; {}\nexport interface BookUpdatePayload extends Pick&lt;Book, \"author\" | \"title\" | \"year\" | \"id\"&gt; {}\nexport interface BookDetail extends Book{}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#membuat-service-update-book","title":"Membuat Service Update Book","text":"book/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport Swal from \"sweetalert2\";\nimport {\nBookCreatePayload,\nBookDetail,\nBookListFilter,\nBookListResponse,\nBookUpdatePayload,\n} from \"../interface\";\nimport { usePagination } from \"@/hook/usePagination\";\nconst useBookModule = () =&gt; {\nconst queryClient = useQueryClient();\nconst defaultParams: BookListFilter = {\ntitle: \"\",\nauthor: \"\",\nfrom_year: \"\",\nto_year: \"\",\npage: 1,\npageSize: 10,\n};\n...\nconst useUpdateBook = (id:string) =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookUpdatePayload) =&gt; {\nreturn axiosClient.put(`/book/update/${id}`, payload);\n},\n{\nonSuccess: (response) =&gt; {\nSwal.fire({\nposition: \"top-end\",\nicon: \"success\",\ntitle: response.data.message,\nshowConfirmButton: false,\ntimer: 1000,\n});\nqueryClient.invalidateQueries([\"/book/detail\"]);\n},\nonError: (error) =&gt; {\nalert(\"ok\");\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn { useBookList, useCreateBook, useDetailBook, useUpdateBook };\n};\nexport default useBookModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/4.%20update/#memanggil-service-update-book-di-halaman-update","title":"Memanggil Service Update Book di Halaman  update","text":"book/[id]/update/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Select from \"@/components/Select\";\nimport { useFormik, Form, FormikProvider } from \"formik\";\nimport * as yup from \"yup\";\nimport { BookUpdatePayload } from \"../../interface\";\nimport useBookModule from \"../../lib\";\nimport Link from \"next/link\";\nimport { ArrowLongLeftIcon } from \"@heroicons/react/20/solid\";\nimport { option } from \"../../tambah/page\";\nconst createBookSchema = yup.object().shape({\ntitle: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nauthor: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nyear: yup.number().nullable().default(undefined).required(\"Wajib pilih\"),\n});\nconst UpdateBook = ({ params }: { params: { id: string } }) =&gt; {\nconst { useDetailBook, useUpdateBook } = useBookModule();\nconst { mutate, isLoading } = useUpdateBook(params.id);\nconst { data, isFetching } = useDetailBook(params.id);\nconst onSubmit = async (values: BookUpdatePayload) =&gt; {\nmutate(values);\n};\nconst formik = useFormik&lt;BookUpdatePayload&gt;({\ninitialValues: {\ntitle: data?.title || \"\",\nyear: data?.year,\nauthor: data?.author || \"\",\nid: data?.id,\n},\nvalidationSchema: createBookSchema,\nenableReinitialize: true,\nonSubmit: onSubmit,\n});\nconst {\nhandleChange,\nhandleSubmit,\nsetFieldValue,\nhandleBlur,\nvalues,\nerrors,\nresetForm,\nsetValues,\n} = formik;\nif(isFetching) {\nreturn (\n&lt;p&gt;Loading&lt;/p&gt;\n)\n}\nreturn (\n&lt;section className=\"flex items-center  justify-center w-full h-full\"&gt;\n&lt;section className=\"w-1/2\"&gt;\n&lt;Link href={\"/book\"}&gt;\n&lt;span className=\"flex items-center\"&gt;\n{\" \"}\n&lt;ArrowLongLeftIcon className=\"h-5 w-5 mr-2\" /&gt;\nKembali\n&lt;/span&gt;\n&lt;/Link&gt;\n&lt;h2 className=\"text-xl font-bold text-gray-500\"&gt;Perbaharui Buku&lt;/h2&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"title\" title=\"Title\" /&gt;\n&lt;InputText\nvalue={values.title}\nplaceholder=\"Judul Buku\"\nid=\"title\"\nname=\"title\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.title}\nmessageError={errors.title}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"author\" title=\"Auhtor\" /&gt;\n&lt;InputText\nvalue={values.author}\nplaceholder=\"Penulis Buku\"\nid=\"author\"\nname=\"author\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={!!errors.author}\nmessageError={errors.author}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"year\" title=\"Year\" /&gt;\n&lt;Select\nvalue={values.year}\nid=\"year\"\nname=\"year\"\nonChange={handleChange}\nonBlur={handleBlur}\noptions={option}\nisError={!!errors.year}\nmessageError={errors.year}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"md\"\ntitle=\"Perbarui\"\ncolorSchema=\"blue\"\nisLoading={isLoading}\nisDisabled={isLoading}\n/&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default UpdateBook;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/","title":"E. Integrasi Delete Book","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/#1-integrasi-delete-book","title":"1. Integrasi Delete Book","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/#membuat-service-delete-book","title":"Membuat Service Delete Book","text":"book/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport Swal from \"sweetalert2\";\nimport {\nBookCreatePayload,\nBookDetail,\nBookListFilter,\nBookListResponse,\nBookUpdatePayload,\n} from \"../interface\";\nimport { usePagination } from \"@/hook/usePagination\";\nconst useBookModule = () =&gt; {\nconst queryClient = useQueryClient();\nconst defaultParams: BookListFilter = {\ntitle: \"\",\nauthor: \"\",\nfrom_year: \"\",\nto_year: \"\",\npage: 1,\npageSize: 10,\n};\n...\nconst useDeleteBook = () =&gt; {\nconst {mutate, isLoading} = useMutation(\n(id:number) =&gt; {\nreturn axiosClient.delete(`/book/delete/${id}`);\n},\n{\nonSuccess: (response) =&gt; {\nSwal.fire({\nposition: \"top-end\",\nicon: \"success\",\ntitle: response.data.message,\nshowConfirmButton: false,\ntimer: 1000,\n});\nqueryClient.invalidateQueries([\"/book/list\"]);\n},\nonError: (error: any) =&gt; {\nif (error.response.status == 422) {\nSwal.fire({\nposition: \"top\",\nicon: \"warning\",\ntitle: error.response.data.message,\nshowConfirmButton: false,\ntimer: 1000,\n});\n} else {\nSwal.fire({\nposition: \"top\",\nicon: \"error\",\ntitle: \"Ada Kesalahan\",\nshowConfirmButton: false,\ntimer: 1000,\n});\n}\n},\n}\n);\nreturn {mutate, isLoading}\n};\nreturn {\nuseBookList,\nuseCreateBook,\nuseDetailBook,\nuseUpdateBook,\nuseDeleteBook,\n};\n};\nexport default useBookModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/#memanggil-service-delete-di-halaman-utama","title":"Memanggil Service Delete di Halaman Utama","text":"book/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { Drawer } from \"@/components/Drawer\";\nimport Filter from \"./module/Filter\";\nimport { useDisclosure } from \"@/hook\";\nimport { useRouter } from \"next/navigation\";\nimport { DeleteButton, EditButton } from \"@/components/ButtonAction\";\nimport Swal from \"sweetalert2\";\nconst Book = () =&gt; {\nconst { useBookList, useDeleteBook } = useBookModule();\nconst {mutate, isLoading } = useDeleteBook()\nconst router = useRouter();\nconst handleDelete = (id: number) =&gt; {\nconst swalWithBootstrapButtons = Swal.mixin({\ncustomClass: {\nconfirmButton: \"btn btn-success\",\ncancelButton: \"btn btn-danger\",\n},\nbuttonsStyling: true,\n});\nswalWithBootstrapButtons\n.fire({\ntitle: \"Apakah Yakin?\",\ntext: \"Data yang terhapus tidak bisa dikembalikan\",\nicon: \"warning\",\nshowCancelButton: true,\nconfirmButtonText: \"Hapus\",\nconfirmButtonColor: \"red\",\ncancelButtonText: \"Batal\",\nreverseButtons: true,\n})\n.then(async (result) =&gt; {\nif (result.isConfirmed) {\nawait mutate(id);\n}\n});\n};\nconst {\ndata,\nisFetching,\nisError,\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\n} = useBookList();\nconst { isOpen, onOpen, onClose } = useDisclosure();\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\" p-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah\");\n}}\nwidth=\"sm\"\ncolorSchema=\"red\"\ntitle=\"tambah\"\n/&gt;\n&lt;/section&gt;\n&lt;section className=\"h-full w-full mt-5 \"&gt;\n&lt;Table\nisFetching={isFetching}\nisEmpty={data?.data?.length === 0}\nisError={isError}\n&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;No&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Title&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Author&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Year&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Created At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Updated At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Aksi&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n{data &amp;&amp;\ndata.data.map((item, index) =&gt; (\n&lt;Tr key={index}&gt;\n&lt;Td&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/Td&gt;\n&lt;Td&gt;{(params.page - 1) * params.pageSize + index + 1}&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.title}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.author}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.year}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.created_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.updated_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span className=\"flex items-center space-x-2\"&gt;\n&lt;DeleteButton\nisLoading={isLoading}\nonClick={() =&gt; {\nhandleDelete(item.id || 0);\n}}\n/&gt;\n&lt;EditButton\nonClick={() =&gt; {\nrouter.push(`book/${item.id}/edit`);\n}}\n/&gt;\n&lt;/span&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n))}\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;Pagination\npage={params.page}\npageSize={params.pageSize}\nhandlePageSize={handlePageSize}\nhandlePage={handlePage}\npagination={data?.pagination}\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/#jalankan-pada-browser","title":"Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/#2-membuat-useconfirmdelete","title":"2. Membuat useConfirmDelete","text":"hook/useConfirmDelete.ts<pre><code>import Swal from \"sweetalert2\";\ntype SubmitFunction = (id: number) =&gt; any;\nexport function useConfirmDelete({\nonSubmit,\n}: {\nonSubmit: SubmitFunction;\n}) {\nconst handleDelete = (id: number) =&gt; {\nconst swalWithBootstrapButtons = Swal.mixin({\ncustomClass: {\nconfirmButton: \"btn btn-success\",\ncancelButton: \"btn btn-danger\",\n},\nbuttonsStyling: true,\n});\nswalWithBootstrapButtons\n.fire({\ntitle: \"Apakah Yakin?\",\ntext: \"Data yang terhapus tidak bisa dikembalikan\",\nicon: \"warning\",\nshowCancelButton: true,\nconfirmButtonText: \"Hapus\",\nconfirmButtonColor: \"red\",\ncancelButtonText: \"Batal\",\nreverseButtons: true,\n})\n.then(async (result) =&gt; {\nif (result.isConfirmed) {\nawait onSubmit(id);\n}\n});\n};\nreturn handleDelete;\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/#memanggil-hook-useconfirmdelete","title":"Memanggil hook useConfirmDelete","text":"app/book/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { Drawer } from \"@/components/Drawer\";\nimport Filter from \"./module/Filter\";\nimport { useDisclosure, useConfirmDelete } from \"@/hook\";\nimport { useRouter } from \"next/navigation\";\nimport { DeleteButton, EditButton } from \"@/components/ButtonAction\";\nimport Swal from \"sweetalert2\";\nconst Book = () =&gt; {\nconst { useBookList, useDeleteBook } = useBookModule();\nconst { mutate, isLoading } = useDeleteBook();\nconst router = useRouter();\nconst handleDelete = useConfirmDelete({\nonSubmit: (id) =&gt; {\nmutate(id);\n},\n});\nconst {\ndata,\nisFetching,\nisError,\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\n} = useBookList();\nconst { isOpen, onOpen, onClose } = useDisclosure();\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\" p-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah\");\n}}\nwidth=\"sm\"\ncolorSchema=\"red\"\ntitle=\"tambah\"\n/&gt;\n&lt;/section&gt;\n&lt;section className=\"h-full w-full mt-5 \"&gt;\n&lt;Table\nisFetching={isFetching}\nisEmpty={data?.data?.length === 0}\nisError={isError}\n&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;No&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Title&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Author&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Year&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Created At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Updated At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Aksi&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n{data &amp;&amp;\ndata.data.map((item, index) =&gt; (\n&lt;Tr key={index}&gt;\n&lt;Td&gt;\n&lt;input\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/Td&gt;\n&lt;Td&gt;{(params.page - 1) * params.pageSize + index + 1}&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.title}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.author}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.year}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.created_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.updated_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span className=\"flex items-center space-x-2\"&gt;\n&lt;DeleteButton\nisLoading={isLoading}\nonClick={() =&gt; {\nhandleDelete(item.id || 0);\n}}\n/&gt;\n&lt;EditButton\nonClick={() =&gt; {\nrouter.push(`book/${item.id}/edit`);\n}}\n/&gt;\n&lt;/span&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n))}\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;Pagination\npage={params.page}\npageSize={params.pageSize}\nhandlePageSize={handlePageSize}\nhandlePage={handlePage}\npagination={data?.pagination}\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/5.delete/#jalankan-pada-browser_1","title":"Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/6.createbulk/","title":"F. Integrasi Create Bulk","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/6.createbulk/#1-integrasi-createbulk","title":"1. Integrasi CreateBulk","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/6.createbulk/#membuat-interface","title":"Membuat Interface","text":"<p>request endpoint create bulk<pre><code>http://localhost:5002/book/create/bulk\n</code></pre> payload endpoint create bulk<pre><code>{\n\"data\" : [\n{\n\"title\": \"NestJS For Backend\",\n\"author\": \"Ihsan\",\n\"year\": 2023\n},\n{\n\"title\": \"Become Network Engineer\",\n\"author\": \"Fathi\",\n\"year\": 2021\n}  \n]\n}\n</code></pre></p> <p>response endpoint create bulk<pre><code>{\n\"status\": \"Success\",\n\"message\": \"Berhasil menyimpan 8 dan gagal 0\",\n\"data\": {}\n}\n</code></pre> book/interface/index.ts<pre><code>import { BaseResponsePagination } from \"@/lib/axiosClient\";\ninterface Book {\nid: number | undefined;\ntitle: string;\nauthor: string;\nyear: number | undefined | string \ncreated_at: string;\nupdated_at: string;\n}\n...\nexport interface BookCreatePayload\nextends Pick&lt;Book, \"author\" | \"title\" | \"year\"&gt; {}\n...\nexport interface BookCreateArrayPayload {\ndata: BookCreatePayload[];\n}\n</code></pre></p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/6.createbulk/#membuat-service-create-bulk","title":"Membuat Service Create Bulk","text":"book/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport Swal from \"sweetalert2\";\nimport {\nBookCreateArrayPayload,\nBookCreatePayload,\nBookDetail,\nBookListFilter,\nBookListResponse,\nBookUpdatePayload,\n} from \"../interface\";\nimport { usePagination } from \"@/hook/usePagination\";\nconst useBookModule = () =&gt; {\n...\nconst useCreateBulkBook = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookCreateArrayPayload) =&gt; {\nreturn axiosClient.post(\"/book/create/bulk\", payload);\n},\n{\nonSuccess: (response) =&gt; {\nSwal.fire({\nposition: \"top-end\",\nicon: \"success\",\ntitle: response.data.message,\nshowConfirmButton: false,\ntimer: 1000,\n});\n},\nonError: (error) =&gt; {\nSwal.fire({\nposition: \"top\",\nicon: \"error\",\ntitle: \"Ada Kesalahan\",\nshowConfirmButton: false,\ntimer: 1000,\n});\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn {\nuseBookList,\nuseCreateBook,\nuseDetailBook,\nuseUpdateBook,\nuseDeleteBook,\nuseCreateBulkBook\n};\n};\nexport default useBookModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/6.createbulk/#menambahkan-navigati-create-bulk","title":"Menambahkan Navigati Create Bulk","text":"app/book/oage.tsx<pre><code>\"use client\";\nconst Book = () =&gt; {\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\" p-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;div className=\"space-x-5\"&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah\");\n}}\nwidth=\"sm\"\ncolorSchema=\"red\"\ntitle=\"tambah\"\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah-bulk\");\n}}\nwidth=\"sm\"\ncolorSchema=\"green\"\ntitle=\"tambah bulk\"\n/&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n...\nexport default Book;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/6.createbulk/#membuat-halaman-create-bulk","title":"Membuat Halaman Create Bulk","text":"app/book/tambah-bulk/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Select from \"@/components/Select\";\nimport {\nuseFormik,\nForm,\nFormikProvider,\nFieldArray,\nArrayHelpers,\ngetIn\n} from \"formik\";\nimport * as yup from \"yup\";\nimport { BookCreateArrayPayload } from \"../interface\";\nimport useBookModule from \"../lib\";\nimport Link from \"next/link\";\nimport { ArrowLongLeftIcon } from \"@heroicons/react/20/solid\";\nimport { createBookSchema } from \"../tambah/page\";\nimport { option } from \"../tambah/page\";\nimport { AddButton, DeleteButton } from \"@/components/ButtonAction\";\nconst defaultCatatanArray = {\ndata: [\n{\ntitle: \"\",\nauthor: \"\",\nyear: undefined,\n},\n],\n};\nconst createBookArraySchema = yup\n.object()\n.shape({\ndata: yup.array().of(createBookSchema),\n})\n.default(defaultCatatanArray);\nconst CreateBook = () =&gt; {\nconst { useCreateBulkBook } = useBookModule();\nconst { mutate, isLoading } = useCreateBulkBook();\nconst onSubmit = async (values: BookCreateArrayPayload) =&gt; {\nmutate(values, {\nonSuccess: () =&gt; {\nresetForm();\nsetValues(defaultCatatanArray);\n},\n});\n};\nconst formik = useFormik&lt;BookCreateArrayPayload&gt;({\ninitialValues: createBookArraySchema.getDefault(),\nvalidationSchema: createBookArraySchema,\nenableReinitialize: true,\nonSubmit: onSubmit,\n});\nconst {\nhandleChange,\nhandleSubmit,\nsetFieldValue,\nhandleBlur,\nvalues,\nerrors,\nresetForm,\nsetValues,\n} = formik;\nreturn (\n&lt;section className=\"flex items-center  justify-center w-full h-full overflow-auto py-10\"&gt;\n&lt;section className=\"w-1/2\"&gt;\n&lt;Link href={\"/book\"}&gt;\n&lt;span className=\"flex items-center\"&gt;\n{\" \"}\n&lt;ArrowLongLeftIcon className=\"h-5 w-5 mr-2\" /&gt;\nKembali\n&lt;/span&gt;\n&lt;/Link&gt;\n&lt;h2 className=\"text-xl font-bold text-gray-500\"&gt;Tambah Buku&lt;/h2&gt;\n{JSON.stringify(errors)}\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;FieldArray\nname={\"data\"}\nrender={(arrayHelpers: ArrayHelpers) =&gt; (\n&lt;&gt;\n{values &amp;&amp;\nvalues?.data?.map((value, index) =&gt; (\n&lt;section\nkey={index}\nclassName=\"space-y-2 shadow-lg p-5 relative\"\n&gt;\n&lt;section className=\"flex items-center justify-end\"&gt;\n&lt;DeleteButton\nonClick={() =&gt; arrayHelpers.remove(index)}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"title\" title=\"Title\" /&gt;\n&lt;InputText\nvalue={value.title}\nplaceholder=\"Judul Buku\"\nid={`data[${index}]title`}\nname={`data[${index}]title`}\nonChange={handleChange}\nonBlur={handleBlur}\nisError={\ngetIn(errors?.data?.[index], \"title\")\n}\nmessageError={ getIn(errors?.data?.[index], \"title\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"author\" title=\"Auhtor\" /&gt;\n&lt;InputText\nvalue={value.author}\nplaceholder=\"Penulis Buku\"\nid={`data[${index}]author`}\nname={`data[${index}]author`}\nonChange={(e) =&gt; {\nsetFieldValue(\n`data[${index}]author`,\ne.target.value\n);\n}}\nonBlur={handleBlur}\nisError={\ngetIn(errors?.data?.[index], \"author\")\n}\nmessageError={ getIn(errors?.data?.[index], \"author\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"year\" title=\"Year\" /&gt;\n&lt;Select\nvalue={value.year}\nid={`data[${index}]year`}\nname={`data[${index}]year`}\nonChange={handleChange}\nonBlur={handleBlur}\noptions={option}\nisError={\ngetIn(errors?.data?.[index], \"year\")\n}\nmessageError={ getIn(errors?.data?.[index], \"year\")}\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n))}\n&lt;section&gt;\n&lt;AddButton\nonClick={() =&gt;\narrayHelpers.push(createBookSchema.getDefault())\n}\n/&gt;\n&lt;/section&gt;\n&lt;/&gt;\n)}\n/&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"md\"\ntitle=\"Simpan\"\ncolorSchema=\"blue\"\nisLoading={isLoading}\nisDisabled={isLoading}\n/&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n);\n};\nexport default CreateBook;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/","title":"G. Integrasi Delete Bulk","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#1-integrasi-delete-bulk","title":"1. Integrasi Delete Bulk","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#membuat-interface","title":"Membuat Interface","text":"<p>request endpoint delete bulk<pre><code>http://localhost:5002/book/delete/bulk\n</code></pre> payload endpoint delete bulk<pre><code>{\n\"data\" : [1,2,3]\n}\n</code></pre></p> response endpoint delete bulk<pre><code>{\n\"status\": \"Success\",\n\"message\": \"Berhasil meenghapus 3 dan gagal 0\",\n\"data\": {}\n}\n</code></pre> book/interface/index.ts<pre><code>...\nexport interface BookDeleteArrayPayload {\ndata : number[]\n}\n...\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#membuat-service-delete-bulk","title":"Membuat Service Delete Bulk","text":"book/lib/index.ts<pre><code>...\nconst useDeleteBulkBook = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookDeleteArrayPayload) =&gt; {\nreturn axiosClient.post(\"/book/delete/bulk\", payload);\n},\n{\nonSuccess: (response) =&gt; {\nSwal.fire({\nposition: \"top-end\",\nicon: \"success\",\ntitle: response.data.message,\nshowConfirmButton: false,\ntimer: 1000,\n});\nqueryClient.invalidateQueries([\"/book/list\"]);\n},\nonError: (error) =&gt; {\nSwal.fire({\nposition: \"top\",\nicon: \"error\",\ntitle: \"Ada Kesalahan\",\nshowConfirmButton: false,\ntimer: 1000,\n});\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn {\nuseBookList,\nuseCreateBook,\nuseDetailBook,\nuseUpdateBook,\nuseDeleteBook,\nuseCreateBulkBook,\nuseDeleteBulkBook\n};\n...\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#membuat-hook-useconfirmdeletebulk","title":"Membuat hook useConfirmDeleteBulk","text":"hook/useConfirmBulkDelete<pre><code>import Swal from \"sweetalert2\";\ntype SubmitFunction = (payload: number[]) =&gt; any;\nexport function useConfirmDeleteBulk({ onSubmit }: { onSubmit: SubmitFunction }) {\nconst handleDeleteBulk = (payload: number[]) =&gt; {\nconst swalWithBootstrapButtons = Swal.mixin({\ncustomClass: {\nconfirmButton: \"btn btn-success\",\ncancelButton: \"btn btn-danger\",\n},\nbuttonsStyling: true,\n});\nswalWithBootstrapButtons\n.fire({\ntitle: \"Apakah Yakin?\",\ntext: \"Data yang terhapus tidak bisa dikembalikan\",\nicon: \"warning\",\nshowCancelButton: true,\nconfirmButtonText: \"Hapus\",\nconfirmButtonColor: \"red\",\ncancelButtonText: \"Batal\",\nreverseButtons: true,\n})\n.then(async (result) =&gt; {\nif (result.isConfirmed) {\nawait onSubmit(payload);\n}\n});\n};\nreturn handleDeleteBulk;\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#membuat-fitur-delete-bulk","title":"Membuat fitur delete bulk","text":"<p>app/book/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { Drawer } from \"@/components/Drawer\";\nimport Filter from \"./module/Filter\";\nimport { useDisclosure, useConfirmDelete, useConfirmDeleteBulk } from \"@/hook\";\nimport { useRouter } from \"next/navigation\";\nimport { DeleteButton, EditButton } from \"@/components/ButtonAction\";\nimport { useMemo, useState } from \"react\";\nconst Book = () =&gt; {\nconst { useBookList, useDeleteBook, useDeleteBulkBook } = useBookModule();\nconst [deletePayload, setDeletePayload] = useState&lt;number[]&gt;([]);\nconst { mutate, isLoading } = useDeleteBook();\nconst { mutate: mutateDeleteBulk, isLoading: isLoadingDeleteBulk } =\nuseDeleteBulkBook();\nconst router = useRouter();\nconst handleDelete = useConfirmDelete({\nonSubmit: (id) =&gt; {\nmutate(id);\n},\n});\nconst handleDeleteBulk = useConfirmDeleteBulk({\nonSubmit: (payload) =&gt; {\nconsole.log(\"payload\", payload);\nmutateDeleteBulk({ data: payload }, {\nonSuccess : ()=&gt; {\nsetDeletePayload([])\n}\n});\n},\n});\nconst {\ndata,\nisFetching,\nisError,\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\n} = useBookList();\nconst checked = useMemo(() =&gt; {\nif (!data) {\nreturn { isAllCheced: false };\n}\nconst isAllChecked = data.data.every((n) =&gt; deletePayload.includes(n.id));\nreturn { isAllCheced: isAllChecked };\n}, [deletePayload, data]);\nconst { isOpen, onOpen, onClose } = useDisclosure();\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\" py-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;div&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={() =&gt; {\nhandleDeleteBulk(deletePayload);\n}}\nisLoading={isLoadingDeleteBulk}\ncolorSchema=\"red\"\nisDisabled={deletePayload.length === 0}\ntitle=\"Hapus \"\n/&gt;\n&lt;/div&gt;\n&lt;div className=\"space-x-5\"&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah\");\n}}\nwidth=\"sm\"\ncolorSchema=\"red\"\ntitle=\"tambah\"\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah-bulk\");\n}}\nwidth=\"sm\"\ncolorSchema=\"green\"\ntitle=\"tambah bulk\"\n/&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;section className=\"h-full w-full mt-5 \"&gt;\n{JSON.stringify(deletePayload)}\n&lt;Table\nisFetching={isFetching}\nisEmpty={data?.data?.length === 0}\nisError={isError}\n&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\nchecked={checked.isAllCheced}\nonChange={() =&gt; {\nif (checked.isAllCheced) {\nsetDeletePayload([]);\n} else {\nsetDeletePayload((state) =&gt; {\nif (!data) {\nreturn [];\n}\nconst selected: number[] = Array.from(\nnew Set([\n...state,\n...data?.data?.map((n) =&gt; Number(n.id)),\n])\n);\nreturn [...selected];\n});\n}\n}}\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;No&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Title&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Author&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Year&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Created At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Updated At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Aksi&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n{data &amp;&amp;\ndata.data.map((item, index) =&gt; (\n&lt;Tr key={index}&gt;\n&lt;Td&gt;\n&lt;input\nchecked={deletePayload.includes(item.id)}\nonChange={(e) =&gt; {\nif (e.target.checked) {\nsetDeletePayload((state) =&gt; [...state, item.id]);\n} else {\nconst filtered = deletePayload.filter(\n(n) =&gt; n !== item.id\n);\nsetDeletePayload(filtered);\n}\n}}\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/Td&gt;\n&lt;Td&gt;{(params.page - 1) * params.pageSize + index + 1}&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.title}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.author}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.year}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.created_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.updated_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span className=\"flex items-center space-x-2\"&gt;\n&lt;DeleteButton\nisLoading={isLoading}\nonClick={() =&gt; {\nhandleDelete(item.id || 0);\n}}\n/&gt;\n&lt;EditButton\nonClick={() =&gt; {\nrouter.push(`book/${item.id}/edit`);\n}}\n/&gt;\n&lt;/span&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n))}\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;Pagination\npage={params.page}\npageSize={params.pageSize}\nhandlePageSize={handlePageSize}\nhandlePage={handlePage}\npagination={data?.pagination}\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre> </p>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#2-refactory-kode","title":"2. refactory kode","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#refactor-useconfirbulkdelete","title":"Refactor useConfirBulkDelete","text":"hook/useConfirmBulkDelete<pre><code>import { useMemo, useState } from \"react\";\nimport Swal from \"sweetalert2\";\ntype SubmitFunction = (payload: number[]) =&gt; any;\ntype Data = {\ndata: {\nid: number;\n}[];\n};\nexport function useConfirmDeleteBulk({\nonSubmit,\ndata,\n}: {\nonSubmit: SubmitFunction;\ndata: Data | undefined;\n}) {\nconst [deletePayload, setDeletePayload] = useState&lt;number[]&gt;([]);\nconst checked = useMemo(() =&gt; {\nif (!data) {\nreturn { isAllCheced: false };\n}\nconst isAllChecked = data.data.every((n) =&gt; deletePayload.includes(n.id));\nreturn { isAllCheced: isAllChecked };\n}, [deletePayload, data]);\nconst handleDeleteBulk = (payload: number[]) =&gt; {\nconst swalWithBootstrapButtons = Swal.mixin({\ncustomClass: {\nconfirmButton: \"btn btn-success\",\ncancelButton: \"btn btn-danger\",\n},\nbuttonsStyling: true,\n});\nswalWithBootstrapButtons\n.fire({\ntitle: \"Apakah Yakin?\",\ntext: \"Data yang terhapus tidak bisa dikembalikan\",\nicon: \"warning\",\nshowCancelButton: true,\nconfirmButtonText: \"Hapus\",\nconfirmButtonColor: \"red\",\ncancelButtonText: \"Batal\",\nreverseButtons: true,\n})\n.then(async (result) =&gt; {\nif (result.isConfirmed) {\nawait onSubmit(payload);\n}\n});\n};\nreturn {handleDeleteBulk, deletePayload, setDeletePayload, checked}\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/7.deletebulk/#refactor-halaman-list-book","title":"Refactor halaman list book","text":"book/page.tsx<pre><code>\"use client\";\nimport Button from \"@/components/Button\";\nimport { Pagination } from \"../../components/Pagination\";\nimport { Table, Th, Thead, Tr, Tbody, Td } from \"../../components/Table\";\nimport useBookModule from \"./lib\";\nimport { Drawer } from \"@/components/Drawer\";\nimport Filter from \"./module/Filter\";\nimport { useDisclosure, useConfirmDelete, useConfirmDeleteBulk } from \"@/hook\";\nimport { useRouter } from \"next/navigation\";\nimport { DeleteButton, EditButton } from \"@/components/ButtonAction\";\nimport { useMemo, useState } from \"react\";\nconst Book = () =&gt; {\nconst { useBookList, useDeleteBook, useDeleteBulkBook } = useBookModule();\nconst { mutate, isLoading } = useDeleteBook();\nconst { mutate: mutateDeleteBulk, isLoading: isLoadingDeleteBulk } =\nuseDeleteBulkBook();\nconst router = useRouter();\nconst handleDelete = useConfirmDelete({\nonSubmit: (id) =&gt; {\nmutate(id);\n},\n});\nconst {\ndata,\nisFetching,\nisError,\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\n} = useBookList();\nconst { handleDeleteBulk, deletePayload, setDeletePayload, checked } =\nuseConfirmDeleteBulk({\ndata: data,\nonSubmit: (payload) =&gt; {\nmutateDeleteBulk(\n{ data: payload },\n{\nonSuccess: () =&gt; {\nsetDeletePayload([]);\n},\n}\n);\n},\n});\nconst { isOpen, onOpen, onClose } = useDisclosure();\nreturn (\n&lt;&gt;\n&lt;Drawer\nonClose={onClose}\nonClear={handleClear}\nonSubmit={handleFilter}\ntitle=\"Filter Buku\"\nisOpen={isOpen}\n&gt;\n&lt;Filter params={params} setParams={setParams} /&gt;\n&lt;/Drawer&gt;\n&lt;section className=\" py-10 overflow-auto \"&gt;\n&lt;section className=\"flex items-center justify-between \"&gt;\n&lt;div&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={onOpen}\ncolorSchema=\"blue\"\ntitle=\"Filter\"\n/&gt;\n&lt;Button\nwidth=\"sm\"\nonClick={() =&gt; {\nhandleDeleteBulk(deletePayload);\n}}\nisLoading={isLoadingDeleteBulk}\ncolorSchema=\"red\"\nisDisabled={deletePayload.length === 0}\ntitle=\"Hapus \"\n/&gt;\n&lt;/div&gt;\n&lt;div className=\"space-x-5\"&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah\");\n}}\nwidth=\"sm\"\ncolorSchema=\"red\"\ntitle=\"tambah\"\n/&gt;\n&lt;Button\nonClick={() =&gt; {\nrouter.push(\"/book/tambah-bulk\");\n}}\nwidth=\"sm\"\ncolorSchema=\"green\"\ntitle=\"tambah bulk\"\n/&gt;\n&lt;/div&gt;\n&lt;/section&gt;\n&lt;section className=\"h-full w-full mt-5 \"&gt;\n{JSON.stringify(deletePayload)}\n&lt;Table\nisFetching={isFetching}\nisEmpty={data?.data?.length === 0}\nisError={isError}\n&gt;\n&lt;Thead&gt;\n&lt;Tr&gt;\n&lt;Th scope=\"col\"&gt;\n&lt;div className=\"flex items-center gap-x-3\"&gt;\n&lt;input\nchecked={checked.isAllCheced}\nonChange={() =&gt; {\nif (checked.isAllCheced) {\nsetDeletePayload([]);\n} else {\nsetDeletePayload((state) =&gt; {\nif (!data) {\nreturn [];\n}\nconst selected: number[] = Array.from(\nnew Set([\n...state,\n...data?.data?.map((n) =&gt; Number(n.id)),\n])\n);\nreturn [...selected];\n});\n}\n}}\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/div&gt;\n&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;No&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Title&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Author&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Year&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Created At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Updated At&lt;/Th&gt;\n&lt;Th scope=\"col\"&gt;Aksi&lt;/Th&gt;\n&lt;/Tr&gt;\n&lt;/Thead&gt;\n&lt;Tbody&gt;\n{data &amp;&amp;\ndata.data.map((item, index) =&gt; (\n&lt;Tr key={index}&gt;\n&lt;Td&gt;\n&lt;input\nchecked={deletePayload.includes(item.id)}\nonChange={(e) =&gt; {\nif (e.target.checked) {\nsetDeletePayload((state) =&gt; [...state, item.id]);\n} else {\nconst filtered = deletePayload.filter(\n(n) =&gt; n !== item.id\n);\nsetDeletePayload(filtered);\n}\n}}\ntype=\"checkbox\"\nclassName=\"text-blue-500 border-gray-300 rounded dark:bg-gray-900 dark:ring-offset-gray-900 dark:border-gray-700\"\n/&gt;\n&lt;/Td&gt;\n&lt;Td&gt;{(params.page - 1) * params.pageSize + index + 1}&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.title}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.author}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.year}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.created_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span&gt;{item.updated_at}&lt;/span&gt;\n&lt;/Td&gt;\n&lt;Td&gt;\n&lt;span className=\"flex items-center space-x-2\"&gt;\n&lt;DeleteButton\nisLoading={isLoading}\nonClick={() =&gt; {\nhandleDelete(item.id || 0);\n}}\n/&gt;\n&lt;EditButton\nonClick={() =&gt; {\nrouter.push(`book/${item.id}/edit`);\n}}\n/&gt;\n&lt;/span&gt;\n&lt;/Td&gt;\n&lt;/Tr&gt;\n))}\n&lt;/Tbody&gt;\n&lt;/Table&gt;\n&lt;Pagination\npage={params.page}\npageSize={params.pageSize}\nhandlePageSize={handlePageSize}\nhandlePage={handlePage}\npagination={data?.pagination}\n/&gt;\n&lt;/section&gt;\n&lt;/section&gt;\n&lt;/&gt;\n);\n};\nexport default Book;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/8.%20toast/","title":"H. Implementasi useToast","text":""},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/8.%20toast/#1-membuat-hook-usetoast","title":"1. Membuat hook useToast","text":"hook/useToast<pre><code>import Swal from \"sweetalert2\";\nexport const useToast = () =&gt; {\nconst toastSuccess = (message: string) =&gt; {\nSwal.fire({\nposition: \"top\",\nicon: \"success\",\ntitle: message,\nshowConfirmButton: false,\ntimer: 1000,\n});\n};\nconst toastWarning = (message: string) =&gt; {\nSwal.fire({\nposition: \"top\",\nicon: \"warning\",\ntitle: message,\nshowConfirmButton: false,\ntimer: 1500,\n});\n};\nconst toastError = () =&gt; {\nSwal.fire({\nposition: \"top\",\nicon: \"warning\",\ntitle: \"Ada Kesalahan\",\nshowConfirmButton: false,\ntimer: 1500,\n});\n};\nreturn { toastError, toastWarning, toastSuccess };\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/5.%20Integrasi%20API/8.%20toast/#2-menggunakan-usetoast-pada-service","title":"2. Menggunakan useToast pada Service","text":"app/book/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { useToast } from \"@/hook\";\nimport {\nBookCreateArrayPayload,\nBookCreatePayload,\nBookDeleteArrayPayload,\nBookDetail,\nBookListFilter,\nBookListResponse,\nBookUpdatePayload,\n} from \"../interface\";\nimport { usePagination } from \"@/hook/usePagination\";\nconst useBookModule = () =&gt; {\nconst queryClient = useQueryClient();\nconst { toastError, toastSuccess, toastWarning } = useToast();\nconst defaultParams: BookListFilter = {\ntitle: \"\",\nauthor: \"\",\nfrom_year: \"\",\nto_year: \"\",\npage: 1,\npageSize: 10,\n};\nconst getBookList = async (\nparams: BookListFilter\n): Promise&lt;BookListResponse&gt; =&gt; {\nreturn axiosClient.get(\"/book/list\", { params }).then((res) =&gt; res.data);\n};\nconst useBookList = () =&gt; {\nconst {\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\nfilterParams,\n} = usePagination(defaultParams);\nconst { data, isFetching, isLoading, isError } = useQuery(\n[\"/book/list\", [filterParams]],\n() =&gt; getBookList(filterParams),\n{\nkeepPreviousData: true,\nselect: (response) =&gt; response,\n}\n);\nreturn {\ndata,\nisFetching,\nisLoading,\nisError,\nparams,\nsetParams,\nhandlePageSize,\nhandlePage,\nhandleFilter,\nhandleClear,\n};\n};\nconst useCreateBook = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookCreatePayload) =&gt; {\nreturn axiosClient.post(\"/book/create\", payload);\n},\n{\nonSuccess: (response) =&gt; {\ntoastSuccess(response.data.message);\n},\nonError: (error) =&gt; {\ntoastError();\n},\n}\n);\nreturn { mutate, isLoading };\n};\nconst getDetailBook = async (id: string): Promise&lt;BookDetail&gt; =&gt; {\nreturn axiosClient.get(`/book/detail/${id}`).then((res) =&gt; res.data.data);\n};\nconst useDetailBook = (id: string) =&gt; {\nconst { data, isLoading, isFetching } = useQuery(\n[\"/book/detail\", { id }],\n() =&gt; getDetailBook(id),\n{\nselect: (response) =&gt; response,\n}\n);\nreturn { data, isFetching, isLoading };\n};\nconst useUpdateBook = (id: string) =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookUpdatePayload) =&gt; {\nreturn axiosClient.put(`/book/update/${id}`, payload);\n},\n{\nonSuccess: (response) =&gt; {\ntoastSuccess(response.data.message);\nqueryClient.invalidateQueries([\"/book/detail\"]);\n},\nonError: (error) =&gt; {\ntoastError();\n},\n}\n);\nreturn { mutate, isLoading };\n};\nconst useDeleteBook = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(id: number) =&gt; {\nreturn axiosClient.delete(`/book/delete/${id}`);\n},\n{\nonSuccess: (response) =&gt; {\ntoastSuccess(response.data.message);\nqueryClient.invalidateQueries([\"/book/list\"]);\n},\nonError: (error: any) =&gt; {\nif (error.response.status == 422) {\ntoastWarning(error.response.data.message);\n} else {\ntoastError();\n}\n},\n}\n);\nreturn { mutate, isLoading };\n};\nconst useCreateBulkBook = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookCreateArrayPayload) =&gt; {\nreturn axiosClient.post(\"/book/create/bulk\", payload);\n},\n{\nonSuccess: (response) =&gt; {\ntoastSuccess(response.data.message);\n},\nonError: (error) =&gt; {\ntoastError();\n},\n}\n);\nreturn { mutate, isLoading };\n};\nconst useDeleteBulkBook = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: BookDeleteArrayPayload) =&gt; {\nreturn axiosClient.post(\"/book/delete/bulk\", payload);\n},\n{\nonSuccess: (response) =&gt; {\ntoastSuccess(response.data.message);\nqueryClient.invalidateQueries([\"/book/list\"]);\n},\nonError: (error) =&gt; {\ntoastError();\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn {\nuseBookList,\nuseCreateBook,\nuseDetailBook,\nuseUpdateBook,\nuseDeleteBook,\nuseCreateBulkBook,\nuseDeleteBulkBook,\n};\n};\nexport default useBookModule;\n</code></pre> <p>Jalankan pada browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/A.Penjelasan/","title":"A. Penjelasan Projek","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/1.%20Register/","title":"1. Register","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/1.%20Register/#membuat-routing-register-dan-login","title":"Membuat Routing Register dan Login","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/1.%20Register/#membuat-interface-auth","title":"Membuat Interface Auth","text":"request endpoint register<pre><code>http://localhost:5002/auth/register\n</code></pre> payload endpoint register<pre><code>{\n\"nama\" : \"ihsan santana w\",\n\"email\" :\"ihsanabuhanifah@gmail.com\",\n\"password\" : \"12345678\"\n}\n</code></pre> response endpoint register<pre><code>{\n\"status\": \"Success\",\n\"message\": \"Register Berhasil\",\n\"data\": {}\n}\n</code></pre> app/auth/interface/index.ts<pre><code>interface User {\nid?: number;\nnama: string;\nemail: string;\npassword: string;\n}\nexport interface RegisterResponse extends BaseResponseSuccess {}\nexport interface RegisterPayload\nextends Pick&lt;User, \"nama\" | \"email\" | \"password\"&gt; {}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/1.%20Register/#membuat-service-register","title":"Membuat Service Register","text":"app/auth/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hook\";\nimport {\nLoginPayload,\nLoginResponse,\nRegisterPayload,\nRegisterResponse,\n} from \"../interface\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nconst useAuthModule = () =&gt; {\nconst { toastError, toastSuccess, toastWarning } = useToast();\nconst router = useRouter();\nconst register = async (\npayload: RegisterPayload\n): Promise&lt;RegisterResponse&gt; =&gt; {\nreturn axiosClient.post(\"/auth/register\", payload).then((res) =&gt; res.data);\n};\nconst useRegister = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: RegisterPayload) =&gt; register(payload),\n{\nonSuccess: (response) =&gt; {\ntoastSuccess(response.message);\nrouter.push(\"/auth/login\");\n},\nonError: (error) =&gt; {\ntoastError();\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn { useRegister };\n};\nexport default useAuthModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/1.%20Register/#membuat-halaman-register-dan-integrasi-dengan-service","title":"Membuat Halaman Register dan Integrasi dengan Service","text":"app/auth/register/page.tsx<pre><code>\"use client\";\nimport { useFormik, Form, FormikProvider, getIn } from \"formik\";\nimport Link from \"next/link\";\nimport * as yup from \"yup\";\nimport { RegisterPayload } from \"../interface\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Button from \"@/components/Button\";\nimport useAuthModule from \"../lib\";\nexport const registerSchema = yup.object().shape({\nnama: yup.string().nullable().default(\"\").required(\"Wajib isi\"),\nemail: yup\n.string()\n.nullable()\n.default(\"\")\n.email(\"Gunakan format email\")\n.required(\"Wajib isi\"),\npassword: yup\n.string()\n.nullable()\n.default(\"\")\n.required(\"Wajib isi\")\n.min(8, \"Minimal 8 karakater\"),\n});\nconst Register = () =&gt; {\nconst { useRegister } = useAuthModule();\nconst { mutate, isLoading } = useRegister();\nconst formik = useFormik&lt;RegisterPayload&gt;({\ninitialValues: registerSchema.getDefault(),\nvalidationSchema: registerSchema,\nenableReinitialize: true,\nonSubmit: (payload) =&gt; {\nmutate(payload);\n},\n});\nconst {\nhandleChange,\nhandleSubmit,\nhandleBlur,\nvalues,\nerrors,\nresetForm,\nsetValues,\n} = formik;\nreturn (\n&lt;section&gt;\n&lt;div className=\"flex items-center justify-center w-full\"&gt;\n&lt;h1 className=\"text-3xl text-blue-400\"&gt;Register&lt;/h1&gt;\n&lt;/div&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"nama\" title=\"Nama\" /&gt;\n&lt;InputText\nvalue={values.nama}\nplaceholder=\"ihsan\"\nid=\"nama\"\nname=\"nama\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={getIn(errors, \"nama\")}\nmessageError={getIn(errors, \"nama\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"email\" title=\"Email\" /&gt;\n&lt;InputText\nvalue={values.email}\nplaceholder=\"exampel@email.com\"\nid=\"email\"\nname=\"email\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={getIn(errors, \"email\")}\nmessageError={getIn(errors, \"email\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"password\" title=\"Password\" /&gt;\n&lt;InputText\nvalue={values.password}\nplaceholder=\"**********\"\nid=\"password\"\nname=\"password\"\ntype=\"password\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={getIn(errors, \"password\")}\nmessageError={getIn(errors, \"password\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"lg\"\ntitle=\"Register\"\ncolorSchema=\"blue\"\nisLoading={isLoading}\nisDisabled={isLoading}\n/&gt;\n&lt;Link href={'login'}&gt;\n&lt;Button title=\"HalamanLogin\" colorSchema=\"green\"/&gt;\n&lt;/Link&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n);\n};\nexport default Register;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/1.%20Register/#jalankan-pada-browser","title":"Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/2.login/","title":"2. Login","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/2.login/#integrasi-login","title":"Integrasi Login","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/2.login/#membuat-interface-login","title":"Membuat Interface Login","text":"request endpoint login<pre><code>http://localhost:5002/auth/login\n</code></pre> payload endpoint login<pre><code>{\n\"email\" :\"ihsanabuhanifah@gmail.com\",\n\"password\" : \"12345678\"\n}\n</code></pre> response endpoint login<pre><code>{\n\"status\": \"Success\",\n\"message\": \"Login Success\",\n\"data\": {\n\"id\": 1,\n\"nama\": \"ihsan santana w\",\n\"email\": \"ihsanabuhanifah@gmail.com\",\n\"password\": \"$2b$12$otdHLxtVDZq05dQAVccfpOH20OTJ57cg7kuAuzWkh3gWuaQrbA4YG\",\n\"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtYSI6Imloc2FuIHNhbnRhbmEgdyIsImVtYWlsIjoiaWhzYW5hYnVoYW5pZmFoQGdtYWlsLmNvbSIsImlhdCI6MTY5NTUyOTUwMSwiZXhwIjoxNjk2MTM0MzAxfQ.IPBj5X78Q9fC3RWuHpAaq1fZzcvgaPv18ztmQs5ObaI\",\n\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtYSI6Imloc2FuIHNhbnRhbmEgdyIsImVtYWlsIjoiaWhzYW5hYnVoYW5pZmFoQGdtYWlsLmNvbSIsImlhdCI6MTY5NTUyOTUwMSwiZXhwIjoxNjk1NjE1OTAxfQ.g6aMvyav9VAJ8mKY4drSfrn0pI1toBrF1TBvfq9YVCg\"\n}\n}\n</code></pre> app/auth/interface/index.ts<pre><code>import { BaseResponseSuccess } from \"@/lib/axiosClient\";\ninterface User {\nid?: number;\nnama: string;\nemail: string;\npassword: string;\nrefresh_token: string;\naccess_token: string;\n}\nexport interface LoginPayload extends Pick&lt;User, \"email\" | \"password\"&gt; {}\nexport interface RegisterPayload\nextends Pick&lt;User, \"nama\" | \"email\" | \"password\"&gt; {}\nexport interface RegisterResponse extends BaseResponseSuccess {}\nexport interface LoginResponse extends BaseResponseSuccess {\ndata: User;\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/2.login/#membuat-service-login","title":"Membuat Service Login","text":"app/auth/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hook\";\nimport {\nLoginPayload,\nLoginResponse,\nRegisterPayload,\nRegisterResponse,\n} from \"../interface\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { useRouter } from \"next/navigation\";\nconst useAuthModule = () =&gt; {\nconst { toastError, toastSuccess, toastWarning } = useToast();\nconst router = useRouter();\n...\nconst login = async (payload: LoginPayload): Promise&lt;LoginResponse&gt; =&gt; {\nreturn axiosClient.post(\"/auth/login\", payload).then((res) =&gt; res.data);\n};\nconst useLogin = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: LoginPayload) =&gt; login(payload),\n{\nonSuccess: async (response) =&gt; {\ntoastSuccess(response.message);\nrouter.push(\"/admin\");\n},\nonError: (error: any) =&gt; {\nif (error.response.status == 422) {\ntoastWarning(error.response.data.message);\n} else {\ntoastError();\n}\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn { useRegister };\n};\nexport default useAuthModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/2.login/#membuat-halaman-login-dan-integrasi-dengan-service","title":"Membuat Halaman Login dan Integrasi dengan Service","text":"app/auth/login/page.tsx<pre><code>\"use client\";\nimport { useFormik, Form, FormikProvider, getIn } from \"formik\";\nimport * as yup from \"yup\";\nimport { LoginPayload } from \"../interface\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Button from \"@/components/Button\";\nimport useAuthModule from \"../lib\";\nimport Link from \"next/link\";\nexport const registerSchema = yup.object().shape({\nemail: yup\n.string()\n.nullable()\n.default(\"\")\n.email(\"Gunakan format email\")\n.required(\"Wajib isi\"),\npassword: yup\n.string()\n.nullable()\n.default(\"\")\n.required(\"Wajib isi\")\n.min(8, \"Minimal 8 karakater\"),\n});\nconst Login = () =&gt; {\nconst { useLogin } = useAuthModule();\nconst { mutate, isLoading } = useLogin();\nconst formik = useFormik&lt;LoginPayload&gt;({\ninitialValues: registerSchema.getDefault(),\nvalidationSchema: registerSchema,\nenableReinitialize: true,\nonSubmit: (payload) =&gt; {\nmutate(payload);\n},\n});\nconst { handleChange, handleSubmit, handleBlur, values, errors } = formik;\nreturn (\n&lt;section&gt;\n&lt;div className=\"flex items-center justify-center w-full\"&gt;\n&lt;h1 className=\"text-3xl text-blue-400\"&gt;Login&lt;/h1&gt;\n&lt;/div&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"email\" title=\"Email\" /&gt;\n&lt;InputText\nvalue={values.email}\nplaceholder=\"exampel@email.com\"\nid=\"email\"\nname=\"email\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={getIn(errors, \"email\")}\nmessageError={getIn(errors, \"email\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"password\" title=\"Password\" /&gt;\n&lt;InputText\nvalue={values.password}\nplaceholder=\"**********\"\nid=\"password\"\nname=\"password\"\ntype=\"password\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={getIn(errors, \"password\")}\nmessageError={getIn(errors, \"password\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"lg\"\ntitle=\"Login\"\ncolorSchema=\"blue\"\nisLoading={isLoading}\nisDisabled={isLoading}\n/&gt;\n&lt;Link href={\"register\"}&gt;\n&lt;Button title=\"Halaman Register\" colorSchema=\"green\" /&gt;\n&lt;/Link&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n);\n};\nexport default Login;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/2.login/#jalankan-pada-browser","title":"Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/","title":"3. NextAuth","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#apa-itu-nextauth","title":"Apa itu NextAuth","text":"<p>Dokumentasi : https://next-auth.js.org/</p>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#kenapa-menggunakan-nextauth","title":"Kenapa Menggunakan NextAuth?","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#implementasi-nextauth","title":"Implementasi NextAuth","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#instalasi-nextauth","title":"Instalasi NextAuth","text":"terminal<pre><code>npm install next-auth\n</code></pre> package.json<pre><code>{\n\"name\": \"frontend-nextjs\",\n\"version\": \"0.1.0\",\n\"private\": true,\n\"scripts\": {\n\"dev\": \"next dev -p 3010\",\n\"build\": \"next build\",\n\"start\": \"next start\",\n\"lint\": \"next lint\"\n},\n\"dependencies\": {\n\"@heroicons/react\": \"^2.0.18\",\n\"@react-spring/web\": \"^9.7.3\",\n\"@tanstack/react-query\": \"^4.33.0\",\n\"@tanstack/react-query-devtools\": \"^4.33.0\",\n\"@types/node\": \"20.4.5\",\n\"@types/react\": \"18.2.17\",\n\"@types/react-dom\": \"18.2.7\",\n\"autoprefixer\": \"10.4.14\",\n\"axios\": \"^1.5.0\",\n\"clsx\": \"^2.0.0\",\n\"eslint\": \"8.46.0\",\n\"eslint-config-next\": \"13.4.12\",\n\"formik\": \"^2.4.3\",\n\"next\": \"13.4.12\",\n\"next-auth\": \"^4.23.1\",\n\"postcss\": \"8.4.27\",\n\"react\": \"18.2.0\",\n\"react-dom\": \"18.2.0\",\n\"react-spinners\": \"^0.13.8\",\n\"sweetalert2\": \"^11.7.27\",\n\"tailwindcss\": \"3.3.3\",\n\"typescript\": \"5.1.6\",\n\"yup\": \"^1.2.0\"\n}\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#membuat-api-route","title":"Membuat API Route","text":"pages/api/auth/[...nextauth].ts<pre><code>import NextAuth, { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nconst authOptions: NextAuthOptions = {\nproviders: [\n// ...add more providers here\nCredentialsProvider({\ntype: \"credentials\",\ncredentials: {},\nauthorize(credentials: any, req) {\nreturn {\n...credentials,\n};\n},\n}),\n],\n};\nexport default NextAuth(authOptions);\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#membuat-komponen-nextauthprovider","title":"Membuat Komponen NextAuthProvider","text":"components/NextAuthProvider.tsx<pre><code>\"use client\";\nimport { SessionProvider } from \"next-auth/react\";\nimport React, { ReactNode } from \"react\";\nimport { Session } from \"next-auth\";\ninterface NextAuthProps {\nchildren: ReactNode;\nsession: Session | null | undefined;\n}\nconst NextAuthProvider: React.FC&lt;NextAuthProps&gt; = ({ children, session }) =&gt; {\nreturn &lt;SessionProvider session={session}&gt;{children}&lt;/SessionProvider&gt;;\n};\nexport default NextAuthProvider;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#impelentasi-nextauthprovider-pada-rootlayout","title":"Impelentasi NextAuthProvider pada RootLayout","text":"app/layout.tsx<pre><code>import \"./globals.css\";\nimport React, { ReactNode } from \"react\";\nimport type { Metadata } from \"next\";\nimport ReactQuery from \"../components/ReactQuery\";\nimport NextAuthProvider from \"@/components/NextAuthProvider\";\nimport { Session } from \"next-auth\";\ninterface NextAuthProps {\nchildren: ReactNode;\nsession: Session | null | undefined;\n}\nexport const metadata: Metadata = {\ntitle: \"Create Next App\",\ndescription: \"Generated by create next app\",\n};\nexport default function RootLayout({ children, session }: NextAuthProps) {\nreturn (\n&lt;html lang=\"en\"&gt;\n&lt;body className={\"px-5 w-screen h-screen overflow-hidden\"}&gt;\n&lt;NextAuthProvider session={session}&gt;\n&lt;ReactQuery&gt;{children}&lt;/ReactQuery&gt;\n&lt;/NextAuthProvider&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n);\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#lihat-session-pada-komponen-login","title":"Lihat Session pada Komponen Login","text":"app/auth/login/page/.tsx<pre><code>\"use client\";\nimport { useFormik, Form, FormikProvider, getIn } from \"formik\";\nimport * as yup from \"yup\";\nimport { LoginPayload } from \"../interface\";\nimport InputText from \"@/components/InputText\";\nimport Label from \"@/components/Label\";\nimport Button from \"@/components/Button\";\nimport useAuthModule from \"../lib\";\nimport Link from \"next/link\";\nimport { useSession } from \"next-auth/react\";\nexport const registerSchema = yup.object().shape({\nemail: yup\n.string()\n.nullable()\n.default(\"\")\n.email(\"Gunakan format email\")\n.required(\"Wajib isi\"),\npassword: yup\n.string()\n.nullable()\n.default(\"\")\n.required(\"Wajib isi\")\n.min(8, \"Minimal 8 karakater\"),\n});\nconst Login = () =&gt; {\nconst { data: session, status } = useSession();\nconsole.log('session', session)\nconsole.log('status', status)\nconst { useLogin } = useAuthModule();\nconst { mutate, isLoading } = useLogin();\nconst formik = useFormik&lt;LoginPayload&gt;({\ninitialValues: registerSchema.getDefault(),\nvalidationSchema: registerSchema,\nenableReinitialize: true,\nonSubmit: (payload) =&gt; {\nmutate(payload);\n},\n});\nconst { handleChange, handleSubmit, handleBlur, values, errors } = formik;\nreturn (\n&lt;section&gt;\n&lt;div className=\"flex items-center justify-center w-full\"&gt;\n&lt;h1 className=\"text-3xl text-blue-400\"&gt;Login&lt;/h1&gt;\n&lt;/div&gt;\n&lt;FormikProvider value={formik}&gt;\n&lt;Form className=\"space-y-5\" onSubmit={handleSubmit}&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"email\" title=\"Email\" /&gt;\n&lt;InputText\nvalue={values.email}\nplaceholder=\"exampel@email.com\"\nid=\"email\"\nname=\"email\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={getIn(errors, \"email\")}\nmessageError={getIn(errors, \"email\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Label htmlFor=\"password\" title=\"Password\" /&gt;\n&lt;InputText\nvalue={values.password}\nplaceholder=\"**********\"\nid=\"password\"\nname=\"password\"\ntype=\"password\"\nonChange={handleChange}\nonBlur={handleBlur}\nisError={getIn(errors, \"password\")}\nmessageError={getIn(errors, \"password\")}\n/&gt;\n&lt;/section&gt;\n&lt;section&gt;\n&lt;Button\nheight=\"lg\"\ntitle=\"Login\"\ncolorSchema=\"blue\"\nisLoading={isLoading}\nisDisabled={isLoading}\n/&gt;\n&lt;Link href={\"register\"}&gt;\n&lt;Button title=\"Halaman Register\" colorSchema=\"green\" /&gt;\n&lt;/Link&gt;\n&lt;/section&gt;\n&lt;/Form&gt;\n&lt;/FormikProvider&gt;\n&lt;/section&gt;\n);\n};\nexport default Login;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#perbaharui-nextconfigts","title":"Perbaharui <code>next.config.ts</code>","text":"next.config.ts<pre><code>/** @type {import('next').NextConfig} */\nconst nextConfig = {\nreactStrictMode: true,\nexperimental: {\nappDir: true,\n},\n};\nmodule.exports = nextConfig;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#membuat-konfigurasi-global","title":"Membuat Konfigurasi global","text":".env<pre><code>NEXTAUTH_URL=http://localhost:3010\nNEXTAUTH_SECRET=dankanfklgnakgnakn\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#menyimpan-access-token-dan-refresh-token-di-nextauth-session","title":"Menyimpan Access Token dan Refresh Token di NextAuth session","text":"app/auth/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hook\";\nimport {\nLoginPayload,\nLoginResponse,\nRegisterPayload,\nRegisterResponse,\n} from \"../interface\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nconst useAuthModule = () =&gt; {\nconst { toastError, toastSuccess, toastWarning } = useToast();\nconst router = useRouter();\n...\nconst login = async (payload: LoginPayload): Promise&lt;LoginResponse&gt; =&gt; {\nreturn axiosClient.post(\"/auth/login\", payload).then((res) =&gt; res.data);\n};\nconst useLogin = () =&gt; {\nconst { mutate, isLoading } = useMutation(\n(payload: LoginPayload) =&gt; login(payload),\n{\nonSuccess: async (response) =&gt; {\ntoastSuccess(response.message);\nawait signIn(\"credentials\", {\nid: response.data.id,\nname: response.data.nama,\nemail: response.data.email,\naccessToken: response.data.access_token,\nrefreshToken: response.data.refresh_token,\nredirect: false,\n});\nrouter.push(\"/admin\");\n},\nonError: (error: any) =&gt; {\nif (error.response.status == 422) {\ntoastWarning(error.response.data.message);\n} else {\ntoastError();\n}\n},\n}\n);\nreturn { mutate, isLoading };\n};\nreturn { useRegister, useLogin };\n};\nexport default useAuthModule;\n</code></pre> pages/api/auth/[...nextauth].ts<pre><code>import NextAuth, { NextAuthOptions } from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nconst authOptions: NextAuthOptions = {\nsecret: process.env.NEXTAUTH_SECRET,\nproviders: [\nCredentialsProvider({\ntype: \"credentials\",\ncredentials: {},\nauthorize(credentials: any, req) {\nreturn {\n...credentials,\n};\n},\n}),\n],\ncallbacks: {\nasync jwt({ token, user, account, trigger, session }) {\nif (trigger === \"update\") {\nreturn { ...token, ...session.user };\n}\nreturn {\n...token,\n...user,\n};\n},\nasync session({ session, user, token }) {\nsession.user.id = Number(token.id);\nsession.user.name = token.name;\nsession.user.email = token.email;\nsession.user.accessToken = token.accessToken;\nsession.user.refreshToken = token.refreshToken;\nreturn session;\n},\n},\npages: {\nsignIn: \"/auth/login\",\nsignOut: \"/auth/login\",\nerror: \"/auth/error\",\n},\n};\nexport default NextAuth(authOptions);\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#mendefinisikan-custom-type-session","title":"Mendefinisikan custom Type session","text":"types/next-auth.d.ts<pre><code>import { Session } from \"next-auth\";\ndeclare module \"next-auth\" {\ninterface Session {\nuser: {\nid: number | undefined | null;\nemail: string | undefined | null;\nname: string | undefined | null;\naccessToken: any;\nrefreshToken: any;\ntoken : any\n};\n}\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#merubah-komponen-halaman-admin","title":"Merubah komponen halaman admin","text":"app/admin/page.tsx<pre><code>\"use client\";\nimport React from \"react\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport Button from \"@/components/Button\";\nconst Page = () =&gt; {\nconst { data: session, status } = useSession();\nreturn (\n&lt;div&gt;\nAdmin\n{JSON.stringify(session)}\n{status}\n&lt;Button\ntitle=\"Logout\"\ncolorSchema=\"red\"\nonClick={() =&gt; {\nsignOut();\n}}\n/&gt;\n&lt;/div&gt;\n);\n};\nexport default Page;\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#implementasi-middleware","title":"Implementasi Middleware","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#apa-itu-midddleware","title":"Apa itu Midddleware?","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#kenapa-menggunakan-midddleware","title":"Kenapa Menggunakan Midddleware?","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/3.NextAuth/#membuat-middleware","title":"Membuat Middleware","text":"middleware.ts<pre><code>import { withAuth } from \"next-auth/middleware\";\nexport default withAuth(\n// `withAuth` augments your `Request` with the user's token.\nfunction middleware(req) {\nconsole.log(\"token\", req.nextauth.token);\n},\n{\ncallbacks: {\nauthorized: ({ token }) =&gt; {\nif (token) return true;\nreturn false;\n},\n},\npages: {\nsignIn: \"/auth/login\",\nerror: '/api/auth/error',\n},\n}\n);\nexport const config = { matcher: [\"/admin\", \"/admin/:path*\"] };\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/4.%20jwt/","title":"4. Implementasi JWT Token","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/4.%20jwt/#implementasi-jwt-token-saat-call-ke-api","title":"Implementasi JWT Token saat Call ke API","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/4.%20jwt/#interface-profile","title":"Interface Profile","text":"auth/interface/index.ts<pre><code>import { BaseResponseSuccess } from \"@/lib/axiosClient\";\ninterface User {\nid?: number;\nnama: string;\nemail: string;\npassword: string;\nrefresh_token: string;\naccess_token: string;\navatar: string;\nrole: string;\n}\n...\nexport interface ProfileResponse extends BaseResponseSuccess {\ndata: User;\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/4.%20jwt/#membuat-service-profile","title":"Membuat Service Profile","text":"auth/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hook\";\nimport {\nLoginPayload,\nLoginResponse,\nProfileResponse,\nRegisterPayload,\nRegisterResponse,\n} from \"../interface\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nconst useAuthModule = () =&gt; {\nconst { toastError, toastSuccess, toastWarning } = useToast();\nconst router = useRouter();\n...\nconst getProfile = async (): Promise&lt;ProfileResponse&gt; =&gt; {\nreturn axiosClient.get(\"/auth/profile\").then((res) =&gt; res.data);\n};\nconst useProfile = () =&gt; {\nconst { data, isLoading, isFetching } = useQuery(\n[\"/auth/profile\"],\n() =&gt; getProfile(),\n{\nselect: (response) =&gt; response,\nstaleTime: 1000 * 60 * 60,\nrefetchInterval: 1000 * 60 * 60,\nrefetchOnWindowFocus: false,\n}\n);\nreturn { data, isFetching, isLoading };\n};\nreturn { useRegister, useLogin, useProfile };\n};\nexport default useAuthModule;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/4.%20jwt/#menggunaakan-service-profile","title":"Menggunaakan service profile","text":"admin/page.tsx<pre><code>\"use client\";\nimport React from \"react\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport Button from \"@/components/Button\";\nimport useAuthModule from \"../auth/lib\";\nconst Page = () =&gt; {\nconst {useProfile} = useAuthModule()\nconst {data:profile, isFetching} = useProfile()\nconst { data: session, status } = useSession();\nconsole.log('profile', profile)\nreturn (\n&lt;div&gt;\nAdmin\n{JSON.stringify(session)}\n{status}\n&lt;Button\ntitle=\"Logout\"\ncolorSchema=\"red\"\nonClick={() =&gt; {\nsignOut();\n}}\n/&gt;\n&lt;/div&gt;\n);\n};\nexport default Page;\n</code></pre> <p>Jalankan pada Browser</p> <p></p>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/4.%20jwt/#membuat-hook-useauthaxios","title":"Membuat hook useAuthAxios","text":"hook/useAuthAxios.ts<pre><code>import { axiosClient } from \"@/lib/axiosClient\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport { useEffect } from \"react\";\nimport { useToast } from \".\";\nconst useAxiosAuth = () =&gt; {\nconst { data: session } = useSession();\nconst { toastWarning } = useToast();\nuseEffect(() =&gt; {\nconst requestIntercept = axiosClient.interceptors.request.use(\n(config: any) =&gt; {\nconfig.headers[\n\"Authorization\"\n] = `Bearer ${session?.user?.accessToken}`;\nreturn config;\n},\n(error: any) =&gt; Promise.reject(error)\n);\nconst responseIntercept = axiosClient.interceptors.response.use(\nasync (response: any) =&gt; response,\nasync (error: any) =&gt; {\ntoastWarning(error.response.message);\nsignOut();\nwindow.location.replace(\"/auth/login\");\n}\n);\nreturn () =&gt; {\naxiosClient.interceptors.request.eject(requestIntercept);\naxiosClient.interceptors.response.eject(responseIntercept);\n};\n}, [session, toastWarning]);\nreturn axiosClient;\n};\nexport default useAxiosAuth;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/4.%20jwt/#implementasi-useauthaxios-pada-service","title":"Implementasi useAuthAxios pada service","text":"auth/lib/index.ts<pre><code>import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hook\";\nimport {\nLoginPayload,\nLoginResponse,\nProfileResponse,\nRegisterPayload,\nRegisterResponse,\n} from \"../interface\";\nimport { axiosClient } from \"@/lib/axiosClient\";\nimport { signIn } from \"next-auth/react\";\nimport { useRouter } from \"next/navigation\";\nimport useAxiosAuth from \"@/hook/useAxiosAuth\";\nimport { useSession } from \"next-auth/react\";\nconst useAuthModule = () =&gt; {\nconst { toastError, toastSuccess, toastWarning } = useToast();\nconst axiosAuthClient = useAxiosAuth()\nconst {data:session} = useSession()\nconst router = useRouter();\n...\nconst getProfile = async (): Promise&lt;ProfileResponse&gt; =&gt; {\nreturn axiosAuthClient.get(\"/auth/profile\").then((res) =&gt; res.data);\n};\nconst useProfile = () =&gt; {\nconst { data, isLoading, isFetching } = useQuery(\n[\"/auth/profile\"],\n() =&gt; getProfile(),\n{\nselect: (response) =&gt; response,\nstaleTime: 1000 * 60 * 60,\nrefetchInterval: 1000 * 60 * 60,\nrefetchOnWindowFocus: false,\nenabled : session?.user?.id !== undefined\n}\n);\nreturn { data, isFetching, isLoading };\n};\nreturn { useRegister, useLogin, useProfile };\n};\nexport default useAuthModule;\n</code></pre> <p>Jalankan pada Browser</p> <p> </p>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/5.%20RefreshToken/","title":"5. Implementasi Refresh Token","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/5.%20RefreshToken/#kenapa-harus-menggunakan-refresh-token","title":"Kenapa harus menggunakan Refresh Token","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/5.%20RefreshToken/#api-refresh-token","title":"Api Refresh Token","text":"endpoint refresh token<pre><code>http://localhost:5002/auth/refresh-token?\n</code></pre> header endpoint refresh token<pre><code>Authorization:Bearer XXX\nid: X\n</code></pre> response endpoint refresh token<pre><code>{\n\"status\": \"Success\",\n\"message\": \"Success\",\n\"data\": {\n\"id\": 1,\n\"nama\": \"ihsan santana w\",\n\"email\": \"ihsanabuhanifah@gmail.com\",\n\"password\": \"$2b$12$otdHLxtVDZq05dQAVccfpOH20OTJ57cg7kuAuzWkh3gWuaQrbA4YG\",\n\"refresh_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtYSI6Imloc2FuIHNhbnRhbmEgdyIsImVtYWlsIjoiaWhzYW5hYnVoYW5pZmFoQGdtYWlsLmNvbSIsImlhdCI6MTY5NTYwNDQwMCwiZXhwIjoxNjk2MjA5MjAwfQ.q4lzXbvXDTt-WmOru1MXDipDGsAkfELLNQC3BQLOo4U\",\n\"access_token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtYSI6Imloc2FuIHNhbnRhbmEgdyIsImVtYWlsIjoiaWhzYW5hYnVoYW5pZmFoQGdtYWlsLmNvbSIsImlhdCI6MTY5NTYwNDQwMCwiZXhwIjoxNjk1NjA0NDMwfQ.BuDhbSEIwc8zc_WUZCE2cgfwBjcRD0RfvzdxuzQ3oZY\"\n}\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/5.%20RefreshToken/#membuat-axiosclientrefresh","title":"Membuat axiosClientRefresh","text":"lib/axiosClient<pre><code>import axios, { AxiosInstance } from \"axios\";\nexport const axiosClient: AxiosInstance = axios.create({\nbaseURL: \"http://localhost:5002\",\nheaders: { \"Content-Type\": \"application/json\" },\n});\nexport const axiosClientRefresh: AxiosInstance = axios.create({\nbaseURL: \"http://localhost:5002\",\nheaders: { \"Content-Type\": \"application/json\" },\n});\nexport interface BaseResponseSuccess {\nstatus: string;\nmessage: string;\ndata: any[] | any;\n}\nexport interface BaseResponsePagination {\nstatus: string;\nmessage: string;\ndata: any[];\npagination: {\npage: number;\ntotal_page: number;\npageSize: number;\ntotal: number;\n};\n}\nexport interface BasePayloadPagination {\npage: number;\npageSize: number;\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/5.%20RefreshToken/#membuat-hook-userefreshtoken","title":"Membuat hook useRefreshToken","text":"hook/useRefeshToken.ts<pre><code>import { axiosClientRefresh } from \"@/lib/axiosClient\";\nimport { signOut, useSession } from \"next-auth/react\";\nimport { Session } from \"next-auth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \".\";\ninterface SessionUser {\nid: number;\nrefreshToken: string;\naccessToken: string;\nname: string;\nemail: string;\n}\nexport const useRefreshToken = () =&gt; {\nconst { data: session, update } = useSession();\nconst { toastWarning } = useToast();\nuseEffect(() =&gt; {\nconst requestIntercept = axiosClientRefresh.interceptors.request.use(\n(config: any) =&gt; {\nconfig.headers[\n\"Authorization\"\n] = `Bearer ${session?.user?.refreshToken}`;\nconfig.headers.id = session?.user?.id;\nreturn config;\n},\n(error: any) =&gt; Promise.reject(error)\n);\nconst responseIntercept = axiosClientRefresh.interceptors.response.use(\nasync (response: any) =&gt; response,\nasync (error: any) =&gt; {\ntoastWarning(error.response.message);\n// signOut();\n// window.location.replace(\"/auth/login\");\n}\n);\nreturn () =&gt; {\naxiosClientRefresh.interceptors.request.eject(requestIntercept);\naxiosClientRefresh.interceptors.response.eject(responseIntercept);\n};\n}, [session, toastWarning]);\nconst refreshToken = async () =&gt; {\nif (!session) return;\ntry {\nconst { user } = session as Session &amp; { user: SessionUser };\nconst res = await axiosClientRefresh.get(\"/auth/refresh-token\");\nconsole.log('res', res.data)\nawait update({\n...session,\nuser: {\n...user,\naccessToken: res.data.data.access_token,\nrefreshToken: res.data.data.refresh_token,\n},\n});\nreturn true;\n} catch {\nreturn false;\n}\n};\nreturn { refreshToken };\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/5.%20RefreshToken/#implementasi-pada-useaxiosauth","title":"Implementasi pada useAxiosAuth","text":"hook/useAxiosAuth.ts<pre><code>import { axiosClient } from \"@/lib/axiosClient\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport { useEffect } from \"react\";\nimport { useRefreshToken } from \"./useRefeshToken\";\nconst useAxiosAuth = () =&gt; {\nconst { data: session } = useSession();\nconst { refreshToken } = useRefreshToken();\nuseEffect(() =&gt; {\nconst requestIntercept = axiosClient.interceptors.request.use(\n(config: any) =&gt; {\nconfig.headers[\n\"Authorization\"\n] = `Bearer ${session?.user?.accessToken}`;\nreturn config;\n},\n(error: any) =&gt; Promise.reject(error)\n);\nconst responseIntercept = axiosClient.interceptors.response.use(\nasync (response: any) =&gt; response,\nasync (error: any) =&gt; {\nconst prevRequest = error?.config;\nif (401 === error?.response?.status &amp;&amp; !prevRequest?.sent) {\nprevRequest.sent = true;\ntry {\nawait refreshToken();\nprevRequest.headers[\n\"Authorization\"\n] = `Bearer ${session?.user?.accessToken}`;\nreturn axiosClient(prevRequest);\n} catch (err) {\nsignOut();\nwindow.location.replace(\"/auth/login\");\n}\n} else {\nreturn Promise.reject(error);\n}\n}\n);\nreturn () =&gt; {\naxiosClient.interceptors.request.eject(requestIntercept);\naxiosClient.interceptors.response.eject(responseIntercept);\n};\n}, [session, refreshToken]);\nreturn axiosClient;\n};\nexport default useAxiosAuth;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/5.%20RefreshToken/#jalankan-pada-browser","title":"Jalankan pada Browser","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/6.%20Latihan/","title":"6. Latihan","text":""},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/6.%20Latihan/#1-latihan-1","title":"1. Latihan 1","text":"<p>Buatlah Halaman Lupa Password dan integrasikan dengan api lupa password</p>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/6.%20Latihan/#2-latihan-2","title":"2. Latihan 2","text":"<p>uatlah Halaman Reset Password dan integrasikan dengan api reset password Buatlah Endpoint delete kategori </p>"},{"location":"3.%20NextJS%20-%20Frontend/6.%20Project/B.%20Authentikasi/6.%20Latihan/#4-latihan-3","title":"4. Latihan 3","text":"<p>Buatlah Fitur login dengan google menggunakan nextauth (perlu bikin api di backend untuk handle kebutuhan ini)</p>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/A.%20useDisclosure/","title":"A. useDisclosure","text":"hook/useDisclosure<pre><code>import { useState } from \"react\";\nconst useDislosure = () =&gt; {\nlet [isOpen, setIsOpen] = useState&lt;boolean&gt;(false);\nconst onOpen = () =&gt; {\nsetIsOpen(true);\n};\nconst onClose = () =&gt; {\nsetIsOpen(false);\n};\nreturn {isOpen, onOpen, onClose}\n};\nexport default useDislosure\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/B.%20useDebounce/","title":"B. useDebounce","text":"hook/useDebounce<pre><code>import { useEffect, useState } from \"react\";\nconst useDebounce = (keyword: string, delay: number) =&gt; {\nlet [debouncedValue, setDebouncedValue] = useState(\"\");\nuseEffect(() =&gt; {\nconst handler = setTimeout(() =&gt; {\nsetDebouncedValue(keyword);\n}, delay);\nreturn () =&gt; {\nclearTimeout(handler);\n};\n// eslint-disable-next-line react-hooks/exhaustive-deps\n}, [keyword]);\nreturn {debouncedValue}\n};\nexport default useDebounce;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/C.%20usePagination/","title":"C. usePagination","text":"hook/usePagination<pre><code>import { ChangeEvent, useEffect, useState } from \"react\";\ninterface PaginationParams {\npage: number;\npageSize: number;\n}\nexport const usePagination = &lt;T extends PaginationParams&gt;(defaultParams: T) =&gt; {\nlet [params, setParams] = useState&lt;T&gt;(defaultParams);\nlet [keyword, setKeyword] = useState(\"\");\nlet [filterParams, setFilterParams] = useState&lt;T&gt;(defaultParams);\nconst handleKeyword = (keyword: string) =&gt; {\nsetFilterParams(() =&gt; {\nreturn { ...params, keyword: keyword, page: 1 };\n});\nsetParams(() =&gt; {\nreturn { ...params, keyword: keyword, page: 1 };\n});\n};\nconst handleFilter = () =&gt; {\nsetFilterParams(() =&gt; {\nreturn {\n...params,\npage: 1,\n};\n});\nsetParams((prevParams) =&gt; {\nreturn {\n...prevParams,\npage: 1,\n};\n});\n};\nconst handleSearch = (e: ChangeEvent&lt;any&gt;) =&gt; {\nsetKeyword(e.target.value);\n};\nuseEffect(() =&gt; {\nconst interval = setTimeout(() =&gt; {\nhandleKeyword(keyword);\n}, 500);\nreturn () =&gt; clearTimeout(interval);\n// eslint-disable-next-line react-hooks/exhaustive-deps\n}, [keyword]);\nconst handleClear = () =&gt; {\nsetFilterParams(defaultParams);\nsetParams(defaultParams);\n};\nconst handlePageSize = (e: ChangeEvent&lt;any&gt;) =&gt; {\nsetParams((params) =&gt; ({ ...params, pageSize: e.target.value, page: 1 }));\nsetFilterParams((params) =&gt; ({\n...params,\npageSize: e.target.value,\npage: 1,\n}));\n};\nconst handlePage = (page: number) =&gt; {\nsetParams((params) =&gt; ({ ...params, page: page }));\nsetFilterParams((params) =&gt; ({ ...params, page: page }));\n};\nreturn {\nparams,\nsetParams,\nhandleFilter,\nhandleClear,\nhandlePageSize,\nhandlePage,\nfilterParams,\nhandleSearch\n};\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/D.%20useToast/","title":"D. useToast","text":"hook/useToast<pre><code>import Swal from \"sweetalert2\";\nexport const useToast = () =&gt; {\nconst toastSuccess = (message: string) =&gt; {\nSwal.fire({\nposition: \"center\",\nicon: \"success\",\ntitle: message,\nshowConfirmButton: false,\ntimer: 100000,\n});\n};\nconst toastWarning = (message: string) =&gt; {\nSwal.fire({\nposition: \"top\",\nicon: \"warning\",\ntitle: message,\nshowConfirmButton: false,\ntimer: 10000,\n});\n};\nconst toastError = () =&gt; {\nSwal.fire({\nposition: \"top\",\nicon: \"warning\",\ntitle: \"Ada Kesalahan\",\nshowConfirmButton: false,\ntimer: 10000,\n});\n};\nreturn { toastError, toastWarning, toastSuccess };\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/E.%20useAxiosAuth/","title":"E. useAxiosAuth","text":"hook/useAxiosAuth<pre><code>import { axiosClient } from \"@/lib/axiosClient\";\nimport { useSession, signOut } from \"next-auth/react\";\nimport { useEffect } from \"react\";\nimport { useRefreshToken } from \"./useRefeshToken\";\nconst useAxiosAuth = () =&gt; {\nconst { data: session } = useSession();\nconst { refreshToken } = useRefreshToken();\nuseEffect(() =&gt; {\nconst requestIntercept = axiosClient.interceptors.request.use(\n(config: any) =&gt; {\nconfig.headers[\n\"Authorization\"\n] = `Bearer ${session?.user?.accessToken}`;\nreturn config;\n},\n(error: any) =&gt; Promise.reject(error)\n);\nconst responseIntercept = axiosClient.interceptors.response.use(\nasync (response: any) =&gt; response,\nasync (error: any) =&gt; {\nconst prevRequest = error?.config;\nif (401 === error?.response?.status &amp;&amp; !prevRequest?.sent) {\nprevRequest.sent = true;\ntry {\nawait refreshToken();4 \nprevRequest.headers[\n\"Authorization\"\n] = `Bearer ${session?.user?.accessToken}`;\nreturn axiosClient(prevRequest);\n} catch (err) {\nsignOut();\nwindow.location.replace(\"/auth/login\");\n}\n} else {\nreturn Promise.reject(error);\n}\n}\n);\nreturn () =&gt; {\naxiosClient.interceptors.request.eject(requestIntercept);\naxiosClient.interceptors.response.eject(responseIntercept);\n};\n}, [session, refreshToken]);\nreturn axiosClient;\n};\nexport default useAxiosAuth;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/F.%20useRefreshToken/","title":"F. useRefreshToken","text":"hook/useRefreshToken<pre><code>import { axiosClientRefresh } from \"@/lib/axiosClient\";\nimport { signOut, useSession } from \"next-auth/react\";\nimport { Session } from \"next-auth\";\nimport { useEffect } from \"react\";\nimport { useToast } from \".\";\ninterface SessionUser {\nid: number;\nrefreshToken: string;\naccessToken: string;\nname: string;\nemail: string;\n}\nexport const useRefreshToken = () =&gt; {\nconst { data: session, update } = useSession();\nconst { toastWarning } = useToast();\nuseEffect(() =&gt; {\nconst requestIntercept = axiosClientRefresh.interceptors.request.use(\n(config: any) =&gt; {\nconfig.headers[\n\"Authorization\"\n] = `Bearer ${session?.user?.refreshToken}`;\nconfig.headers.id = session?.user?.id;\nreturn config;\n},\n(error: any) =&gt; Promise.reject(error)\n);\nconst responseIntercept = axiosClientRefresh.interceptors.response.use(\nasync (response: any) =&gt; response,\nasync (error: any) =&gt; {\ntoastWarning(error.response.message);\n// signOut();\n// window.location.replace(\"/auth/login\");\n}\n);\nreturn () =&gt; {\naxiosClientRefresh.interceptors.request.eject(requestIntercept);\naxiosClientRefresh.interceptors.response.eject(responseIntercept);\n};\n}, [session, toastWarning]);\nconst refreshToken = async () =&gt; {\nif (!session) return;\ntry {\nconst { user } = session as Session &amp; { user: SessionUser };\nconst res = await axiosClientRefresh.get(\"/auth/refresh-token\");\nconsole.log(\"res\", res.data);\nawait update({\n...session,\nuser: {\n...user,\naccessToken: res.data.data.access_token,\nrefreshToken: res.data.data.refresh_token,\n},\n});\nreturn true;\n} catch {\nreturn false;\n}\n};\nreturn { refreshToken };\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/G.%20useConfirmDelete/","title":"G. useConfirmDelete","text":"hook/useConfirmDelete<pre><code>import Swal from \"sweetalert2\";\ntype SubmitFunction = (id: number) =&gt; any;\nexport function useConfirmDelete({\nonSubmit,\n}: {\nonSubmit: SubmitFunction;\n}) {\nconst handleDelete = (id: number) =&gt; {\nconst swalWithBootstrapButtons = Swal.mixin({\ncustomClass: {\nconfirmButton: \"btn btn-success\",\ncancelButton: \"btn btn-danger\",\n},\nbuttonsStyling: true,\n});\nswalWithBootstrapButtons\n.fire({\ntitle: \"Apakah Yakin?\",\ntext: \"Data yang terhapus tidak bisa dikembalikan\",\nicon: \"warning\",\nshowCancelButton: true,\nconfirmButtonText: \"Hapus\",\nconfirmButtonColor: \"red\",\ncancelButtonText: \"Batal\",\nreverseButtons: true,\n})\n.then(async (result) =&gt; {\nif (result.isConfirmed) {\nawait onSubmit(id);\n}\n});\n};\nreturn handleDelete;\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/H.%20useUploadFile/","title":"G. useUploadFile","text":"hook/useUploadFile<pre><code>import useAxiosAuth from \"@/hook/useAxiosAuth\";\nimport { BaseResponseSuccess } from \"@/lib/axiosClient\";\ninterface FileResponse extends BaseResponseSuccess {\ndata: {\nfile_url: string;\nfile_name: string;\nfile_size: number;\n};\n}\nconst useUploadFile = () =&gt; {\nconst axiosAuthClient = useAxiosAuth();\nconst uploadSingle = async (file: any): Promise&lt;FileResponse&gt; =&gt; {\nconst form = new FormData();\nform.append(\"file\", file);\nreturn axiosAuthClient\n.post(\"/upload/file\", form, {\nheaders: {\n\"Content-Type\": \"multipart/form-data\",\n},\n})\n.then((res) =&gt; res.data);\n};\nconst deleteFile = async (file_name: string) =&gt; {\nreturn axiosAuthClient.delete(`upload/file/delete/${file_name}`);\n};\nreturn { uploadSingle, deleteFile };\n};\nexport default useUploadFile;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/97.%20Hook/I.%20useCheckbox/","title":"I. useCheckbox","text":"hook/useCheckbox.ts<pre><code>import { ChangeEvent, useMemo, useState } from \"react\";\ninterface Item {\nid: number;\n}\nconst useCheckbox = ({ data }: { data: any }) =&gt; {\nconst [payload, setPayload] = useState&lt;number[]&gt;([]);\nconst checked = useMemo(() =&gt; {\nif (!data) {\nreturn { isAllCheced: false };\n}\nconst isAllChecked = data.data.every((n: Item) =&gt; payload.includes(n.id));\nconst selected = data.data.filter((n: Item) =&gt; payload.includes(n.id));\nreturn {\nisAllChecked: !!selected.length &amp;&amp; isAllChecked,\nisIndeterminate: !!selected.length &amp;&amp; !isAllChecked,\n};\n}, [payload, data]);\nconst handleCheckHeader = () =&gt; {\nif (checked.isAllChecked || checked.isIndeterminate) {\nsetPayload([]);\n} else {\nsetPayload((state) =&gt; {\nif (!data) {\nreturn [];\n}\nconst selected = Array.from(\nnew Set([...state, ...data?.data?.map((n: Item) =&gt; Number(n.id))])\n);\nreturn [...selected];\n});\n}\n};\nconst handleCheckItem = (e: ChangeEvent&lt;any&gt;, id: number) =&gt; {\nif (e.target.checked) {\nsetPayload((state) =&gt; [...state, id]);\n} else {\nconst filtered = payload.filter((n) =&gt; n !== id);\nsetPayload(filtered);\n}\n};\nreturn { checked, payload, handleCheckHeader, handleCheckItem };\n};\nexport default useCheckbox;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/98.%20Utils/A.%20Tanggal/","title":"A. Format Date","text":"terminal<pre><code>npm install date-fns --save\n</code></pre> utils/date.utils.ts<pre><code>import { format, parseISO, isValid } from 'date-fns';\nimport { id } from 'date-fns/locale';\nexport const formatDate = (date: number | string | Date, args?: { format?: 'default' | 'server' }) =&gt; {\nif (!date) return '-'\nconst formatValue = typeof date === 'string' ? new Date(date) : date;\nif (!isValid(formatValue)) return '-'\nif (args?.format === 'server') {\nreturn format(formatValue, 'yyyy-MM-dd', { locale: id })\n}\nreturn format(formatValue, 'dd/MM/yyyy', { locale: id });\n};\nexport const formatDateServer = (date: number | string | Date) =&gt; {\nif (!date) return '-'\nconst formatValue = typeof date === 'string' ? new Date(date) : date;\nreturn format(formatValue, 'yyyy-MM-dd', { locale: id });\n};\nexport const formatDateTime = (date: number | string | Date) =&gt; {\nconst formatValue = typeof date === 'string' ? new Date(date) : date;\nreturn format(formatValue, 'dd/MM/yyyy HH:mm', { locale: id });\n};\nexport const getCurrentDate = () =&gt; format(new Date(), 'EEEE, dd MMMM yyyy', { locale: id });\nexport const parseDateObject = (date: Date) =&gt; {\nreturn {\nyear: date.getFullYear(),\nmonth: date.getMonth() + 1,\nday: date.getDate(),\n}\n}\nexport const parseDateType = (date: any) =&gt; {\nreturn new Date(date.year, date.month - 1, date.day)\n}\nexport const formatDateObject = (date: any) =&gt; {\nreturn format(new Date(date.year, date.month - 1, date.day), 'dd/MM/yyyy', { locale: id })\n}\nexport const parseISODate = (date: any) =&gt; {\nreturn parseISO(date)\n}\nexport const formatDateInd = (isoString:string) =&gt; {\nif (!isoString) return '-';\nconst date = new Date(isoString);\nconst options: Intl.DateTimeFormatOptions = {\nyear: 'numeric',\nmonth: 'short',\nday: 'numeric',\n};\nreturn new Date(date).toLocaleDateString('id-ID', options);\n};\nexport const formatDateIndLong = (isoString:string) =&gt; {\nif (!isoString) return '-';\nconst date = new Date(isoString);\nconst options: Intl.DateTimeFormatOptions = {\nyear: 'numeric',\nmonth: 'long',\nday: 'numeric',\n};\nreturn new Date(date).toLocaleDateString('id-ID', options);\n};\nexport function getDifferenceInDays(date1:number, date2:number) {\nconst oneDay = 24 * 60 * 60 * 1000; // Satu hari dalam milidetik\nconst diffInTime = Math.abs(date2 - date1); // Selisih waktu dalam milidetik\nconst diffInDays = Math.round(diffInTime / oneDay); // Selisih hari bulat\nreturn diffInDays;\n}\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/A.%20Button/","title":"A. Button","text":"components/Button<pre><code>import clsx from \"clsx\";\nimport ClipLoader from \"react-spinners/ClipLoader\";\ntype Variant = \"solid\" | \"outline\";\ntype ColorSchema = \"blue\" | \"red\" | \"green\";\ninterface ButtonProps {\ntitle: string;\nisDisabled?: boolean;\nvariant?: Variant;\ncolorSchema: ColorSchema;\nwidth?: string;\nheight?: string;\nisLoading?: boolean;\n}\nconst Button: React.FC&lt;\nButtonProps &amp; React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;\n&gt; = ({\ntitle,\nisDisabled = false,\nvariant = \"solid\",\ncolorSchema,\nwidth = \"full\",\nheight = \"md\",\nisLoading = false,\n...props\n}) =&gt; {\nreturn (\n&lt;button\n{...props}\ndisabled={isDisabled}\nclassName={clsx(` rounded border w-24  capitalize`, {\n\"bg-blue-500 text-white\": colorSchema === \"blue\" &amp;&amp; variant === \"solid\",\n\"border-blue-500 text-blue-500\":\ncolorSchema === \"blue\" &amp;&amp; variant === \"outline\",\n\"bg-red-500 text-white\": colorSchema === \"red\" &amp;&amp; variant === \"solid\",\n\"border-red-500 text-red-500 \":\ncolorSchema === \"red\" &amp;&amp; variant === \"outline\",\n\"bg-green-500 text-white\":\ncolorSchema === \"green\" &amp;&amp; variant === \"solid\",\n\"border-green-500 text-green-500\":\ncolorSchema === \"green\" &amp;&amp; variant === \"outline\",\n\"opacity-25\": isDisabled,\n\"w-24\": width === \"md\",\n\"w-full\": width === \"full\",\n\"h-8\": width === \"sm\",\n\"h-12\": width === \"md\",\n})}\n&gt;\n{isLoading ? (\ntitle\n) : (\n&lt;ClipLoader\ncolor={\"#36d7b7\"}\nsize={20}\naria-label=\"Loading Spinner\"\ndata-testid=\"loader\"\n/&gt;\n)}\n&lt;/button&gt;\n);\n};\nexport default Button;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/B.%20InputText/","title":"B. InputText","text":"components/InputText.tsx<pre><code>import clsx from \"clsx\";\ninterface InputProps {\nisError?: boolean;\nmessageError?: string;\nid: string | number;\nname: string;\nvalue: string | number | undefined;\n}\nconst InputText: React.FC&lt;\nInputProps &amp; React.InputHTMLAttributes&lt;HTMLInputElement&gt;\n&gt; = ({\nmessageError = \"wajib di isi\",\nisError = false,\nid,\nname,\nvalue,\n...props\n}) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;input\nvalue={value}\nid={id}\nname={name}\nclassName={clsx(`w-full h-8 border rounded px-2`, {\n\"border-red-500 border-2\": isError,\n\"border-gray-700\": !isError,\n})}\n{...props}\n/&gt;\n{isError ? (\n&lt;p className=\"text-red-500 font-bold\"&gt;{messageError}&lt;/p&gt;\n) : (\n&lt;&gt;&lt;/&gt;\n)}\n&lt;/section&gt;\n);\n};\nexport default InputText;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/C.%20Label/","title":"C. Label","text":"components/Label.tsx<pre><code>interface LabelProps {\nhtmlFor: string;\nisRequired?: boolean;\ntitle:string\n}\nconst Label: React.FC&lt;LabelProps&gt; = ({ htmlFor, title, isRequired=false }) =&gt; {\nreturn (\n&lt;label htmlFor={htmlFor} className=\"w-16 h-8 text-sm capitalize  \"&gt;\n{title} {isRequired ? &lt;span className=\"text-red-500\"&gt;*&lt;/span&gt; : &lt;&gt;&lt;/&gt;}\n&lt;/label&gt;\n);\n};\nexport default Label;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/D.%20Select/","title":"D. Select","text":"components/Select.tsx<pre><code>import clsx from \"clsx\";\nimport { ChangeEvent } from \"react\";\ntype Variant = \"solid\" | \"outline\";\ntype ColorSchema = \"blue\" | \"red\" | \"green\";\ninterface ButtonProps {\noptions: { value: string | number; label: string }[];\nname: string;\nisError?: boolean;\nmessageError?: string;\nid: string;\nvalue: string | number | null | undefined;\n}\nconst Select: React.FC&lt;\nButtonProps &amp; React.SelectHTMLAttributes&lt;HTMLSelectElement&gt;\n&gt; = ({\noptions,\nvalue,\nname,\nid,\nmessageError = \"wajib di isi\",\nisError = false,\n...props\n}) =&gt; {\nreturn (\n&lt;section&gt;\n&lt;select\nvalue={value}\nname={name}\nid={id}\nclassName={clsx(`w-full h-8 border rounded px-2`, {\n\"border-red-500 border-2\": isError,\n\"border-gray-700\": !isError,\n})}\n{...props}\n&gt;\n&lt;option&gt;Pilih&lt;/option&gt;\n{options?.map((option, index) =&gt; (\n&lt;option key={index} value={option.value}&gt;\n{option.label}\n&lt;/option&gt;\n))}\n&lt;/select&gt;\n{isError ? (\n&lt;p className=\"text-red-500 font-bold\"&gt;{messageError}&lt;/p&gt;\n) : (\n&lt;&gt;&lt;/&gt;\n)}\n&lt;/section&gt;\n);\n};\nexport default Select;\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/E.%20Pagination/","title":"E. Pagination","text":"components/Pagination.tsx<pre><code>import React, { ChangeEvent, ReactNode } from \"react\";\nimport Select from \"./Select\";\nimport clsx from \"clsx\";\ninterface PaginationProps {\nhandlePageSize: (e: ChangeEvent&lt;any&gt;) =&gt; void;\nhandlePage: (page : number) =&gt; void;\npage: number | string;\npageSize: number | string;\npagination:\n| {\npage: number;\npageSize: number;\ntotal: number;\ntotal_page: number;\n}\n| undefined;\n}\nexport const Pagination: React.FC&lt;PaginationProps&gt; = ({\nhandlePageSize,\nhandlePage,\npagination,\npage,\npageSize,\n}) =&gt; {\nfunction getPage(totalItems: number, currentPage: number, pageSize: number) {\ncurrentPage = currentPage;\npageSize = pageSize;\n// calculate total pages\nlet totalPages = Math.ceil(totalItems / pageSize);\nlet startPage: number, endPage: number;\nif (totalPages &lt;= 10) {\n// less than 10 total pages so show all\nstartPage = 1;\nendPage = totalPages;\n} else {\n// more than 10 total pages so calculate start and end pages\nif (currentPage &lt;= 6) {\nstartPage = 1;\nendPage = 10;\n} else if (currentPage + 4 &gt;= totalPages) {\nstartPage = totalPages - 9;\nendPage = totalPages;\n} else {\nstartPage = currentPage - 5;\nendPage = currentPage + 4;\n}\n}\n// calculate start and end item indexes\nlet startIndex = (currentPage - 1) * pageSize;\nlet endIndex = Math.min(startIndex + pageSize - 1, totalItems - 1);\n// create an array of pages to ng-repeat in the pager control\nconst pages = Array.from(\n{ length: endPage + 1 - startPage },\n(_, i) =&gt; startPage + i\n);\n// return object with all pager properties required by the view\nreturn {\ntotalItems: totalItems,\ncurrentPage: currentPage,\npageSize: pageSize,\ntotalPages: totalPages,\nstartPage: startPage,\nendPage: endPage,\nstartIndex: startIndex,\nendIndex: endIndex,\npages: pages,\n};\n}\nlet pages = getPage(\npagination?.total || 0,\npagination?.page || 1,\npagination?.pageSize || 10\n);\nreturn (\n&lt;div className=\"flex items-center justify-between mt-6\"&gt;\n&lt;div&gt;\n&lt;select\nvalue={pageSize}\nonChange={handlePageSize}\nclassName=\"px-2 py-1 text-sm text-blue-500 rounded-md  border\"\n&gt;\n&lt;option value={1}&gt;1&lt;/option&gt;\n&lt;option value={5}&gt;5&lt;/option&gt;\n&lt;option value={10}&gt;10&lt;/option&gt;\n&lt;option value={25}&gt;25&lt;/option&gt;\n&lt;option value={50}&gt;50&lt;/option&gt;\n&lt;option value={100}&gt;100&lt;/option&gt;\n&lt;/select&gt;\n&lt;/div&gt;\n&lt;div className=\"items-center hidden md:flex gap-x-3\"&gt;\n{pages.pages.map((pageItem, index) =&gt; (\n&lt;button\nkey={index}\nonClick={()=&gt; {\nhandlePage(pageItem)\n}}\nclassName={clsx(\n`px-4 py-2 rounded-full text-sm `,\n{\n\"text-blue-500   bg-blue-100/60\": page === pageItem,\n\"text-blue-500  border  border-blue-100/60\": page !== pageItem,\n},\n{}\n)}\n&gt;\n{pageItem}\n&lt;/button&gt;\n))}\n&lt;/div&gt;\n&lt;/div&gt;\n);\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/F.%20Drawer/","title":"F. Drawer","text":"components/Drawer.tsx<pre><code>\"use client\";\nimport clsx from \"clsx\";\nimport { Dispatch, ReactNode, SetStateAction } from \"react\";\nimport Button from \"./Button\";\nimport { useSpring, animated } from \"@react-spring/web\";\ninterface DrawerProps {\nisOpen: boolean;\nchildren: ReactNode;\ntitle: string;\nonSubmit: () =&gt; void;\nonClear: () =&gt; void;\nonClose: () =&gt; void;\n}\nexport const Drawer: React.FC&lt;DrawerProps&gt; = ({\nisOpen,\ntitle,\nchildren,\nonSubmit,\nonClear,\nonClose,\n}) =&gt; {\nconst springs = useSpring({\nfrom: { opacity: 0, },\nto: { opacity: 1 },\n})\nreturn (\n&lt;animated.div\nstyle={{\nheight: \"100vh\",\nright: 0,\nposition: \"absolute\",\nzIndex: 50,\n...(!isOpen &amp;&amp; { display: \"none\" }),\n...springs\n}}\nclassName={\n\"shadow-sm  md:w-[50%] lg:w-[30%] xl:w-[20%] w-full md bg-white border border-gray-100 px-5\"\n}\n&gt;\n&lt;section className=\"h-[5%] pt-5\"&gt;\n&lt;section className=\"flex items-center justify-between\"&gt;\n&lt;button\nonClick={() =&gt; {\nonClear();\nonClose();\n}}\n&gt;\nClear\n&lt;/button&gt;\n&lt;button\nonClick={() =&gt; {\nonClose();\n}}\n&gt;\nClose\n&lt;/button&gt;\n&lt;/section&gt;\n&lt;h5 className=\"text-gray-600 text-lg font-bold\"&gt;{title}&lt;/h5&gt;\n&lt;/section&gt;\n&lt;section className=\"h-[90%] py-5\"&gt;{children}&lt;/section&gt;\n&lt;section className=\"absolute right-0 left-0 bottom-1 px-5 py-2\"&gt;\n&lt;Button\nonClick={() =&gt; {\nonSubmit();\nonClose();\n}}\ntitle=\"Terapkan\"\ncolorSchema=\"blue\"\n/&gt;\n&lt;/section&gt;\n&lt;/animated.div&gt;\n);\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/G.Spinner/","title":"G. Spinner","text":"components/Spinner.tsx<pre><code>const Spinner = () =&gt; {\nreturn (\n&lt;div  role=\"status\"&gt;\n&lt;svg\naria-hidden=\"true\"\nclassName=\"inline w-6 h-6 mr-2 text-gray-200 animate-spin dark:text-gray-600 fill-blue-600\"\nviewBox=\"0 0 100 101\"\nfill=\"none\"\nxmlns=\"http://www.w3.org/2000/svg\"\n&gt;\n&lt;path\nd=\"M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z\"\nfill=\"currentColor\"\n/&gt;\n&lt;path\nd=\"M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z\"\nfill=\"currentFill\"\n/&gt;\n&lt;/svg&gt;\n&lt;/div&gt;\n);\n};\nexport default Spinner\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/H.%20ButtonAction/","title":"H. ButtonAction","text":"components/ButtonAction.tsx<pre><code>import clsx from \"clsx\";\nimport { TrashIcon, PencilSquareIcon } from \"@heroicons/react/20/solid\";\nimport Spinner from \"./Spinner\";\ninterface ButtonActionProps {\nonClick: () =&gt; void;\nisLoading?: boolean;\n}\nexport const DeleteButton: React.FC&lt;\nButtonActionProps &amp; React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;\n&gt; = ({ onClick, isLoading = false, ...props }) =&gt; {\nreturn (\n&lt;button\ndisabled={isLoading}\ntype=\"button\"\nonClick={onClick}\n{...props}\nclassName=\"text-red-500  h-6 w-6 \"\n&gt;\n{isLoading ? &lt;Spinner /&gt; : &lt;TrashIcon /&gt;}\n&lt;/button&gt;\n);\n};\nexport const EditButton: React.FC&lt;\nButtonActionProps &amp; React.ButtonHTMLAttributes&lt;HTMLButtonElement&gt;\n&gt; = ({ onClick, isLoading = false, ...props }) =&gt; {\nreturn (\n&lt;button\ndisabled={isLoading}\ntype=\"button\"\nonClick={onClick}\n{...props}\nclassName=\"text-blue-500 h-6 w-6\"\n&gt;\n{isLoading ? &lt;Spinner /&gt; : &lt;PencilSquareIcon /&gt;}\n&lt;/button&gt;\n);\n};\n</code></pre>"},{"location":"3.%20NextJS%20-%20Frontend/99.%20Component/i.%20Table/","title":"I. Tabel","text":"components/Table.tsx<pre><code>\"use client\";\nimport { ReactNode } from \"react\";\ninterface TableProps {\nchildren: ReactNode;\nisFetching?: boolean;\nisEmpty?: boolean;\nisError?: boolean;\n}\nexport const Table: React.FC&lt;TableProps&gt; = ({\nisFetching = false,\nisEmpty = false,\nisError = false,\nchildren,\n}) =&gt; {\nreturn (\n&lt;&gt;\n{\" \"}\n&lt;table className=\"w-full  divide-y divide-gray-200 \"&gt;{children}&lt;/table&gt;\n{isError &amp;&amp; (\n&lt;div className='flex items-center justify-center w-full h-32'&gt;\n&lt;div className='text-lg text-gray-500'&gt;Ada kesalahan&lt;/div&gt;\n&lt;/div&gt;\n)}\n{isEmpty &amp;&amp;  !isFetching &amp;&amp; !isError ? (\n&lt;div className='flex items-center justify-center w-full h-32'&gt;\n&lt;div className='text-lg text-gray-500'&gt;Data tidak ditemukan&lt;/div&gt;\n&lt;/div&gt;\n) : null}\n&lt;/&gt;\n);\n};\ninterface TheadProps {\nchildren: ReactNode;\n}\nexport const Thead: React.FC&lt;TheadProps&gt; = ({ children }) =&gt; {\nreturn &lt;thead className=\"bg-gray-50 \"&gt;{children}&lt;/thead&gt;;\n};\ninterface TbodyProps {\nchildren: ReactNode;\n}\nexport const Tbody: React.FC&lt;TbodyProps&gt; = ({ children }) =&gt; {\nreturn &lt;tbody className=\"bg-white \"&gt;{children}&lt;/tbody&gt;;\n};\ninterface TrProps {\nchildren: ReactNode;\n}\nexport const Tr: React.FC&lt;TrProps&gt; = ({ children }) =&gt; {\nreturn &lt;tr&gt;{children}&lt;/tr&gt;;\n};\ninterface ThProps extends React.ThHTMLAttributes&lt;HTMLTableCellElement&gt; {\nchildren: ReactNode;\n}\nexport const Th: React.FC&lt;ThProps&gt; = ({ children, ...props }) =&gt; {\nreturn (\n&lt;th\nclassName=\"px-4 py-2 text-lg text-left bg-gray-100   font-medium text-gray-700 \"\n{...props}\n&gt;\n{children}\n&lt;/th&gt;\n);\n};\ninterface TdProps extends React.TdHTMLAttributes&lt;HTMLTableCellElement&gt; {\nchildren: ReactNode;\n}\nexport const Td: React.FC&lt;TdProps&gt; = ({ children, ...props }) =&gt; {\nreturn (\n&lt;td\nclassName=\"px-4  border-b-2 py-2 text-sm font-medium text-gray-700 \"\n{...props}\n&gt;\n{children}\n&lt;/td&gt;\n);\n};\n</code></pre>"},{"location":"4.%20Database%20MySQL/1.%20Introduction/","title":"1. Introduction","text":"<p>Database atau basis data adalah tempat atau wadah dalam menyimpan sebuah data agar nantinya bisa dipergunakan kembali dengan mudah dan cepat. Sebuah aplikasi yang menampilkan informasi tidaklah bisa lepas dari kebutuhan basis data baik itu berupa sebuah teks ataupun DBMS (Database Management System). Kebutuhan database pada aplikasi biasanya berupa menginput, menyimpan, menampilkan data, serta membuat sebuah laporan berdasarkan data yang sudah pernah disimpan.  </p> <p> </p> <p>MySql merupakan salah satu dari aplikasi Relational Database Management System yang sangat populer dikalangan developer website. Keunggulan dari mysql itu sendiri adalah open source atau gratis, mudah digunakan, aplikasinya selalu melakukan update, banyak website \u2013 website yang menyediakan pembelajaran mysql sehingga jika terjadi kendala mudah untuk dicari  </p> <p>Referensi belajar Mysql  </p> <ol> <li>W3 School </li> <li>Youtube </li> <li>Materi Pak Akbar</li> </ol>"},{"location":"4.%20Database%20MySQL/1.2.%20Installasi%20Software/","title":"1.2. Installasi Software","text":"<p>Software yang digunakan untuk menjalankan mysql disini ada 2 :  </p> <ol> <li>Xampp</li> <li>Table Plus</li> </ol>"},{"location":"4.%20Database%20MySQL/2.%20DDL/1.%20Penjelasan%20DDL/","title":"1. Penjelasan DDL","text":"<p>DDL (Data Definition Language) merupakan perintah SQL untuk membuat, merubah atau menghapus struktur database  </p> <p>Perintah - perintah nya adalah:  </p> <ol> <li>Create  </li> <li>Drop  </li> <li>Alter  </li> </ol>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/1.%20Create%20Database/","title":"1. Create Database","text":"<p>Create adalah perintah yang digunakan untuk membuat sesuatu di dalam database. ada 3 perintah yang dapat digunakan yakni create database, table, dan index. kita akan mulai dari database terlebih dahulu</p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/1.%20Create%20Database/#create-database","title":"Create Database","text":"<p>Untuk membuat database querynya adalah  </p> Create Database<pre><code>CREATE DATABASE database_name\n</code></pre> <p>Untuk mempraktekan silahkan buka aplikasi xampp lalu nyalakan untuk bagian apache dan mysql  </p> <p> </p> <p>lalu buka url <code>localhost/phpmyadmin</code> </p> <p> </p> <p>Buka menu sql lalu ketika sesuai gambar di bawah ini  </p> <p></p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/2.%20Create%20Tabel/1.%20Pengertian%20Table/","title":"1. Pengertian Table","text":"<p>Tabel dalam database adalah struktur yang digunakan untuk menyimpan data dalam basis data. Tabel terdiri dari baris dan kolom, mirip dengan lembar kerja dalam program spreadsheet. Setiap baris dalam tabel mewakili satu rekaman data, dan setiap kolom mewakili atribut atau bidang dari rekaman tersebut. Berikut adalah beberapa komponen utama dari tabel dalam basis data:  </p> <ol> <li>Kolom (Column)     Menentukan jenis data yang disimpan dalam tabel. Setiap kolom memiliki nama dan tipe data tertentu (misalnya, integer, varchar, date)  </li> <li>Baris (Row)     Setiap baris mewakili satu entri atau rekaman dalam tabel. Baris terdiri dari nilai-nilai yang sesuai dengan kolom dalam tabel  </li> <li>Kunci Utama (Primary Key)     Kolom atau kumpulan kolom yang digunakan untuk mengidentifikasi secara unik setiap baris dalam tabel. Nilai dalam kunci utama harus unik dan tidak boleh kosong (NULL)  </li> <li>Kunci Asing (Foreign Key)     Kolom atau kumpulan kolom yang digunakan untuk membuat hubungan antara dua tabel. Kunci asing mengacu pada kunci utama di tabel lain</li> <li>Indeks (Index)     Struktur data yang meningkatkan kecepatan operasi pencarian dan pengurutan dalam tabel. Indeks dapat dibuat pada satu atau lebih kolom  </li> </ol>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/2.%20Create%20Tabel/2.%20Tipe%20-%20Tipe%20Data/","title":"2. Tipe   Tipe Data","text":"<ol> <li>Tipe Data Numerik  <ul> <li>Int (integer) : Menyimpan angka bulat.</li> <li>Float, Double : Menyimpan angka pecahan. </li> </ul> </li> <li>Tipe Data String  <ul> <li>Char : Menyimpan string yang tidak terlalu panjang cocok untuk jenis kelamin, agama, hobi, dll.  </li> <li>Varchar : Menyimpan string panjang cocok untuk nama, dll.  </li> <li>Text : Menyimpan string panjang cocok untuk alamat, pesan, keterangan, dll.  </li> </ul> </li> <li>Tipe Data Tanggal dan Waktu  <ul> <li>Date : Menyimpan tanggal  (tahun, bulan, hari).  </li> <li>Time : Menyimpan waktu (jam, menit, detik).  </li> <li>Datetime : Menyimpan tanggal dan waktu.  </li> <li>TimeStamp : Menyimpan cap waktu yang mencakup tanggal dan waktu.  </li> <li>Year : Menyimpan tahun dalam format 2 digit atau 4 digit.  </li> </ul> </li> <li>Tipe Data Boolean  <ul> <li>Boolean : menyimpan nilai 0 (false) atau 1 (true)  </li> </ul> </li> <li>Tipe Data Pilihan  <ul> <li>Enum : Menyimpan satu nilai dari daftar nilai yang sudah ditentukan.  </li> </ul> </li> </ol>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/2.%20Create%20Tabel/3.%20Query%20Create%20Tabel/","title":"3. Query Create Tabel","text":"<p>Query untuk membuat tabel rumusnya adalah seperti berikut ini :  </p> query create tabel<pre><code>CREATE TABLE nama_tabel (\nkolom1 tipe_data [kondisi],\nkolom2 tipe_data [kondisi],\n...\n);\n</code></pre> <p>sekarang kita dapat membuat tabel santri  </p> query create tabel santri<pre><code>CREATE TABLE santri (\nsantri_id INT AUTO_INCREMENT PRIMARY KEY,\nnama_santri VARCHAR(50) NOT NULL,\nemail_santri VARCHAR(50) NOT NULL,\njurusan_santri CHAR(3) NOT NULL,\numur_santri INT(2) NOT NULL,\nalamat_santri TEXT,\ncreated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n);\n</code></pre> <p>Penjelasan</p> <ul> <li><code>AUTO_INCREMENT</code> : digunakan untuk membuat penomoran otomatis.  </li> <li><code>PRIMARY KEY</code> : data yang menjadi kunci utama dalam tabel ini.  </li> <li><code>NOT NULL</code> : data ini tidak boleh di kosongkan.  </li> <li><code>DEFAULT CURRENT_TIMESTAMP</code> : isi dari tabel ini akan memiliki nilai awal tanggal dan waktu saat ini.  </li> </ul> <p>untuk memasukkan datanya dapat memasukkan query ini:  </p> query input data pada tabel santri<pre><code>INSERT INTO santri(nama_santri, email_santri,jurusan_santri, umur_santri, alamat_santri) VALUES (\n'Fullan', 'santrifullan@gm.com', 'RPL', 15, 'Jonggol, Kab. Bogor, Jawa Barat, Indonesia'\n);\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/3.%20Create%20Index/1.%20%20Pengertian%20Index/","title":"1.  Pengertian Index","text":"<p>Indeks dalam MySQL adalah struktur data yang digunakan untuk meningkatkan kecepatan operasi pengambilan data pada tabel. Dengan adanya indeks, MySQL dapat menemukan baris dengan lebih cepat daripada melakukan pencarian seluruh tabel (full table scan).  </p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/3.%20Create%20Index/1.%20%20Pengertian%20Index/#jenis-jenis-indeks","title":"Jenis-jenis Indeks","text":"<ol> <li>Primary Key  <ul> <li>Setiap tabel dapat memiliki satu primary key.  </li> <li>Primary key adalah indeks unik yang tidak mengizinkan nilai duplikat dan null.  </li> <li>Biasanya digunakan untuk mengidentifikasi baris secara unik.</li> </ul> </li> <li>Unique Index  <ul> <li>Indeks unik mirip dengan primary key, tetapi tabel dapat memiliki lebih dari satu unique index.</li> <li>Indeks ini memastikan bahwa semua nilai dalam kolom indeks adalah unik.  </li> </ul> </li> <li>Index Standar (Non-Unique Index)<ul> <li>Indeks ini tidak memerlukan nilai-nilai yang unik.</li> <li>Digunakan untuk meningkatkan kinerja query.</li> </ul> </li> <li>Full-Text Index<ul> <li>Digunakan untuk pencarian teks lengkap pada kolom yang berisi teks.</li> <li>Biasanya digunakan dalam pencarian string pada teks yang besar seperti artikel atau deskripsi.</li> </ul> </li> <li>Spatial Index<ul> <li>Digunakan untuk data spatial dan geografis.</li> <li>Memungkinkan operasi geometris seperti menghitung jarak dan area.  </li> </ul> </li> </ol>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/3.%20Create%20Index/1.%20%20Pengertian%20Index/#cara-kerja-indeks","title":"Cara Kerja Indeks","text":"<p>Ketika sebuah query dijalankan, MySQL menggunakan indeks untuk menemukan data dengan lebih cepat. Indeks bekerja seperti daftar isi di buku yang membantu untuk menemukan informasi dengan cepat tanpa harus membaca seluruh buku. </p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/2.%20Create/3.%20Create%20Index/2.%20Query%20Index/","title":"2. Query Index","text":"<p>Untuk membuat indeks contoh nya adalah sebagai berikut:  </p> create index<pre><code>CREATE INDEX idx_name ON table_name(column_name);\n</code></pre> <p>untuk versi lengkapnya seperti ini :  </p> create index<pre><code>CREATE INDEX idx_nama On santri(nama_santri);\n</code></pre> <p>untuk unique querynya seperti ini: create index unique<pre><code>CREATE UNIQUE INDEX idx_email ON santri(email_santri);\n</code></pre></p> <p>Maka akan menjadi seperti ini  </p> <p></p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/3.%20Drop/1.%20Pengertian%20drop/","title":"1. Pengertian drop","text":"<p>Drop adalah query pada mysql yang berfungsi untuk menghapus objek database seperti tabel, database, dan juga index. contohnya sebagai berikut:  </p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/3.%20Drop/1.%20Pengertian%20drop/#menghapus-tabel","title":"Menghapus Tabel","text":"<p>Untuk menghapus tabel kita dapat menggunakan query dengan rumus seperti berikut:  </p> Menghapus Tabel<pre><code>DROP TABLE nama_tabel;\n</code></pre> <p>Keterangan</p> <ul> <li>nama tabel bisa diisi sesuai tabel kalian masing - masing  </li> </ul> <p>Contoh query  </p> Menghapus Tabel<pre><code>DROP TABLE siswa;\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/3.%20Drop/1.%20Pengertian%20drop/#menghapus-database","title":"Menghapus Database","text":"<p>Untuk menghapus database kita dapat menggunakan query dengan rumus seperti berikut:  </p> Menghapus Database<pre><code>DROP DATABASE nama_database;\n</code></pre> <p>Keterangan</p> <ul> <li>nama database bisa diisi sesuai database kalian masing - masing  </li> </ul> <p>Contoh query  </p> Menghapus Tabel<pre><code>DROP DATABASE sekolah;\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/3.%20Drop/1.%20Pengertian%20drop/#menghapus-index","title":"Menghapus Index","text":"<p>Untuk menghapus index kita dapat menggunakan query dengan rumus seperti berikut:  </p> Menghapus Index<pre><code>DROP INDEX nama_indeks ON nama_tabel;\n</code></pre> <p>Untuk mendapatkan nama index bisa menggunakan query ini :  </p> Nama Index<pre><code>SHOW INDEX FROM nama_tabel;\n</code></pre> <p>Contoh query  </p> Menghapus Tabel<pre><code>DROP INDEX idx_email ON santri;\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/1.%20Pengertian%20Alter/","title":"1. Pengertian Alter","text":"<p>Query alter digunakan untuk mengubah struktur dari objek database yang sudah ada, seperti tabel dan kolom. Fungsi - fungsi alter adalah sebagai berikut:  </p> <ul> <li>Menambahkan Kolom: Menambah kolom baru ke tabel yang sudah ada  </li> <li>Mengubah Kolom: Mengubah tipe data, nama, atau properti lainnya dari kolom yang sudah ada  </li> <li>Menghapus Kolom: Menghapus kolom dari tabel  </li> <li>Menambahkan atau Menghapus Constraint: Menambah atau menghapus batasan (seperti primary key, foreign key, unique constraint)</li> <li>Mengubah Nama Tabel: Mengubah nama tabel yang sudah ada</li> </ul>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/2.%20Mengubah%20Nama%20Tabel/","title":"2. Mengubah Nama Tabel","text":"<p>Untuk mengubah nama tabel di database mysql kita dapat menggunakan query dengan rumus seperti ini:  </p> mengubah nama tabel<pre><code>ALTER TABLE old_table_name RENAME TO new_table_name;\n</code></pre> <p>Keterangan</p> <ul> <li><code>old_table_name</code> : nama tabel kalian yang saat ini mau diubah  </li> <li><code>new_table_name</code> : nama tabel barunya  </li> </ul> <p>Contoh querynya  </p> mengubah nama tabel<pre><code>ALTER TABLE santri RENAME TO data_santri;\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/3.%20Menambah%20kolom%20baru/","title":"3. Menambah kolom baru","text":"<p>Untuk menambahkan kolom pada tabel di mysql caranya bisa menggunakan rumus seperti ini :  </p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/3.%20Menambah%20kolom%20baru/#menambahkan-kolom-di-paling-akhir","title":"Menambahkan kolom di paling akhir","text":"mengubah nama tabel<pre><code>ALTER TABLE table_name ADD column_name data_type;\n</code></pre> <p>Keterangan</p> <ul> <li>perintah ini akan menambahkan kolom di paling terakhir tabel kita  </li> <li><code>table_name</code> : bisa diisi dengan tabel kalian masing - masing contoh <code>sekolah</code></li> <li><code>column_name</code> : bisa diisi dengan kolom baru yang kalian ingin tambahkan contoh <code>hobi_santri</code> </li> <li><code>data_type</code> : bisa diisi dengan tipe data yang sesuai dengan kolomnya contoh <code>VARCHAR(20)</code> </li> <li>contoh querynya jadi seperti ini <code>ALTER TABLE santri ADD hobi_santri VARCHAR(20);</code> </li> </ul>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/3.%20Menambah%20kolom%20baru/#menambahakan-kolom-sehabis-suatu-kolom","title":"Menambahakan kolom sehabis suatu kolom","text":"<p>Untuk menambahakan kolom sehabis suatu kolom kita dapat menggunkan <code>AFTER</code> pada rumus di atas. contohnya seperti ini :  </p> mengubah nama tabel<pre><code>ALTER TABLE table_name ADD new_column_name data_type AFTER existing_column_name;\n</code></pre> <p>contoh query :  </p> mengubah nama tabel<pre><code>ALTER TABLE santri ADD hobi_santri VARCHAR(20) AFTER umur_santri;\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/3.%20Menambah%20kolom%20baru/#menambahakan-kolom-sebelum-suatu-kolom","title":"Menambahakan kolom sebelum suatu kolom","text":"<p>Untuk menambahakan kolom sebelum suatu kolom kita dapat menggunkan <code>BEFORE</code> pada rumus di atas. contohnya seperti ini :  </p> mengubah nama tabel<pre><code>ALTER TABLE table_name ADD new_column_name data_type BEFORE existing_column_name;\n</code></pre> <p>contoh query :  </p> mengubah nama tabel<pre><code>ALTER TABLE santri ADD hobi_santri VARCHAR(20) BEFORE alamat_santri;\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/4.%20Mengubah%20Tipe%20Data/","title":"4. Mengubah Tipe Data","text":"<p>Untuk mengubah tipe data pada suatu tabel yang sudah jadi kita dapat menggunakan rumus seperti ini:  </p> mengubah tipe kolom pada tabel<pre><code>ALTER TABLE table_name MODIFY column_name new_data_type;\n</code></pre> <p>Keterangan</p> <ul> <li><code>table_name</code> : nama tabel kalian masing - masing    </li> <li><code>column_name</code> : nama kolom kalian masing - masing    </li> <li><code>new_data_type</code> : tipe data baru</li> </ul> <p>Contoh querynya  </p> mengubah tipe kolom pada tabel<pre><code>ALTER TABLE santri MODIFY hobi_santri char(20);\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/5.%20Mengubah%20Nama%20Kolom/","title":"5. Mengubah Nama Kolom","text":"<p>Untuk mengubah nama kolom pada suatu tabel yang sudah jadi kita dapat menggunakan rumus seperti ini:  </p> mengubah nama kolom pada tabel<pre><code>ALTER TABLE table_name RENAME COLUMN old_column_name TO new_column_name;\n</code></pre> <p>Keterangan</p> <ul> <li><code>table_name</code> : nama tabel kalian masing - masing    </li> <li><code>old_column_name</code> : nama kolom kalian masing - masing    </li> <li><code>new_column_name</code> : nama kolom yang baru</li> </ul> <p>Contoh querynya  </p> mengubah nama kolom pada tabel<pre><code>ALTER TABLE santri RENAME COLUMN hobi_santri TO hobi_terpendam_santri;\n</code></pre>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/6.%20Mengubah%20Primary%20Key/","title":"6. Mengubah Primary Key","text":"<p>Untuk mengubah primary key pada suatu tabel kita dapat menghapus primary key yang sudah ada dan membuat yang baru. Contohnya seperti ini:  </p>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/6.%20Mengubah%20Primary%20Key/#menghapus-primary-key","title":"Menghapus primary key","text":"Menghapus primary key pada tabel<pre><code>ALTER TABLE nama_tabel DROP PRIMARY KEY;\n</code></pre> <p>Keterangan</p> <ul> <li><code>nama_tabel</code> : nama tabel kalian masing - masing  </li> </ul> <p>Contoh querynya  </p> Menghapus primary key pada tabel<pre><code>ALTER TABLE santri DROP PRIMARY KEY;\n</code></pre> <p>Penting</p> <ul> <li>jika di sebelumnya kolom menggunakan AUTO_INCREMENT maka primary key tidak dapat di hapus. untuk menhapusnya kalian bisa ubah tipe data pada primary key nya menjadi int contoh seperti ini querynya: <code>ALTER TABLE santri MODIFY santri_id INT NOT NULL;</code></li> </ul>"},{"location":"4.%20Database%20MySQL/2.%20DDL/4.%20Alter/6.%20Mengubah%20Primary%20Key/#membuat-primary-key","title":"Membuat primary key","text":"Membuat primary key pada tabel<pre><code>ALTER TABLE nama_tabel ADD PRIMARY KEY (kolom_baru);\n</code></pre> <p>Keterangan</p> <ul> <li><code>nama_tabel</code> : nama tabel kalian masing - masing  </li> <li><code>kolom_baru</code> : nama kolom yang ingin dijadikan primary key;</li> </ul> <p>Contoh querynya  </p> Membuat primary key pada tabel<pre><code>ALTER TABLE santri ADD PRIMARY KEY (email_santri);\n</code></pre>"},{"location":"4.%20Database%20MySQL/3.%20DML/1.%20Pengertian%20DML/","title":"1. Pengertian DML","text":"<p>DML (Data Manipulation Language) merupakan bagian dari SQL yang digunakan untuk memanipulasi data dalam tabel. Operasi-operasi DML memungkinkan kita untuk CRUD yakni menambahkan (Create), menampilkan (Read), mengubah (Update), dan menghapus data (Delete) di dalam tabel database  </p> <p>Perintah - perintah nya adalah:  </p> <ol> <li>Insert  </li> <li>Select  </li> <li>Update</li> <li>Delete  </li> </ol>"},{"location":"4.%20Database%20MySQL/3.%20DML/2.%20Insert/","title":"2. Insert","text":"<p>INSERT adalah salah satu perintah dalam SQL yang digunakan untuk menambahkan atau memasukkan data baru ke dalam tabel di sebuah database. Dengan menggunakan perintah ini, Anda bisa menambahkan satu atau lebih baris data ke dalam tabel yang telah dibuat. Kita dapat menggunakan query dengan rumus seperti ini:  </p> Insert Data<pre><code>INSERT INTO nama_tabel (kolom1, kolom2, kolom3, ...)\nVALUES (nilai1, nilai2, nilai3, ...);\n</code></pre> <p>Keterangan</p> <ul> <li>INSERT INTO : Ini adalah perintah SQL yang digunakan untuk menambahkan data baru ke dalam tabel yang sudah ada</li> <li><code>nama_tabel</code> : nama tabel kalian yang saat ini mau ditambahkan datanya  </li> <li><code>(kolom1, kolom2, kolom3, ...)</code> : Daftar nama kolom yang ada di tabel. Kita juga bisa menentukan kolom mana saja yang ingin diisi sehingga tidak harus semua kolom di tabel tersebut kita tulis disini.  </li> <li>VALUES : Kata kunci yang digunakan untuk menunjukkan nilai-nilai yang akan dimasukkan ke kolom-kolom tersebut  </li> <li><code>(nilai1, nilai2, nilai3, ...)</code> : Nilai-nilai yang sesuai dengan kolom-kolom yang disebutkan sebelumnya. Urutan nilai harus sesuai dengan urutan kolom yang ditentukan</li> </ul> <p>Contoh querynya  </p> Insert Data<pre><code>INSERT INTO santri(nama_santri, email_santri,jurusan_santri, umur_santri, alamat_santri) VALUES (\n'Fullan', 'santrifullan@gm.com', 'RPL', 15, 'Jonggol, Kab. Bogor, Jawa Barat, Indonesia'\n);\n</code></pre> <p>Perintah diatas akan menambahkan 1 data baru pada tabel santri lalu jika ingin menambahkan lebih dari 1 data kita dapat menambahkan <code>,</code> (koma) sebelum titik koma yang jadinya seperti ini :  </p> Insert Data<pre><code>INSERT INTO santri(nama_santri, email_santri,jurusan_santri, umur_santri, alamat_santri) VALUES ('Ahmad', 'aa@gm.com', 'RPL', 15, 'Jonggol, Kab. Bogor, Jawa Barat, Indonesia'),\n('Bayu', 'bb@gm.com', 'RPL', 15, 'Jonggol, Kab. Bogor, Jawa Barat, Indonesia'),\n('Cahyo', 'cc@gm.com', 'RPL', 15, 'Jonggol, Kab. Bogor, Jawa Barat, Indonesia');\n</code></pre>"},{"location":"4.%20Database%20MySQL/3.%20DML/3.%20Select/","title":"3. Select","text":"<p>Perintah SQL ini digunakan untuk memilih record yang akan ditampilkan berdasarkan data pada table dalam database. Kita dapat menggunakan query dengan rumus seperti ini:  </p> Select Data<pre><code>SELECT column1, column2, ...\nFROM table_name\nWHERE condition;\n</code></pre> <p>Keterangan</p> <ul> <li>SELECT : Ini adalah perintah SQL yang digunakan untuk menampilkan data di dalam tabel yang sudah ada</li> <li><code>column1, column2, ...</code> : Daftar kolom yang ingin ditampilkan. Kita juga bisa menampilkan semua kolom tanpa harus menulis semua yakni dapat menggunakan simbol <code>*</code> </li> <li>FROM : Menentukan tabel dari mana data akan diambil  </li> <li><code>table_name</code> : nama tabel kalian yang saat ini mau ditampilkan datanya  </li> </ul> <p>Contoh querynya  </p> Select Data<pre><code>SELECT nama_santri,jurusan_santri FROM santri;\n</code></pre> <p>Perintah diatas akan menampilkan data nama santri dan jurusan santri dari tabel santri. Untuk menampilkan semua kolom query nya seperti ini :  </p> Select Data<pre><code>SELECT * FROM santri;\n</code></pre>"},{"location":"4.%20Database%20MySQL/3.%20DML/4.%20Update/","title":"4. Update","text":"<p>Query SQL UPDATE digunakan untuk memperbarui data yang ada dalam tabel di basis data. Dengan menggunakan perintah UPDATE, Kita bisa mengubah nilai dari satu atau lebih kolom dalam satu atau lebih baris pada tabel tertentu. Kita dapat menggunakan query dengan rumus seperti ini:  </p> Update Data<pre><code>UPDATE nama_tabel\nSET kolom1 = nilai_baru1, kolom2 = nilai_baru2, ...\nWHERE kondisi;\n</code></pre> <p>Keterangan</p> <ul> <li>UPDATE : Ini adalah perintah SQL yang digunakan untuk mengubah data di dalam tabel yang sudah ada  </li> <li><code>table_name</code> : nama tabel kalian yang saat ini mau diubah datanya  </li> <li>TES : menentukan kolom mana yang akan diperbarui dan nilai baru apa yang akan diisikan ke dalam kolom tersebut.  </li> <li><code>kolom1 = nilai_baru1, kolom2 = nilai_baru2, ...</code> : berisikan kolom yang mau diubah berserta isinya yang baru  </li> <li>WHERE : Kondisi untuk menentukan baris mana yang akan diperbarui. Jika WHERE tidak disertakan, semua baris dalam tabel akan diperbarui    </li> </ul> <p>Contoh querynya  </p> Update Data<pre><code>UPDATE santri\nSET nama_santri = \"Nur\", email_santri = \"nur@smkmq.com\"\nWHERE santri_id = 1;\n</code></pre> <p>Perintah diatas akan mengupdata data nama santri dan email santri dari tabel santri yang memiliki id santri 1 (untuk string wajib menggunakan petik baik kutip 2 <code>\"</code> atau kutip 1 <code>'</code>). Untuk mengupdate semua data di tabel santri kita dapat menggunakan query ini :  </p> Select Data<pre><code>UPDATE santri\nSET jurusan_santri = \"TKJ\";\n</code></pre>"},{"location":"4.%20Database%20MySQL/3.%20DML/5.%20Delete/","title":"5. Delete","text":"<p>Query SQL DELETE digunakan untuk menghapus data atau baris dari tabel dalam database. Kita dapat menggunakan query dengan rumus seperti ini:  </p> Delete Data<pre><code>DELETE FROM nama_tabel WHERE kondisi;\n</code></pre> <p>Keterangan</p> <ul> <li>Delete : Ini adalah perintah SQL yang digunakan untuk menghapus data di dalam tabel yang sudah ada  </li> <li>FROM : Menentukan tabel dari mana data akan diambil  </li> <li><code>nama_tabel</code> : nama tabel kalian yang saat ini mau ditampilkan datanya  </li> <li>WHERE : Kondisi untuk menentukan data mana yang akan dihapus. Jika WHERE tidak disertakan, semua data dalam tabel akan dihapus  </li> </ul> <p>Contoh querynya  </p> Delete Data<pre><code>DELETE FROM santri WHERE santri_id = 2;\n</code></pre> <p>Perintah diatas akan menghapus data santri dari tabel santri yang memiliki id santri 2. Untuk menghapus semua data di tabel santri kita dapat menggunakan query ini :  </p> Delete Data<pre><code>DELETE FROM santri;\n</code></pre>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/A.%20Where/","title":"A. Where","text":"<p>Where ini digunakan untuk memfilter baris yang ingin ditampilkan berdasarkan kondisi tertentu. Biasa where ini digabungkan dengan beberapa operator pembanding yaitu :  </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/A.%20Where/#1-sama-dengan","title":"1. <code>=</code> Sama dengan","text":"<p>Sama dengan digunakan untuk memeriksa kesamaan dari 2 buah nilai contoh:  </p> Contoh =<pre><code>SELECT * FROM users WHERE age = 25;\n</code></pre> <p>Memilih semua kolom dari tabel user dimana age / umurnya sama dengan 25</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/A.%20Where/#2-atau-tidak-sama-dengan","title":"2. <code>&lt;&gt;</code> atau <code>!=</code> Tidak sama dengan","text":"<p>Tidak sama dengan digunakan untuk memeriksa ketidaksamaan antara 2 buah nilai contoh:  </p> Contoh !=<pre><code>SELECT * FROM users WHERE age &lt;&gt; 25;\n</code></pre> <p>Memilih semua kolom dari tabel user dimana age / umurnya tidak sama dengan 25</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/A.%20Where/#3-lebih-besar-dari","title":"3. <code>&gt;</code> Lebih besar dari","text":"<p>Lebih besar dari digunakan untuk memeriksa apakah nilai pertama lebih besar dari nilai kedua contoh:  </p> Contoh &gt;<pre><code>SELECT * FROM products WHERE price &gt; 100;\n</code></pre> <p>Memilih semua kolom dari tabel product price / harga lebih besar dari 100</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/A.%20Where/#4-kurang-dari","title":"4. <code>&lt;</code> Kurang dari","text":"<p>Kurang dari digunakan untuk memeriksa apakah nilai pertama kurang dari nilai kedua contoh:  </p> Contoh &lt;<pre><code>SELECT * FROM products WHERE price &lt; 100;\n</code></pre> <p>Memilih semua kolom dari tabel product price / harga kurang dari 100</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/A.%20Where/#5-lebih-besar-atau-sama-dengan","title":"5. <code>&gt;=</code> Lebih besar atau sama dengan","text":"<p>Digunakan untuk memeriksa apakah nilai pertama lebih besar atau sama dengan dari nilai kedua contoh:  </p> Contoh &gt;=<pre><code>SELECT * FROM products WHERE price &gt;= 100;\n</code></pre> <p>Memilih semua kolom dari tabel product price / harga lebih dari atau sama dengan 100</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/A.%20Where/#6-kurang-dari-atau-sama-dengan","title":"6. <code>&lt;=</code> Kurang dari atau sama dengan","text":"<p>Digunakan untuk memeriksa apakah nilai pertama kurang dari atau sama dengan dari nilai kedua contoh:  </p> Contoh &lt;=<pre><code>SELECT * FROM products WHERE price &lt;= 100;\n</code></pre> <p>Memilih semua kolom dari tabel product price / harga kurang dari atau sama dengan 100</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/B.%20Operator%20Logika/","title":"B. Operator Logika","text":"<p>Operator logika dalam SQL ini digunakan untuk menggabungkan seleksi pada record yang syaratnya lebih dari satu kondisi. Operator logika terdiri dari 3 operator yakni AND (&amp;&amp;), OR (||), NOT (!) . Berikut adalah tabel nya :  </p> <p> </p> <p>Hasil dari operator logika ini bernilai TRUE ketika benar dan FALSE ketika salah</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/B.%20Operator%20Logika/#1-and","title":"1. AND (&amp;&amp;)","text":"<p>Digunakan untuk mengembalikan hasil yang <code>TRUE</code> jika semua kondisi terpenuhi contoh :  </p> Contoh and<pre><code>SELECT * FROM users\nWHERE age &gt; 18 AND city = 'Jakarta';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana age nya lebih dari 18 dan citynya di jakarta </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/B.%20Operator%20Logika/#2-or","title":"2. OR (||)","text":"<p>Digunakan untuk mengembalikan hasil yang <code>TRUE</code> jika ada salah satu kondisi terpenuhi contoh :  </p> Contoh or<pre><code>SELECT * FROM users\nWHERE age &gt; 18 OR city = 'Jakarta';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana age nya lebih dari 18 atau yang citynya di jakarta </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/B.%20Operator%20Logika/#3-not","title":"3. NOT (!)","text":"<p>Digunakan untuk mengembalikan hasil dari konidi. Jika kondisi <code>TRUE</code> maka menjadi <code>FALSE</code> atau yang lainnya contoh :  </p> Contoh and<pre><code>SELECT * FROM users\nWHERE NOT city = 'Jakarta';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana citynya yang BUKAN di jakarta </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/C.%20Beetwen/","title":"C. Beetwen","text":"<p>Query sql BETWEEN digunakan untuk memfilter hasil query dari range tertentu sehingga hanya akan menampilkan data yang berada dalam rentang nilai tertentu saja. Query ini umumnya digunakan dengan kolom yang memiliki tipe data numerik, tanggal atau waktu. Tetapi ada juga yang menggunakan between ini di tipe data yang lainnya. Untuk rumusnya seperti berikut :  </p> Rumus Between<pre><code>SELECT column_name(s)\nFROM table_name\nWHERE column_name BETWEEN value1 AND value2;\n</code></pre> <p>memilih kolom dari suatu tabel dimana suatu kolom dengan range atau rentang nilai nya <code>VALUE1</code> dan <code>VALUE2</code> </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/C.%20Beetwen/#contoh-penggunaannya","title":"Contoh Penggunaannya","text":""},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/C.%20Beetwen/#1-numerik","title":"1. Numerik","text":"Between Numerik<pre><code>SELECT *\nFROM Products\nWHERE Price BETWEEN 100 AND 500;\n</code></pre> <p>memilih semua kolom dari tabel product dimana rentang nilai price adalah 100 sampai 500 </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/C.%20Beetwen/#2-tanggal-waktu","title":"2. Tanggal / Waktu","text":"Between Tanggal / Waktu<pre><code>SELECT *\nFROM Orders\nWHERE OrderDate BETWEEN '2023-01-01' AND '2023-03-31';\n</code></pre> <p>memilih semua kolom dari tabel order dimana rentang nilai order adalah dari tanggal 1 Januari 2023 sampai 31 Maret 2023 </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/C.%20Beetwen/#3-teks","title":"3. Teks","text":"Between Teks<pre><code>SELECT *\nFROM Customers\nWHERE LastName BETWEEN 'A' AND 'M';\n</code></pre> <p>memilih semua kolom dari tabel customer dimana Lastname rentang nilainya dimulai dari Huruf A didepan sampai Huruf M </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/D.%20Like/","title":"D. Like","text":"<p>Like merupakan sebuah operator yang digunakan dalam pernyataan SQL untuk mencocokkan pola dalam kolom teks. LIKE biasanya digunakan dalam query WHERE untuk mencari data dalam tabel yang sesuai dengan pola tertentu.  </p> <p>Beberapa pola dalam LIKE:  </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/D.%20Like/#1-a","title":"1. <code>a%</code>","text":"<p>Cara untuk mencari kesesuaian pada suatu kata yang berawalan 1 atau beberapa huruf a atau A. Contohnya :  </p> Between Teks<pre><code>SELECT * FROM users WHERE name LIKE 'a%';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana namanya yang mengandung huruf a di depannya </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/D.%20Like/#2-a","title":"2. <code>%a</code>","text":"<p>Cara untuk mencari kesesuaian pada suatu kata yang berakhiran 1 atau beberapa huruf a atau A. Contohnya :  </p> Between Teks<pre><code>SELECT * FROM users WHERE name LIKE '%a';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana namanya yang mengandung huruf a di belakangnya </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/D.%20Like/#3-a","title":"3. <code>%a%</code>","text":"<p>Cara untuk mencari kesesuaian pada suatu kata yang didalamnya mengandung 1 atau beberapa huruf a atau A. Contohnya :  </p> Between Teks<pre><code>SELECT * FROM users WHERE name LIKE '%a%';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana namanya yang mengandung huruf a </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/D.%20Like/#4-a__","title":"4. <code>a__</code>","text":"<p>Cara untuk mencari kesesuaian pada suatu kata yang berawalan hanya 1 huruf a atau A yang sama. Contohnya :   </p> Between Teks<pre><code>SELECT * FROM users WHERE name LIKE 'a__';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana namanya terdiri dari tiga karakter, di mana karakter pertama adalah 'a' </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/D.%20Like/#5-_a_","title":"5. <code>_a_</code>","text":"<p>Cara untuk mencari kesesuaian pada suatu kata yang didalamnya mengandung hanya 1 huruf a atau A yang sama. Contohnya :   </p> Between Teks<pre><code>SELECT * FROM users WHERE name LIKE '_a_';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana namanya terdiri dari tiga karakter, di mana karakter keduanya adalah 'a' </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/D.%20Like/#6-__a","title":"6. <code>__a</code>","text":"<p>Cara untuk mencari kesesuaian pada suatu kata yang berakhiran hanya 1 huruf a atau A yang sama. Contohnya :   </p> Between Teks<pre><code>SELECT * FROM users WHERE name LIKE '__a';\n</code></pre> <p>Memilih semua kolom dari tabel user dimana namanya terdiri dari tiga karakter, di mana karakter terakhirnya adalah 'a' </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/E.%20In%20%26%20Not%20In/","title":"E. In & Not In","text":""},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/E.%20In%20%26%20Not%20In/#1-in","title":"1. IN","text":"<p>Query sql IN digunakan untuk memfilter data berdasarkan apakah nilai kolom tertentu ada dalam daftar nilai tertentu atau tidak. Untuk rumusnya seperti berikut :  </p> Rumus IN<pre><code>SELECT * FROM students\nWHERE grade IN ('A', 'B', 'C');\n</code></pre> <p>memilih semua kolom dari tabel students dimana grade yang memiliki nilai A, B dan C</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/E.%20In%20%26%20Not%20In/#2-not-in","title":"2. Not In","text":"<p>Query sql IN digunakan untuk memilih baris yang nilai kolomnya tidak cocok dengan salah satu nilai dalam daftar yang ditentukan. Untuk rumusnya seperti berikut :  </p> Rumus Not IN<pre><code>SELECT * FROM students\nWHERE grade NOT IN ('A', 'B', 'C');\n</code></pre> <p>memilih semua kolom dari tabel students dimana grade yang tidak memiliki nilai A, B dan C</p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/F.%20Order%20By/","title":"F. Order By","text":"<p>Query sql <code>Order By</code> digunakan untuk mengatur hasil query berdasarkan satu atau lebih kolom dalam urutan tertentu, baik secara ascending (ASC) atau descending (DESC). Default-nya adalah ascending jika tidak ditentukan.  </p> <p>Contoh Penggunaan :  </p> <ol> <li> <p>Mengurutkan berdasarkan Ascending (default)  </p> Rumus Order BY<pre><code>SELECT * FROM siswa\nORDER BY nama;\n</code></pre> <p>Memilih semua kolom dari tabel siswa berdasarkan nama secara alfabetis (A-Z) </p> </li> <li> <p>Mengurutkan secara Descending:  </p> Rumus Order BY<pre><code>SELECT * FROM siswa\nORDER BY nilai DESC;\n</code></pre> <p>Memilih semua kolom dari tabel siswa berdasarkan nilai yang tertinggi sampai yang terkecil </p> </li> <li> <p>Mengurutkan beberapa kolom:  </p> Rumus Order BY<pre><code>SELECT * FROM siswa\nORDER BY kelas ASC, nilai DESC;\n</code></pre> <p>Dalam contoh ini, data siswa akan diurutkan pertama berdasarkan kelas (ascending), lalu jika ada siswa dengan kelas yang sama, mereka akan diurutkan berdasarkan nilai (descending). </p> </li> </ol>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/G.%20Fungsi%20Agregat/","title":"G. Fungsi Agregat","text":"<p>Fungsi agregat dalam SQL adalah fungsi yang melakukan operasi perhitungan pada satu set nilai dan mengembalikan satu nilai tunggal. Berikut adalah beberapa fungsi agregat yang umum digunakan:  </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/G.%20Fungsi%20Agregat/#1-count","title":"1. Count","text":"<p>Count ini digunakan untuk Menghitung jumlah baris dalam satu set data. Contoh querynya adalah:  </p> Rumus Count<pre><code>SELECT COUNT(*) FROM students;\n</code></pre> <p>menghitung jumlah total baris dalam tabel <code>students</code> </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/G.%20Fungsi%20Agregat/#2-sum","title":"2. SUM","text":"<p>SUM ini digunakan untuk Menjumlahkan semua nilai dalam satu kolom. Contoh querynya adalah:  </p> Rumus SUM<pre><code>SELECT SUM(salary) FROM employees;\n</code></pre> <p>menghitung total gaji dari semua <code>employees</code> </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/G.%20Fungsi%20Agregat/#3-avg","title":"3. AVG","text":"<p>AVG ini digunakan untuk Menghitung nilai rata-rata dari satu set nilai. Contoh querynya adalah:  </p> Rumus AVG<pre><code>SELECT AVG(salary) FROM employees;\n</code></pre> <p>menghitung rata-rata gaji <code>employees</code> </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/G.%20Fungsi%20Agregat/#4-min","title":"4. MIN","text":"<p>MIN ini digunakan untuk Mengembalikan nilai terkecil dalam satu set nilai. Contoh querynya adalah:  </p> Rumus MIN<pre><code>SELECT MIN(salary) FROM employees;\n</code></pre> <p>mencari gaji terendah dari <code>employees</code> </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/G.%20Fungsi%20Agregat/#5-max","title":"5. MAX","text":"<p>MAX ini digunakan untuk Mengembalikan nilai terbesar dalam satu set nilai. Contoh querynya adalah:  </p> Rumus MAX<pre><code>SELECT MAX(salary) FROM employees;\n</code></pre> <p>mencari gaji terbesar dari <code>employees</code> </p>"},{"location":"4.%20Database%20MySQL/4.%20Perintah%20SQL/H.%20Group%20By/","title":"H. Group By","text":"<p>Query sql <code>Group By</code> digunakan untuk mengelompokkan baris-baris dalam hasil query berdasarkan satu atau lebih kolom. Perintah ini biasanya digunakan bersamaan dengan fungsi agregat yang melakukan operasi pada setiap grup untuk menghasilkan satu nilai ringkasan.</p> <p>Contoh Penggunaan Group By </p> <p>Terdapat tabel sales yang isinya seperti ini  </p> id product_id quantity sale_date 1 101 5 2024-08-01 2 102 3 2024-08-02 3 101 7 2024-08-03 4 103 2 2024-08-04 5 102 4 2024-08-05 <p>Lalu kita akan membuat penggelompokan berdasarkan product id dan jumlah quantity yang terjual. Query seperti berikut :  </p> Rumus MAX<pre><code>SELECT product_id, SUM(quantity) AS total_quantity_sold\nFROM sales\nGROUP BY product_id;\n</code></pre> <p>Memilih kolom product id dan total quantity dengan kita aliaskan nama kolomnya menjadi total_quantity_sold dari tabel sales dan di kelompokan berdasarkan product id nya </p> <p>Hasilnya :  </p> product_id total_quantity_sold 101 12 102 7 103 2"},{"location":"5.%20Golang%20-%20Backend/1.%20Golang%20Dasar/","title":"Golang","text":"<p>Golang atau Go adalah bahasa pemrograman yang dikembangkan oleh Google pada tahun 2007 dan dirilis pada 2009. Go diciptakan oleh Robert Griesemer, Rob Pike, dan Ken Thompson untuk mengatasi masalah yang ada di bahasa pemrograman lain, seperti lama waktu kompilasi dan kompleksitas dalam pengembangan aplikasi besar.</p> <p>Go berfokus pada efisiensi, kecepatan kompilasi, dan concurrency, yang membuatnya sangat cocok untuk pengembangan perangkat lunak sistem, layanan web, dan aplikasi yang membutuhkan kinerja tinggi.</p> <p>Kelebihan Go:</p> <ul> <li> <p>Performa Tinggi: Go dikompilasi menjadi kode mesin (bukan kode byte seperti di Java), sehingga menghasilkan performa yang sangat cepat, hampir mendekati bahasa seperti C dan C++.</p> </li> <li> <p>Concurrency yang Kuat: Go memiliki dukungan bawaan untuk pemrograman concurrent melalui goroutines dan channel. Ini memungkinkan pengembangan aplikasi yang skalabel dengan mudah, terutama untuk aplikasi server dan pemrosesan paralel.</p> </li> <li> <p>Kompilasi Cepat: Go dirancang untuk mengatasi masalah lambatnya waktu kompilasi pada aplikasi besar. Go mengompilasi sangat cepat meskipun pada proyek besar.</p> </li> <li> <p>Sederhana dan Bersih: Go memiliki sintaks yang sederhana dan mudah dipahami. Ini memungkinkan pengembang baru untuk cepat memahami kode, sekaligus memudahkan pengelolaan proyek besar.</p> </li> <li> <p>Garbage Collection: Go dilengkapi dengan garbage collector untuk manajemen memori otomatis, yang mengurangi beban pengelolaan memori manual bagi pengembang.</p> </li> <li> <p>Cross-Platform: Go dapat dikompilasi menjadi binary untuk berbagai sistem operasi tanpa perubahan kode, yang memudahkan distribusi aplikasi.</p> </li> <li> <p>Ekosistem yang Kuat: Go memiliki pustaka standar yang kuat dan banyak alat bantu untuk pengembangan aplikasi modern, seperti testing, profiling, dan dokumentasi bawaan.</p> </li> </ul> <p>Go sering digunakan untuk membangun aplikasi seperti server web, layanan cloud, tools DevOps, hingga layanan microservices.</p>"},{"location":"5.%20Golang%20-%20Backend/1.%20Golang%20Dasar/#instalasi-golang","title":"Instalasi Golang","text":"<p>Go modules merupakan tools untuk manajemen dependensi resmi milik Go. Modules digunakan untuk menginisialisasi sebuah project, sekaligus melakukan manajemen terhadap 3rd party atau library atau dependency yang digunakan dalam project.</p> <p>Modules penggunaannya adalah via CLI. Jika pembaca sudah sukses meng-install Go, maka otomatis bisa menggunakan operasi CLI Go Modules.</p>"},{"location":"5.%20Golang%20-%20Backend/1.%20Golang%20Dasar/#inisialisasi-project-menggunakan-go-modules","title":"Inisialisasi Project menggunakan go Modules","text":"terminal<pre><code> mkdir golang-learn\ncd golang-learn/ \ngo mod init golang-learn \n</code></pre>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/","title":"Golang Dasar","text":""},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#hello-world","title":"Hello world","text":"<p>Dalam memulai belajar golang , kita mulai dengan membuat hello world. Buatlah file <code>main.go</code> dalam folder project kita. dan tulislah kode seperti berikut.</p> main.go<pre><code>package main\nimport \"fmt\"\nfunc main() {\nfmt.Println(\"Hello World\")\n}\n</code></pre> <p></p> <p>Kemudian kita jalankan project golang pertama kita dengan <code>go run  main.go</code></p> <ol> <li><code>Package</code> adalah unit dasar untuk mengorganisasi dan mengelompokkan kode. Package memungkinkan pengembang untuk membagi aplikasi menjadi beberapa modul kecil, yang lebih mudah dikelola, digunakan ulang, dan diuji. Setiap file Go harus menjadi bagian dari satu package, dan package ini bisa berisi fungsi, tipe data, variabel, serta kode lain yang relevan.</li> <li><code>import</code> digunakan untuk meng-import atau memasukan package lain ke dalam file program, agar isi dari package yang di-import bisa dimanfaatkan.  Package fmt merupakan salah satu package bawaan yang disediakan oleh Go, isinya banyak fungsi untuk keperluan I/O yang berhubungan dengan text.</li> </ol>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#variabel","title":"Variabel","text":"<p>Dalam Go, variabel adalah tempat penyimpanan data dengan tipe tertentu. Variabel di Go bisa dideklarasikan dengan beberapa cara, dan Go adalah bahasa yang <code>statically typed</code>, artinya setiap variabel harus memiliki tipe data yang jelas, meskipun Go mendukung inferensi tipe secara otomatis.</p>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#1-deklarasi-eksplisit-dengan-tipe","title":"1. Deklarasi Eksplisit dengan Tipe","text":"<p>kita bisa mendeklarasikan variable dengan menyebutkan tipe datanya</p> main.go<pre><code>var nama string\nnama = \"Ihsan\"\nvar sekolah string = \"SMK MADINATULQURAN\"   </code></pre>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#2-deklarasi-tanpa-menyebutkan-tipe-type-inference","title":"2. Deklarasi tanpa Menyebutkan Tipe (type inference)","text":"<p>Go bisa secara otomatis mengenali tipe variabel berdasarkan nilai awalnya.</p> main.go<pre><code>var usia = 25\nnama := \"ihsan\"\nalamat := \"bogor\"\n</code></pre>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#3-deklarasikan-banyak-variabel","title":"3. Deklarasikan Banyak Variabel","text":"main.go<pre><code>var x, y int = 1,2\nx,y :=1,2\nvar nama, alamat string = \"ihsan\", \"bogor\"\n</code></pre>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#4-variabel-underscore-_","title":"4. Variabel Underscore <code>_</code>","text":"<p>Go memiliki aturan unik yang jarang dimiliki bahasa lain, yaitu tidak boleh ada satupun variabel yang menganggur. Artinya, semua variabel yang dideklarasikan harus digunakan. Jika ada variabel yang tidak digunakan tapi dideklarasikan, error akan muncul pada saat kompilasi dan program tidak akan bisa di-run.</p> <p></p> <p>Underscore (_) adalah reserved variable yang bisa dimanfaatkan untuk menampung nilai yang tidak dipakai. Bisa dibilang variabel ini merupakan keranjang sampah.</p> main.go<pre><code>package main\nimport (\n\"fmt\"\n)\nfunc myFunction() (int, string) {\nreturn 42, \"hello\"\n}\nfunc main() {\n// Abaikan string yang dikembalikan\nnum, _ := myFunction()\nfmt.Println(num) // Output: 42\n}\n</code></pre> <p>Dalam contoh di atas, nilai kedua dari myFunction diabaikan dengan menggunakan <code>_,</code> sehingga hanya num yang digunakan.</p>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#tipe-data","title":"Tipe Data","text":"<p>Di Golang, terdapat beberapa tipe data dasar yang digunakan untuk menyimpan berbagai jenis data. Berikut adalah tipe-tipe data utama di Golang:</p>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#tipe-data-numerik-non-desimal","title":"Tipe Data Numerik Non-Desimal","text":"<p>Di Golang, tipe data numerik non-desimal mengacu pada tipe-tipe bilangan bulat (integer) yang tidak memiliki nilai pecahan atau desimal. Golang menyediakan beberapa tipe integer dengan perbedaan dalam ukuran bit dan tanda (signed atau unsigned). Berikut adalah tipe-tipe numerik non-desimal yang tersedia:</p> <p>Tipe Integer Signed(Bertanda) Tipe signed dapat menampung bilangan negatif dan positif.</p> <ul> <li> <p><code>int</code> : Ukuran integer bergantung pada platform (32-bit atau 64-bit).</p> </li> <li> <p><code>int8</code> : Bilangan bulat 8-bit, rentang nilai dari -128 hingga 127.</p> </li> <li><code>int16</code> : Bilangan bulat 16-bit, rentang nilai dari -32,768 hingga 32,767.</li> <li><code>int32</code> : Bilangan bulat 32-bit, rentang nilai dari -2,147,483,648 hingga 2,147,483,647.</li> <li><code>int64</code> : Bilangan bulat 64-bit, rentang nilai dari -9,223,372,036,854,775,808 hingga 9,223,372,036,854,775,807.</li> </ul> main.go<pre><code>var a int32 = -50 </code></pre> <p>Tipe Integer Unsigned(Tanpa Tanda)</p> <p>Tipe unsigned hanya dapat menampung bilangan positif (termasuk nol).</p> <ul> <li><code>uint</code> : Ukuran unsigned integer bergantung pada platform (32-bit atau 64-bit).</li> <li><code>uint8</code> : Bilangan bulat unsigned 8-bit, rentang nilai dari 0 hingga 255.</li> <li><code>uint16</code> : Bilangan bulat unsigned 16-bit, rentang nilai dari 0 hingga 65,535.</li> <li><code>uint32</code> : Bilangan bulat unsigned 32-bit, rentang nilai dari 0 hingga 4,294,967,295.</li> <li><code>uint64</code> : Bilangan bulat unsigned 64-bit, rentang nilai dari 0 hingga 18,446,744,073,709,551,615.</li> </ul> main.go<pre><code>var a uint16 = 300 </code></pre> <p>Tipe data non-desimal (integer) di Golang disesuaikan dengan kebutuhan penyimpanan nilai bilangan bulat, baik yang bertanda maupun tanpa tanda, serta ukuran bit yang berbeda-beda untuk efisiensi memori.</p>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#tipe-data-numerik-desimal","title":"Tipe Data Numerik Desimal","text":"<p>Di Golang, tipe data numerik desimal digunakan untuk menyimpan bilangan dengan nilai pecahan atau desimal (floating-point). Golang menyediakan dua tipe data numerik desimal utama yang berbeda dalam presisi dan ukuran:</p> <p>Float32 (Floating-Point 32-bit)</p> <ul> <li>Menyimpan bilangan desimal dengan presisi 32-bit.</li> <li>Rentang nilai dari sekitar 1.18e-38 hingga 3.4e+38 dengan presisi sekitar 6-7 digit desimal.</li> </ul> main.go<pre><code>var x float32 = 3.14\n</code></pre> <p>Float64 (Floating-Point 64-bit)</p> <ul> <li>Menyimpan bilangan desimal dengan presisi 64-bit.</li> <li>Rentang nilai dari sekitar 2.23e-308 hingga 1.8e+308 dengan presisi sekitar 15 digit desimal.</li> </ul> main.go<pre><code>var y float64 = 3.141592653589793\n</code></pre> <p>Perbedaan <code>float32</code> dan <code>float64</code>:</p> <ul> <li><code>Presisi</code>: float64 memiliki presisi lebih tinggi dan mampu menyimpan lebih banyak angka desimal dibandingkan float32.</li> <li><code>Ukuran Memori</code>: float32 menggunakan 4 byte, sedangkan float64 menggunakan 8 byte.</li> </ul> <p>Kesimpulan</p> <p>Tipe data numerik desimal (float32 dan float64) digunakan di Golang untuk menangani bilangan dengan nilai pecahan. Gunakan float32 untuk kebutuhan yang memprioritaskan memori, dan float64 untuk presisi yang lebih tinggi.</p>"},{"location":"5.%20Golang%20-%20Backend/2.%20Golang/#tipe-data-bool-boolean","title":"**Tipe Data <code>bool</code> Boolean","text":"<p>Di Golang, tipe data boolean (logika) digunakan untuk menyimpan nilai true atau false. Tipe data ini hanya memiliki dua kemungkinan nilai, yaitu:</p> <ul> <li><code>true</code></li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/A.%20Routing/","title":"A. Routing","text":""},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/A.%20Routing/#1-apa-itu-routing","title":"1. Apa itu Routing ?","text":"<p>Routing / Route pada flutter mirip dengan routing pada umumnya yakni proses penamaan suatu alamat aplikasi agar ketika dibuka tidak harus menggunakan nama aslinya. Dengan pengalamatan ini aplikasi akan menjadi lebih rapih dan terstruktur.</p> <p></p> <p>Bagaimana cara membuat routing ?</p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/A.%20Routing/#2-buat-project-flutter","title":"2. Buat Project Flutter","text":"<p>Buat project flutter baru dengan nama <code>app_latihan</code></p> <p>setelah project sudah dibuat buat 3 file dart baru pada pada folder lib dengan nama <code>page1.dart,page2.dart,page3.dart</code> seperti ini:</p> <p></p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/A.%20Routing/#3-navigator-dasar","title":"3. Navigator dasar","text":"<p>Sebelum kita belajar mengenai route, kita akan membuat perpindahan halaman dari home - page3 menggunakan navigator yang sudah pernah dipelajari sebelumnya. Tulis kode berikut ini</p> main.dart<pre><code>// ignore_for_file: use_key_in_widget_constructors\nimport 'package:app_latihan/page1.dart';\nimport 'package:flutter/material.dart';\nvoid main() {\nrunApp(const MyApp());\n}\nclass MyApp extends StatelessWidget {\nconst MyApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn MaterialApp(\ntitle: 'Flutter Demo',\nhome: MyHomePage(),\n);\n}\n}\nclass MyHomePage extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text(\"Home Page\"),\ncenterTitle: true,\nbackgroundColor: Colors.green[300],\n),\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nElevatedButton(\nonPressed: () {\nNavigator.of(context)\n.push(MaterialPageRoute(builder: (context) =&gt; Page1()));\n},\nchild: const Text(\"Next Page\"))\n],\n),\n),\n);\n}\n}\n</code></pre> <p>Kode ini akan menghasilkan tampilan tombol yang apabila diklik akan berpindah ke page selanjutnya. Selanjutnya pada <code>page1.dart</code> buat seperti ini:</p> page1.dart<pre><code>// ignore_for_file: use_key_in_widget_constructors, prefer_const_constructors\nimport 'package:app_latihan/page2.dart';\nimport 'package:flutter/material.dart';\nclass Page1 extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text(\"Halaman 1\"),\ncenterTitle: true,\nbackgroundColor: Colors.green[300],\n),\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: ElevatedButton(\nonPressed: () {\nNavigator.of(context)\n.push(MaterialPageRoute(builder: (context) =&gt; Page2()));\n},\nchild: const Text(\"Next Page\")),\n),\nElevatedButton(\nonPressed: () {\nNavigator.pop(context);\n},\nchild: const Text(\"Back\"))\n],\n),\n),\n);\n}\n}\n</code></pre> <p>lalu pada <code>page2.dart</code> :</p> page2.dart<pre><code>// ignore_for_file: use_key_in_widget_constructors, prefer_const_constructors\nimport 'package:app_latihan/page3.dart';\nimport 'package:flutter/material.dart';\nclass Page2 extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text(\"Halaman 2\"),\ncenterTitle: true,\nbackgroundColor: Colors.green[300],\n),\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: ElevatedButton(onPressed: () {\nNavigator.of(context)\n.push(MaterialPageRoute(builder: (context) =&gt; Page3()));\n}, child: const Text(\"Next Page\")),\n),\nElevatedButton(onPressed: () {\nNavigator.pop(context);\n}, child: const Text(\"Back\"))\n],\n),\n),\n);\n}\n}\n</code></pre> <p>dan yang terakhir <code>page3.dart</code>:</p> page3.dart<pre><code>// ignore_for_file: use_key_in_widget_constructors, prefer_const_constructors\nimport 'package:app_latihan/main.dart';\nimport 'package:flutter/material.dart';\nclass Page3 extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text(\"Halaman 3\"),\ncenterTitle: true,\nbackgroundColor: Colors.green[300],\n),\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: ElevatedButton(\nonPressed: () {\nNavigator.pop(context);\n},\nchild: const Text(\"Back\")),\n),\nElevatedButton(\nonPressed: () {\nNavigator.of(context).pushAndRemoveUntil(\nMaterialPageRoute(builder: (context) =&gt; MyHomePage()),\n(route) =&gt; false);\n},\nchild: const Text(\"Back To Home\"))\n],\n),\n),\n);\n}\n}\n</code></pre> <p>Keterangan</p> <ul> <li>Untuk perpindahan halaman kita dapat menggunakan push  </li> <li>Untuk menghapus / kembali ke halaman kita dapat menggunakan pop  </li> <li>Untuk pushAndRemoveUntil untuk berpindah ke halaman lain dan menghapus halaman - halaman sebelumnya  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/A.%20Routing/#4-memulai-route","title":"4. Memulai Route","text":"<p>Pada <code>main.dart</code> buat menjadi seperti ini:</p> main.dart<pre><code>class MyApp extends StatelessWidget {\nconst MyApp({super.key});\n@override\nWidget build(BuildContext context) {\nreturn MaterialApp(\ntitle: 'Flutter Demo',\ninitialRoute: '/',\nroutes: {\n'/': (context) =&gt; MyHomePage(),\n'/hal1': (context) =&gt; Page1(),\n'/hal2': (context) =&gt; Page2(),\n'/hal3': (context) =&gt; Page3(),\n},\n);\n}\n}\n</code></pre> <p>Keterangan</p> <ul> <li>Hapus home pada materialapp  </li> <li>Initial Route digunakan untuk memilih halaman apa yang akan dijalankan pertama kali dalam hal ini yang akan di jalankan adalah <code>'/'</code> </li> <li>Routes ini adalah tempat kita mendaftarkan halaman - halaman yang ada di dalam aplikasi kita. <code>'/'</code> adalah nama routenya &amp; dikanannya adalah class halaman yang akan di tampilkan.  </li> </ul> <p>Selanjutnya coba restart app kalian, jika hasilnya tidak ada perubahan maka routenya berhasil karena kita sudah merubah dari aplikasi tanpa route menjadi memakai route</p> <p>Merubah semua navigator </p> <p>pada <code>MyHomePage</code> ubah aksi onpressed menjadi seperti ini</p> <pre><code>body: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nElevatedButton(\nonPressed: () =&gt; Navigator.pushNamed(context, \"/hal1\"),\nchild: const Text(\"Next Page\"))\n],\n),\n),\n</code></pre> <p>dengan menggunakan route kode perpindahan halaman menjadi lebih praktis untuk digunakan.  </p> <p>Tantangan Sebagai tantangan ubahlah <code>page1.dart,page2.dart,page3.dart</code> menggunakan route  </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/A.%20Routing/#5-mengirim-data","title":"5. Mengirim Data","text":"<p>Contoh penggunaan route yang tadi hanyalah untuk perpindahan halaman saja lantas bagaimana kalau saat perpindahan harus mengirim data?  </p> <p>caranya adalah seperti ini:</p> main.dart<pre><code>body: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\nElevatedButton(\nonPressed: () =&gt; Navigator.pushNamed(context, \"/hal1\", arguments: \"Hallo Route\"),\nchild: const Text(\"Next Page\"))\n],\n),\n),\n</code></pre> <p>kalau kita lihat kita menambahkan arguments untuk mengirim data ke halaman yang lainnya. lalu untuk menangkap datanya kodenya seperti ini:  </p> page1.dart<pre><code>Widget build(BuildContext context) {\nfinal data = ModalRoute.of(context)!.settings.arguments;  //mengambil data dari argumen\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text(\"Halaman 1\"),\ncenterTitle: true,\nbackgroundColor: Colors.green[300],\n),\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\n//menampilkan datanya\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: Text(\"Data yang masuk adalah ${data}\")\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: ElevatedButton(\nonPressed: () =&gt; Navigator.pushNamed(context, \"/hal2\"),\nchild: const Text(\"Next Page\")),\n),\nElevatedButton(\nonPressed: () {\nNavigator.pop(context);\n},\nchild: const Text(\"Back\"))\n],\n),\n),\n);\n}\n</code></pre> <p>contoh diatas adalah pengiriman data tunggal / 1 buah data saja. Lantas bagaimana cara mengirim lebih dari 1?</p> <p>untuk mengirim data lebih dari 1 kita dapat membuat class terlebih dahulu. Buat folder (di dalam folder lib) dengan nama <code>model</code> &gt; lalu buat file baru dengan nama <code>user.dart</code></p> user.dart<pre><code>class User {\nString email;\nString password;\nUser(this.email, this.password);\n}\n</code></pre> <p>Setelah modelnya telah kita buat, barulah kita dapat memasukkan datanya</p> page1.dart<pre><code>Container(\nmargin: EdgeInsets.only(bottom: 20),\nchild: ElevatedButton(\nonPressed: () =&gt; Navigator.pushNamed(context, \"/hal2\", arguments: User(\"admin@gmail.com\", \"12345678\")),\nchild: const Text(\"Next Page\")),\n),\n</code></pre> <p>Jika terdapat error impport model user yang tadi sudah di buat,untuk mengambil datanya bisa dengan cara berikut:</p> page2.dart<pre><code>Widget build(BuildContext context) {\nfinal data = ModalRoute.of(context)!.settings.arguments as User; //ambil data\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text(\"Halaman 2\"),\ncenterTitle: true,\nbackgroundColor: Colors.green[300],\n),\nbody: Center(\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.center,\nchildren: [\n//menampilkan data\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: Text(\"Email antum adalah ${data.email}\")\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: ElevatedButton(\nonPressed: () =&gt; Navigator.pushNamed(context, \"/hal3\"),\nchild: const Text(\"Next Page\")),\n),\nElevatedButton(\nonPressed: () {\nNavigator.pop(context);\n},\nchild: const Text(\"Back\"))\n],\n),\n),\n);\n}\n</code></pre> <p>Jalankan kembali &amp; lihat perubahannya  </p> <p>Keterangan</p> <ul> <li>dengan menggunakan model, data kita akan lebih enak untuk di panggil</li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/B.%20Data_JSON/","title":"B. Data JSON","text":""},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/B.%20Data_JSON/#1-data-json","title":"1. Data JSON","text":"<p>Pada pertemuan kali ini kita akan membahas mengenai data json. Kita akan membuat data json kita sendiri &amp; memanipulasikan data tersebut. Yang pertama kita lakukan adalah membuat file baru dengan nama <code>table_user.dart</code>. Sebelum kita mulai install terlebih dahulu package data table 2 Terminal<pre><code>pub add data_table_2\n</code></pre>  Selanjutnya kita akan membuat tampilannya</p> table_user.dart<pre><code>// ignore_for_file: sized_box_for_whitespace, prefer_const_constructors, prefer_is_empty, prefer_const_literals_to_create_immutables, avoid_print, sort_child_properties_last\nimport 'package:flutter/material.dart';\nclass TableUser extends StatefulWidget {\nconst TableUser({super.key});\n@override\nState&lt;TableUser&gt; createState() =&gt; _TableUserState();\n}\nclass _TableUserState extends State&lt;TableUser&gt; {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nappBar: AppBar(\ntitle: const Text(\"Data User\"),\ncenterTitle: true,\nbackgroundColor: Colors.green[300],\n),\nbody: Container(\npadding: const EdgeInsets.all(40),\nchild: SingleChildScrollView(\nchild: Column(children: [\nContainer(\nwidth: MediaQuery.of(context).size.width,\nchild: DataTable(\ncolumns: [\nDataColumn(label: Text(\"No\")),\nDataColumn(label: Text(\"Email\")),\nDataColumn(label: Text(\"Action\")),\n],\nrows: List.generate(\n10,\n(index) =&gt; DataRow(cells: [\nDataCell(Text((index + 1).toString())),\nDataCell(Text(\"Tes@gmail.com\")),\nDataCell(Row(\nchildren: [\nIconButton(\nonPressed: () {},\nicon: Icon(Icons.edit)),\nIconButton(\nonPressed: (){},\nicon: Icon(Icons.delete))\n],\n))\n]))),\n)\n]),\n),\n),\nfloatingActionButtonLocation: FloatingActionButtonLocation.endFloat,\nfloatingActionButton: FloatingActionButton(\nonPressed: () {},\nchild: Icon(Icons.add),\nbackgroundColor: Colors.green,\n),\n);\n}\n}\n</code></pre> <p>Selanjutnya kita akan mendaftarkan tampilan yang sudah kita buat di <code>main.dart</code></p> main.dart<pre><code>routes: {\n'/': (context) =&gt; MyHomePage(),\n'/hal1': (context) =&gt; Page1(),\n'/hal2': (context) =&gt; Page2(),\n'/hal3': (context) =&gt; Page3(),\n'/user':(context) =&gt; TableUser()\n}\n</code></pre> <p>Lalu di bawah tombol next page kita akan membuat tombol untuk ke tabel user  </p> <pre><code>children: [\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: ElevatedButton(\nonPressed: () =&gt; Navigator.pushNamed(context, \"/hal1\", arguments: \"Hallo Route\"),\nchild: const Text(\"Next Page\")),\n),\nElevatedButton(\nonPressed: () =&gt; Navigator.pushNamed(context, \"/user\"),\nchild: const Text(\"Table User\"),\n)\n]\n</code></pre> <p>jika dijalankan, bentuk tampilannya seperti ini:  </p> <p> </p> <p>Keterangan</p> <ul> <li>List generate digunakan untuk perulangan didalam children  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/B.%20Data_JSON/#2-membuat-model","title":"2. Membuat Model","text":"<p>Selanjutnya kita akan membuat model datanya silahkan pada folder lib buat folder baru dengan nama model &gt; lalu didalam folder model buat folder baru dengan nama <code>user.dart</code>. Ketikan kodenya seperti ini:</p> user.dart<pre><code>class User {\nString email;\nString password;\nUser(this.email, this.password);\n}\nList&lt;User&gt; dataUser = [\nUser(\"user123@gmail.com\", \"abc\"),\nUser(\"user456@gmail.com\", \"def\"),\nUser(\"user789@gmail.com\", \"ghi\")\n];\n</code></pre> <p>untuk pembuatan model hampir mirip dengan interface yang ada di nodejs kalau di nodejs untuk mendeklarasikan tipe dapat menggunakan <code>:</code> sedangkan flutter dapat menggunakan <code>&lt;&gt;</code> seperti tag html.  </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/B.%20Data_JSON/#3-menampilkan-data-json","title":"3. Menampilkan Data JSON","text":"<p>Untuk menampilkan data json kita akan memulai mengedit pada file <code>table_user.dart</code> </p> table_user.dart<pre><code>body: Container(\npadding: const EdgeInsets.all(40),\nchild: SingleChildScrollView(\nchild: Column(children: [\ndataUser.length != 0\n? Container(\nwidth: MediaQuery.of(context).size.width,\nchild: DataTable(\ncolumns: [\nDataColumn(label: Text(\"No\")),\nDataColumn(label: Text(\"Email\")),\nDataColumn(label: Text(\"Action\")),\n],\nrows: List.generate(\ndataUser.length,\n(index) =&gt; DataRow(cells: [\nDataCell(Text((index + 1).toString())),\nDataCell(Text(dataUser[index].email)),\nDataCell(Row(\nchildren: [\nIconButton(\nonPressed: () {},\nicon: Icon(Icons.edit)),\nIconButton(\nonPressed: () {},\nicon: Icon(Icons.delete))\n],\n))\n]))),\n)\n: Container(\nmargin: EdgeInsets.only(top: 50),\nchild: Center(child: Text(\"Data Kosong\")),\n),\n]),\n),\n)\n</code></pre> <p>Keterangan</p> <ul> <li>Jika error atau warning silahkan klik saja lampu kuning.  </li> <li>Sebelumnya kita menampilkan tabel dengan data langsung sedangkan sekarang kita menampilkan tabel berdasarkan data user yang telah kita buat di model.  </li> <li>untuk memberikan validasi disini juga ada kondisi jika datanya tidak ada maka akan menampilkan data kosong.  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/B.%20Data_JSON/#4-menambahkan-data-json","title":"4. Menambahkan Data JSON","text":"<p>Untuk menambahkan data user di aplikasi yang kita buat, kita harus membuat form / inputnya terlebih dahulu baru nantinya kita dapat memberikan proses add Jsonnya.  </p> <p>Kita akan mulai dari membuat tampilan pop up, taruh kode ini diatas <code>@override Widget build</code> table_user.dart<pre><code>TextEditingController email = TextEditingController();\nTextEditingController pw = TextEditingController();\nshowModal(User? data, int? index) {\nAlertDialog alert = AlertDialog(\ntitle: Text(\"Add Data\"),\ncontent: Container(\nheight: 150,\nchild: Column(\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: TextField(\ncontroller: email,\ndecoration: InputDecoration(hintText: \"example@email.com\"),\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: TextField(\ncontroller: pw,\nobscureText: true,\ndecoration: InputDecoration(hintText: \"***********\")),\n),\n],\n),\n),\nactions: [\nElevatedButton(\nonPressed: () {},\nchild: Text(\n\"Save\",\nstyle: TextStyle(color: Colors.white),\n),\nstyle: ElevatedButton.styleFrom(backgroundColor: Colors.blue)),\nElevatedButton(\nonPressed: () =&gt; Navigator.pop(context),\nchild: Text(\n\"Cancel\",\nstyle: TextStyle(color: Colors.white),\n),\nstyle: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n),\n],\n);\nreturn showDialog(context: context, builder: (context) =&gt; alert);\n}\n</code></pre></p> <p>Keterangan</p> <ul> <li>Untuk membuat form tentunya kita harus membutuhkan controller agar kita bisa mendapatkan datanya  </li> <li>Show modal ada 2 parameter yang sifatnya <code>?</code> yakni null safety yang sifatnya boleh diisi atau di null (kosong) kan  </li> <li>Terdapat 3 area pada showDialog yakni title, content, action  </li> </ul> <p>Selanjutnya kita akan membuat prosesnya  </p> table_user.dart<pre><code>saveData() {\ndataUser.add(User(email.text, pw.text));\nNavigator.pushReplacementNamed(context, \"/user\");\n}\n</code></pre> <p>Lalu taruh pada onpressed  </p> <pre><code>ElevatedButton(\nonPressed: () =&gt; saveData(),\nchild: Text(\n\"Save\",\nstyle: TextStyle(color: Colors.white),\n),\nstyle: ElevatedButton.styleFrom(backgroundColor: Colors.blue)),\n</code></pre> <p>Keterangan</p> <ul> <li>Untuk menambahkan data didalam list/array kita dapat menggunakan <code>add</code> </li> <li>Setelah data disimpan kita refresh halaman kita agar data yang baru bisa ditampilkan  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/B.%20Data_JSON/#5-mengedit-data-json","title":"5. Mengedit Data JSON","text":"<p>Untuk mengedit data list kita akan menampilkan data user 1annya terlebih dahulu baru kita dapat merubahnya. Kita akan buat ketika icon pencilnya di klik akan memunculkan pop up yang sudah ada datanya caranya :  </p> table_user.dart<pre><code>IconButton(\nonPressed: () =&gt; showModal(dataUser[index], index),\nicon: Icon(Icons.edit)\n),\n</code></pre> <p>Pada tombol edit kita harus mengirimkan data user berserta indexnya agar nantinya kita bisa menampilkan data yang kita pilih &amp; kita dapat merubahnya  </p> <p>Agar showmodal bisa untuk merubah data kita harus ubah sedikit: table_user.dart<pre><code>showModal(User? data, int? index) {\nif (data != null) {\nemail.text = data.email;\npw.text = data.password;\n}else{\nemail.text = \"\";\npw.text = \"\";\n}\nAlertDialog alert = AlertDialog(\ntitle: Text(data == null ? \"Add Data\" : \"Edit Data\"),\ncontent: Container(\nheight: 150,\nchild: Column(\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: TextField(\ncontroller: email,\ndecoration: InputDecoration(hintText: \"example@email.com\"),\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: TextField(\ncontroller: pw,\nobscureText: true,\ndecoration: InputDecoration(hintText: \"***********\")),\n),\n],\n),\n),\nactions: [\nElevatedButton(\nonPressed: () =&gt; data != null \n? editData(index!) \n: email.text != \"\" &amp;&amp; pw.text != \"\" \n? saveData() \n: null,\nchild: Text(\n\"Save\",\nstyle: TextStyle(color: Colors.white),\n),\nstyle: ElevatedButton.styleFrom(backgroundColor: Colors.blue)),\nElevatedButton(\nonPressed: () =&gt; Navigator.pop(context),\nchild: Text(\n\"Cancel\",\nstyle: TextStyle(color: Colors.white),\n),\nstyle: ElevatedButton.styleFrom(backgroundColor: Colors.red),\n),\n],\n);\nreturn showDialog(context: context, builder: (context) =&gt; alert);\n}\n</code></pre></p> <p>Jika dicopy maka akan error karena fungsi edit belum dibuat oleh karena itu masukkan kode ini:  </p> <pre><code>editData(int index) {\ndataUser[index].email = email.text;\ndataUser[index].password = pw.text;\nNavigator.pushReplacementNamed(context, \"/user\");\n}\n</code></pre> <p>Keterangan</p> <ul> <li>Pada showmodal kita memberikan kondisi dimana ketika parameter data terdeteksi mempunyai value maka controller pada input kita perbaharui agar datanya dapat ditampilkan, dan memberikan beberapa kondisi yang lain seperti judul modal &amp; onpressed pada tombol  </li> <li>Untuk merubah data pada list kita tinggal memberikan indexnya dan data apa yang mau dirubah</li> <li>Sama seperti add setelah proses edit kita dapat melakukan refresh  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/B.%20Data_JSON/#6-menghapus-data-json","title":"6. Menghapus Data JSON","text":"<p>Untuk menghapus data list kita akan membuat tombol delete ketika di klik akan menghapus data yang berada di dalam list. Masukkan kode ini di bawah <code>editData</code> </p> table_user.dart<pre><code>deleteData(int index){\ndataUser.removeAt(index);\nNavigator.pushReplacementNamed(context, \"/user\");\n}\n</code></pre> <p>Lalu berikan proses untuk menghapus datanya tersebut  </p> <pre><code>IconButton(\n  onPressed: () =&gt; deleteData(index),\n  icon: Icon(Icons.delete))\n</code></pre> <p>Keterangan</p> <ul> <li><code>removeAt</code> digunakan untuk menghapus data berdasarkan index nya  </li> <li>jangan lupa untuk merefresh nya</li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/C.%20Latihan_JSON/","title":"C. Latihan JSON","text":"<p>Pada latihan kali ini buatkanlah CRUD JSON dengan data json seperti ini:  </p> Latihan JSON<pre><code>{\nnamaItem: String,\nhargaItem: int,\nstatus: boolean, //aktif || tidak aktif\n}\n</code></pre> <p>Sebagai tambahan challange buatlah tambahan seperti ini: 1. Buat lah search untuk mencari item yang diinginkan 2. Buatlah sort harga (harga terendah &amp; harga tertinggi) 3. Buatlah sort yang statusnya aktif &amp; tidak aktif  </p> <p>Note : Jangan Lanjut Ke Materi Berikutnya Jika Latihan Ini Belum Selesai &amp; Jika Stuck / Binggung Silahkan Konsultasikan Via Japri</p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/1.%20Persiapan%20Project/","title":"1. Persiapan Project","text":"<p>Pada Bab API ini kita akan mempelajari bagaimana mengambil data dari API &amp; selain itu kita akan membuat sebuah project yakni travel app. Maka dari itu buat project baru dengan nama <code>travel_app</code>. Kemudian buat beberapa folder baru seperti ini :  </p> <p> </p> <p>Untuk tampilan project yang kita kerjakan sudah tersedia di Figma </p> <p>Untuk assetnya bisa didownload Disini</p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/10.%20Latihan%20Get%20API/","title":"10. Latihan Get API","text":"<p>Setelah kita belajar bagaimana cara menampilkan data kategori sekarang saatnya kita latihan menampilkan data dari API sendiri. </p> <ol> <li>Tampilkan data wisata favorit dari url <code>http://localhost:457/wisata/list</code> dengan parameter favorit = true  </li> <li>Setelah berhasil temapilkan kembali data wisata pada Popular package (tanpa parameter)</li> </ol>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/2.%20Membuat%20Splash%20Screen/","title":"2. Membuat Splash Screen","text":""},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/2.%20Membuat%20Splash%20Screen/#1-atur-pubspec","title":"1. Atur Pubspec","text":"<p>Hal yang pertama yang akan kita mulai untuk memulai project ini adalah membuat splash screen maka dari itu buatlah sebuah folder baru dengan nama assets &amp; di dalam folder assets buat folder baru kembali dengan nama img. Daftarkan folder yang sudah dibuat pada <code>pubspec.yaml</code> </p> <p>pubspec.yaml<pre><code>assets:\n- assets/img/\n</code></pre> harap diperhatikan jarak tabnya jika menyalin kode ini  </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/2.%20Membuat%20Splash%20Screen/#2-buat-file","title":"2. Buat File","text":"<p>Pada folder ui buat file baru dengan nama <code>splashscreen.dart</code> dan <code>home.dart</code> lalu buat kodenya seperti ini :  </p> <p>home.dart<pre><code>import 'package:flutter/material.dart';\nclass Home extends StatelessWidget {\nconst Home({super.key});\n@override\nWidget build(BuildContext context) {\nreturn const Placeholder();\n}\n}\n</code></pre> Lakukan hal yang sama pada <code>splashscreen.dart</code> </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/2.%20Membuat%20Splash%20Screen/#3-atur-main","title":"3. Atur Main","text":"<p>Untuk membuat splashscreen kuncinya pada file <code>main.dart</code>. Buatlah main menjadi seperti ini  :</p> main.dart<pre><code>// ignore_for_file: prefer_const_constructors, use_key_in_widget_constructors\nimport 'package:flutter/material.dart';\nimport 'package:travel_app/ui/home.dart';\nimport 'package:travel_app/ui/splashscreen.dart';\nvoid main() {\nrunApp(MyApp());\n}\nclass MyApp extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn FutureBuilder(\nfuture: Future.delayed(Duration(seconds: 3)),\nbuilder: (context, snapshot) {\nif (snapshot.connectionState == ConnectionState.done) {\nreturn MaterialApp(\ntitle: 'Flutter Demo',\ndebugShowCheckedModeBanner: false,\ninitialRoute: '/',\nroutes: {\n'/': (context) =&gt; Home(),\n'/splash': (context) =&gt; SplashScreen()\n},\n);\n}\nreturn SplashScreen();\n});\n}\n}\n</code></pre> <p>Keterangan</p> <ul> <li>Jika ada error pada <code>widget_test.dart</code> hapus saja constnya  </li> <li>Disini kita menggunakan builder yakni Future Builder yang merupakan sebuah proses yang akan memproses kejadian yang akan datang / tidak harus dikerjakan sekarang. Kenapa menggunkan future builder ? karena kita membutuhkan aplikasi berhenti(delay) agar splashscreen dapat di lihat oleh pengguna  </li> <li>Future builder memiliki 2 parameter yang harus kita isi yakni <code>future</code> : prosesnya dan <code>builder</code> : aksinya.  </li> <li><code>connectionState</code> : adalah sebuah kondisi future yang kita bisa dapatnya. Kondisi di dalam future ada 4 active, done, none, waiting. jadi untuk kode diatas menyatakan jika future builder telah menyelesaikan prosesnya (delay 3 detik) maka connectionStatenya yang sebelumnya waiting akan berubah menjadi done.  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/2.%20Membuat%20Splash%20Screen/#4-membuat-tampilan-splash-screen","title":"4. Membuat Tampilan Splash Screen","text":"<p>Setelah pengaturan splashscreen sudah selesai kita atur selanjutnya tinggal tampilan dari splashscreen tersebut yang harus kita buat. Maka dari itu masukkan kode dibawah ini :  </p> splashscreen.dart<pre><code>// ignore_for_file: prefer_const_constructors, avoid_unnecessary_containers, sized_box_for_whitespace\nimport 'package:flutter/material.dart';\nclass SplashScreen extends StatelessWidget {\nconst SplashScreen({super.key});\n@override\nWidget build(BuildContext context) {\nreturn MaterialApp(\ndebugShowCheckedModeBanner: false,\nhome: Scaffold(\nbody: Column(\nchildren: [\nContainer(\nheight: MediaQuery.of(context).size.height * 0.9,\nchild: Center(child: Image.asset(\"assets/img/traver.png\"))),\nCenter(\nchild: Text(\"Version 1.1.0\"),\n)\n],\n),\n),\n);\n}\n}\n</code></pre>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/3.%20Introduction%20Screen/","title":"3. Introduction Screen","text":""},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/3.%20Introduction%20Screen/#1-persiapan-introduction-screen","title":"1. Persiapan Introduction Screen","text":"<p>Untuk memulai membuat introduction screen ada beberapa package yang harus kita install :</p> terminal<pre><code>pub add introduction_screen\npub add google_fonts\n</code></pre> <p>Keterangan</p> <ul> <li><code>introduction_screen</code> : Package yang menyediakan tampilan introduction  </li> <li><code>google_fonts</code> : Font dari aplikasi yang akan kita buat  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/3.%20Introduction%20Screen/#2-membuat-tampilan-introduction-screen","title":"2. Membuat Tampilan Introduction Screen","text":"<p>Kita akan membuat tampilan yang akan muncul ketika splash screen selesai berjalan yang bentuk tampilannya adalah seperti ini :  </p> <p> </p> <p>maka dari itu buat file baru pada folder ui dengan nama <code>introduction.dart</code></p> introduction.dart<pre><code>// ignore_for_file: use_key_in_widget_constructors, prefer_const_constructors\nimport 'package:flutter/material.dart';\nclass Page1 extends StatelessWidget {\n@override\nWidget build(BuildContext context) {\nreturn Scaffold();\n}\n}\n</code></pre> <p>Daftarkan introduction pada route  </p> main.dart<pre><code>'/intro': (context) =&gt; Introduction()\n</code></pre> <p>Selanjutnya silahkan tulis kode introductionnya seperti ini:  </p> introduction.dart<pre><code>import 'package:flutter/material.dart';\nimport 'package:google_fonts/google_fonts.dart';\nimport 'package:introduction_screen/introduction_screen.dart';\nclass Introduction extends StatelessWidget {\nconst Introduction({super.key});\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nbody: Container(\nchild: IntroductionScreen(\npages: [\nPageViewModel(\ntitle: \"\",\nbodyWidget: Container(\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Image.asset(\"assets/img/white-traver.png\",\nheight: 50),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Text(\n\"Lets explore the world\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 70,\ncolor: Colors.white,\nheight: 1.2)),\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: Text(\n\"Lets explore the world with just a few clicks\",\nstyle: GoogleFonts.poppins(\ntextStyle:\nTextStyle(fontSize: 20, color: Colors.white)),\n),\n),\n],\n),\n),\nimage: Stack(\nchildren: [\nContainer(\nheight: MediaQuery.of(context).size.height,\ndecoration: BoxDecoration(\nimage: DecorationImage(\nimage: AssetImage(\"assets/img/page1.jpg\"),\nfit: BoxFit.cover),\n)),\nContainer(\nheight: MediaQuery.of(context).size.height,\ndecoration: BoxDecoration(\ngradient: LinearGradient(\ncolors: [Colors.transparent, Colors.black54],\nbegin: Alignment.topCenter,\nend: Alignment.bottomCenter))),\n],\n),\ndecoration: PageDecoration(\nfullScreen: true,\ntitlePadding: EdgeInsets.only(bottom: 0),\nbodyFlex: 1)),\nPageViewModel(\ntitle: \"\",\nbodyWidget: Container(\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Image.asset(\"assets/img/white-traver.png\",\nheight: 50),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Text(\n\"Visit tourist attractions\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 70,\ncolor: Colors.white,\nheight: 1.2)),\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: Text(\n\"Find thousands of tourist destinations ready for you visit\",\nstyle: GoogleFonts.poppins(\ntextStyle:\nTextStyle(fontSize: 20, color: Colors.white)),\n),\n),\n],\n),\n),\nimage: Stack(\nchildren: [\nContainer(\nheight: MediaQuery.of(context).size.height,\ndecoration: BoxDecoration(\nimage: DecorationImage(\nimage: AssetImage(\"assets/img/page2.jpg\"),\nfit: BoxFit.cover),\n)),\nContainer(\nheight: MediaQuery.of(context).size.height,\ndecoration: BoxDecoration(\ngradient: LinearGradient(\ncolors: [Colors.transparent, Colors.black54],\nbegin: Alignment.topCenter,\nend: Alignment.bottomCenter))),\n],\n),\ndecoration: PageDecoration(\nfullScreen: true,\ntitlePadding: EdgeInsets.only(bottom: 0),\nbodyFlex: 1)),\nPageViewModel(\ntitle: \"\",\nbodyWidget: Container(\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Image.asset(\"assets/img/white-traver.png\",\nheight: 50),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Text(\n\"Get ready for next trip\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 70,\ncolor: Colors.white,\nheight: 1.2)),\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 20),\nchild: Text(\n\"Let's Goo, start trip\",\nstyle: GoogleFonts.poppins(\ntextStyle:\nTextStyle(fontSize: 20, color: Colors.white)),\n),\n),\n],\n),\n),\nimage: Stack(\nchildren: [\nContainer(\nheight: MediaQuery.of(context).size.height,\ndecoration: BoxDecoration(\nimage: DecorationImage(\nimage: AssetImage(\"assets/img/page3.jpg\"),\nfit: BoxFit.cover),\n)),\nContainer(\nheight: MediaQuery.of(context).size.height,\ndecoration: BoxDecoration(\ngradient: LinearGradient(\ncolors: [Colors.transparent, Colors.black54],\nbegin: Alignment.topCenter,\nend: Alignment.bottomCenter))),\n],\n),\ndecoration: PageDecoration(\nfullScreen: true,\ntitlePadding: EdgeInsets.only(bottom: 0),\nbodyFlex: 1)),\n],\nshowSkipButton: true,\nskip: const Text(\"Skip\", style: TextStyle(color: Colors.white)),\nnext: const Text(\"Next\", style: TextStyle(color: Colors.white)),\ndone: const Text(\"Done\",\nstyle:\nTextStyle(fontWeight: FontWeight.w700, color: Colors.white)),\nonDone: () =&gt;\nNavigator.pushNamedAndRemoveUntil(context, '/', (route) =&gt; false),\nonSkip: () =&gt;\nNavigator.pushNamedAndRemoveUntil(context, '/', (route) =&gt; false),\ndotsDecorator: DotsDecorator(\nsize: const Size.square(10.0),\nactiveSize: const Size(50.0, 10.0),\nactiveColor: const Color.fromARGB(255, 224, 214, 214),\ncolor: Colors.white,\nspacing: const EdgeInsets.symmetric(horizontal: 3.0),\nactiveShape: RoundedRectangleBorder(\nborderRadius: BorderRadius.circular(25.0)),\n),\n),\n),\n);\n}\n}\n</code></pre> <p>Keterangan</p> <ul> <li>untuk tampilan memang tidak mirip karena masih jarang package flutter yang dapat menangani introduction screen &amp; harus membuatnya secara menual  </li> <li>widget <code>IntroductionScreen</code> adalah widget yang telah kita download dari package introduction_screen yang menyediakan tampilan yang bisa di slide / di geser untuk memberikan informasi ke pengguna sebelum memulai aplikasi  </li> <li>di dalam widget <code>IntroductionScreen</code> ada beberapa properti seperti :  </li> <li><code>pages</code> : berbentuk <code>List&lt;PageViewModel&gt;</code> yang merupakan kode untuk kita menempatkan tampilan introduction screen  </li> <li><code>PageViewModel</code> : Widget untuk menampilkan introduction screen yang didalamnya terdiri dari <code>title,image,decoration,body||bodywidget</code> untuk body kita bisa memilih salah satu kalau body hanya berupa text / string dan kalau body widget berupa bisa kita isi dengan widget. Dan semua pengaturan tampilan introduction screen terletak pada <code>decoration: PageDecoration</code>.  </li> <li><code>showSkipButton</code> : pilihan untuk menampilkan tombol skip / tidak (bersifat boolean)  </li> <li><code>skip, next, done</code> : Berisikan widget untuk mengatur fungsi skip, next dan done  </li> <li><code>onDone</code> : sebuah proses jika sudah selesai melihat tampilan introduction screen pengguna mau diarahkan kemana  </li> <li><code>onSkip</code> : sebuah proses yang hampir mirip dengan onDone, jika pengguna menekan tombol skip mau diarahkan kemana  </li> <li><code>dotsDecorator</code> : Pengaturan garis &amp; titik yang berada pada introduction_screen baik itu ukuran, shape, warna, dllnya  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/4.%20UI%20Login%20%26%20Register/","title":"4. UI Login & Register","text":"<p>Pada pengerjaan aplikasi travel ini selanjutnya kita akan membuat tampilan dari Login dan juga Register. Untuk pembuatannya disini tidak ada kode yang bisa di copy paste melainkan kalian yang akan membuat sendiri tampilannya  </p> <p>Keterangan</p> <ul> <li>Sebelum membuat tampilan buatlah terlebih dahulu filenya bernama <code>login.dart</code> &amp; <code>register.dart</code> </li> <li>Buat class statefull widget untuk kedua file ini  </li> <li>Lalu daftarkan pada route dengan nama <code>/login</code> &amp; <code>/register</code> </li> <li>Buat aksi pada introduction <code>onSkip</code> &amp; <code>onDone</code> arahkan &amp; replace ke halaman login  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/4.%20UI%20Login%20%26%20Register/#ui-login","title":"UI Login","text":"<p>Bentuk tampilan loginnya adalah seperti ini:  </p> <p> </p> <p>Ketentuan</p> <ul> <li>Setiap size &amp; jarak (yang sizenya gede) wajib menggunakan media query agar tampilannya bisa dijalankan di berbagai device  </li> <li>Password bisa di show &amp; hide dengan menggunakan <code>suffix icon</code> </li> <li>Remember me dapat di centang  </li> <li>Tombol <code>Create Account</code> jika di klik akan mengarah ke <code>/register</code> </li> <li>Untuk assets bisa di download Disini </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/4.%20UI%20Login%20%26%20Register/#ui-register","title":"UI Register","text":"<p>Bentuk tampilan registernya adalah seperti ini:  </p> <p> </p> <p>Ketentuan</p> <ul> <li>Setiap size &amp; jarak (yang sizenya gede) wajib menggunakan media query agar tampilannya bisa dijalankan di berbagai device  </li> <li>Password &amp; Konfirmasi Password bisa di show &amp; hide dengan menggunakan <code>suffix icon</code> </li> <li>Tombol <code>Back To Login</code> jika di klik akan kembali ke halaman <code>/login</code> </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/5.%20Register%20Proses/","title":"5. Register Proses","text":"<p>Setelah tampilan login &amp; register sudah dibuat langkah selanjutnya adalah kita akan membuat proses registernya menggunakan API yang nanti disediakan.  </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/5.%20Register%20Proses/#1-persiapan-proses-api","title":"1. Persiapan Proses API","text":"<p>Langkah yang pertama sebelum kita menerapkan proses ke tampilan kita, kita harus mempunyai API terlebih dahulu dalam hal ini untuk API nya sudah disediakan di Github. Silahkan di clone terlebih dahulu dan kalau sudah lakukan beberapa hal berikut ini :  </p> <ol> <li>Buatlah database dengan nama travel pada laptop masing - masing  </li> <li>Jalankan <code>npm i</code> pada API yang sudah di clone  </li> <li>Jalankan apinya dengan cara <code>npm run start:dev</code> </li> <li> <p>Jalankan aplikasi postman, import file <code>travel.postman_collection.json</code> yang berada pada project API  </p> <p> </p> </li> <li> <p>Buka kembali cmd / terminal dan ketikan <code>ipconfig</code>. Jika berhasil tampilannya akan muncul seperti ini : </p> <p> </p> <p>Keterangan</p> <ul> <li>Setiap laptop akan berbeda ipnya  </li> <li>Copy ip yang IPv4 address <code>10.100.200.26</code> </li> <li>Jalankan pada browser / postman dengan url <code>10.100.200.26:457</code>. <code>457</code>: adalah port dari apinya  </li> <li>Jika berhasil akan menampilkan kata <code>Welcome to API Travel APP!</code> </li> <li>Kenapa disini kita tidak menggunakan localhost karena localhost yang berada pada laptop / komputer kita tidak terdeteksi di emulator / device pada saat kita menjalankan flutter maka dari itu diperlukannya sebuah IP untuk mengakses API tersebut  </li> <li>Url ini juga selain dapat dibuka di emulator / device bisa juga dibuka dikomputer / laptop lain (yang mempunyai jaringan wifi yang sama)  </li> <li>Pada saat menjalankan flutter API jangan di stop jika laptop mengalami lag atau semacamnya bisa menggunakan url dari teman dekat yang mempunyai jaringan yang sama  </li> </ul> </li> <li> <p>Install <code>http</code>,<code>flutter_dotenv</code>,<code>awesome_dialog</code> pada package flutter  </p> </li> </ol>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/5.%20Register%20Proses/#2-membuat-model","title":"2. Membuat Model","text":"<p>Sebelum membuat model kita harus menjalankan API nya terlebih dahulu, silahkan buka postman lalu jalankan API yang berada di dalam folder auth &gt; register,metode post, dan masukkan data - datanya seperti nama, email, password, konfimasiPassword gambar dibawah ini:  </p> <p> </p> <p>Dari hasil api tersebut copy hasil response dari api lalu silahkan masuk ke website app.quicktype.io </p> <p> 1. Pastekan response API di point ke 1 pada gambar 2. Ubah nama model sesuai dengan API tersebut 3. Ubah Language menjadi <code>dart</code> 4. Copy Code 5. Pada folder model buat 2 buah file baru dengan nama <code>model.dart</code> &amp; <code>register.dart</code> 6. Pastekan kode yang sudah di copy pada <code>register.dart</code> </p> <p>Setelah itu kita akan membuat file <code>model.dart</code> ini sebagai file induk dari file model - model yang lainnya.  </p> model.dart<pre><code>import 'dart:convert';\npart \"register.dart\";\n</code></pre> <p>Lalu selanjutnya pada <code>register.dart</code> ubah import dart convertnya menjadi part:  </p> register.dart<pre><code>part of \"model.dart\";\nRegister registerFromJson(String str) =&gt; Register.fromJson(json.decode(str));\nString registerToJson(Register data) =&gt; json.encode(data.toJson());\n</code></pre> <p>Keterangan</p> <ul> <li><code>quicktype</code> : website yang digunakan untuk menggenerate json menjadi model  </li> <li><code>part</code> : digunakan untuk file yang ditunjuk sebagai induk dari file - file lain  </li> <li><code>part of</code> : digunakan untuk file yang ditunjuk sebagai anak  </li> <li>Keuntungan menggunakan part adalah pada saat kita ingin memanggil model yang diingikan kita tidak perlu repot - repot lagi memanggil file modelnya cukup mengimport induknya maka anak - anaknya bisa terpanggil juga. Lalu juga dengan menggunakan part kita tidak perlu lagi menggunakan import pada anak - anaknya cukup pada induknya saja  </li> </ul> <p>quicktype memang akan menggenerate data API kita cuman ada beberapa hal yang harus kita pahami contohnya adalah penamaan class yang bisa membuat Ambigu (sama seperti widget / nama yang lainnya) maka dari itu kita harus merubah class tersebut jika kita melihatnya :  </p> <p> </p> <p>Ubahlah menjadi seperti ini :  </p> register.dart<pre><code>part of \"model.dart\";\nRegister registerFromJson(String str) =&gt; Register.fromJson(json.decode(str));\nString registerToJson(Register data) =&gt; json.encode(data.toJson());\nclass Register {\nString status;\nString message;\nDataRegister data;\nRegister({\nrequired this.status,\nrequired this.message,\nrequired this.data,\n});\nfactory Register.fromJson(Map&lt;String, dynamic&gt; json) =&gt; Register(\nstatus: json[\"status\"],\nmessage: json[\"message\"],\ndata: DataRegister.fromJson(json[\"data\"]),\n);\nMap&lt;String, dynamic&gt; toJson() =&gt; {\n\"status\": status,\n\"message\": message,\n\"data\": data.toJson(),\n};\n}\nclass DataRegister {\nDataRegister();\nfactory DataRegister.fromJson(Map&lt;String, dynamic&gt; json) =&gt; DataRegister(\n);\nMap&lt;String, dynamic&gt; toJson() =&gt; {\n};\n}\n</code></pre>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/5.%20Register%20Proses/#3-membuat-proses","title":"3. Membuat Proses","text":"<p>Setelah kita membuat model selanjutnya kita akan membuat prosesnya untuk membaca APInya. Buat file baru pada folder controller dengan nama <code>authController.dart</code></p> <p>Kita akan mulai mengatur <code>flutter_dotenv</code> terlebih dahulu. 1. Buat file baru dengan nama <code>.env</code>(pada folder project masing - masing BUKAN di folder lib) .env<pre><code>IP=http://???.???.???.???:457\n</code></pre> 2. Pada <code>pubspec.yaml</code> atur agar <code>.env</code> bisa dibaca pubspec.yaml<pre><code>assets:\n- assets/img/\n- .env\n</code></pre> 3. Pada <code>main.dart</code> ubah bagian runApp nya untuk jalankan <code>flutter_dotenv</code> main.dart<pre><code>Future main() async{\nawait dotenv.load(fileName: \".env\");\nrunApp(MyApp());\n}\n</code></pre></p> <p>Lalu pada bagian authControllernya masukkan kode ini: authController.dart<pre><code>import \"dart:convert\";\nimport \"package:flutter_dotenv/flutter_dotenv.dart\";\nimport \"package:http/http.dart\" as http;\nimport \"package:travel_app/model/model.dart\";\nclass AuthController {\nFuture registerProses(\nString nama, String email, String password, String konfirmasi) async {\nString url = \"${dotenv.env['IP']}/auth/register\";\nUri urlData = Uri.parse(url);\nMap data = {\n\"nama\": nama,\n\"email\": email,\n\"password\": password,\n\"konfirmasiPassword\": konfirmasi\n};\nvar body = json.encode(data);\nfinal respon = await http.post(urlData,\nheaders: {\"Content-Type\": \"application/json\"}, body: body);\nif (respon.statusCode == 201) {\nRegister dataRes = registerFromJson(respon.body.toString());\nreturn dataRes;\n} else {\nreturn null;\n}\n}\n}\n</code></pre></p> <p>Keterangan</p> <ul> <li>Import beberapa kebutuhan untuk proses seperti flutter_dotenv, http, dan kita panggil modelnya  </li> <li>Agar terstruktur kita dapat membuat buat class AuthController  </li> <li><code>Future</code> hampir mirip dengan function sama dengan apa yang kita gunakan di <code>main.dart</code> </li> <li>Pada registerProses membutuhkan data nama, email, password, konfimasiPassword  </li> <li><code>dotenv.env['IP']</code> : memanggil variabel env IP  </li> <li><code>Uri urlData = Uri.parse(url)</code> : karena http tidak bisa membaca string jadi kita harus ubah url (string) menjadi Uri  </li> <li><code>json.encode</code> : membuat data map menjadi json agar bisa dikirim menggunakan http  </li> <li><code>await http.post</code> : karena proses http membutuhkan waktu maka disini harus diberikan await / proses menunggu prosesnya selesai. http.post proses pengiriman data ke api dengan metode post yang membutuhkan beberapa parameter seperti url yang berbentuk Uri, body (data yang akan dikirim), dan header (jenis data yang dikirim)  </li> <li><code>respon.statusCode == 201</code> : mengecek apabila data response yang didapat status codenya adalah 201 maka dia akan menjalakan prosesnya. 201 ini bisa dilihat pada postman  </li> <li><code>Register dataRes = registerFromJson(respon.body.toString())</code> : membuat variabel yang bertipe register yang isinya adalah mengubah data response yang berupa json (mentah / belum bisa diproses) menjadi data Register yang sudah kita buatkan modelnya  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/5.%20Register%20Proses/#4-implementasi-proses-pada-tampilan","title":"4. Implementasi Proses Pada Tampilan","text":"<p>Pada tampilan <code>register.dart</code> kita akan menjalankan proses registernya. Masukkan kode ini diatas widget build    </p> <p>register.dart<pre><code>TextEditingController name = TextEditingController(),\nemail = TextEditingController(),\npassword = TextEditingController(),\nkonfirmasiPassword = TextEditingController();\nbool loading = false;\nsaveRegis() {\nsetState(() {\nloading = true;\n});\nvar dt = AuthController()\n.registerProses(\nname.text, email.text, password.text, konfirmasiPassword.text)\n.then((value) {\nif (value != null) {\nsetState(() {\nloading = false;\n});\nAwesomeDialog(\ncontext: context,\ntitle: \"Success\",\ndesc: \"Register Berhasil\",\ndialogType: DialogType.success,\nbtnOkOnPress: () =&gt; Navigator.pushNamedAndRemoveUntil(\ncontext, \"/login\", (route) =&gt; false),\n).show();\n} else {\nsetState(() {\nloading = false;\n});\nAwesomeDialog(\ncontext: context,\ntitle: \"Failed\",\ndesc: \"Register Gagal\",\ndialogType: DialogType.error,\n).show();\n}\n});\n}\n</code></pre> Pada textfield kita akan menambahkan controller yang telah dibuat sebelumnya:  </p> Text field pada register<pre><code>Container(\nmargin: EdgeInsets.only(bottom: tinggi * 0.04),\nchild: TextField(\ncontroller: name,\ndecoration: InputDecoration(\nlabel: Text(\"Name\"),\nhintText: \"Jhon Doe\",\nfocusedBorder: const OutlineInputBorder(\nborderSide: BorderSide(\ncolor: Color.fromARGB(255, 252, 211, 64)),\nborderRadius: BorderRadius.all(Radius.circular(15))),\nborder: OutlineInputBorder(\nborderRadius: BorderRadius.all(Radius.circular(15)))),\n),\n),\n</code></pre> <p>Lalu lakukan hal yang sama pada password. Pada tombol jalankan function yang sudah dibuat :</p> tombol submit register<pre><code>ElevatedButton(\nstyle: ButtonStyle(\nshape: MaterialStateProperty.all&lt;RoundedRectangleBorder&gt;(\nRoundedRectangleBorder(\nborderRadius: BorderRadius.circular(10))),\nbackgroundColor: MaterialStateProperty.resolveWith(\n(states) =&gt; Color.fromARGB(255, 252, 211, 64))),\nonPressed: () =&gt; saveRegis(),\nchild: loading\n? Center(child: CircularProgressIndicator())\n: Text(\"Submit\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 20,\nfontWeight: FontWeight.bold,\ncolor: Colors.black))))\n</code></pre> <p>Keterangan</p> <ul> <li><code>AuthController().registerProses()</code> : memanggil proses register yang berada di authcontroller  </li> <li><code>then</code> : adalah sebuah proses jika prosesnya selesai dan mempunyai nilai kembali maka akan di simpan kedalam value. valuenya disini kita cek kalau mengirimkan data akan menampilkan proses berhasil &amp; apabila tidak mengirimkan data akan menampilkan error  </li> <li>Pada tombol submit disini diberikan kondisi dimana jika loading false akan menampilkan text submit dan jika loading true (sedang menjalankan proses) maka akan menampilkan loading</li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/6.%20Latihan%20Login%20%26%20Lupa%20Password/","title":"6. Latihan Login & Lupa Password","text":"<p>Untuk proses login ini akan menjadi Latihan dimana apa yang sudah dipelajari di materi sebelumnya cobalah kalian praktekan pada login. Dimana kentuannya adalah sebagai berikut :  </p> <ol> <li>Buatlah model login (Jangan ada yang ambigu) dari api login <code>http://???.???.???.???:457/auth/login</code> </li> <li>Buatlah future baru pada authcontroller untuk proses loginnya  </li> <li>Implementasikan proses yang dibuat pada login  </li> <li>Jika login berhasil arahkan ke halaman <code>home.dart</code> </li> </ol> <p>Jika login telah berhasil dijalankan selanjutnya adalah kerjakan fitur lupa password dengan ketentuan sebagai berikut ini:  </p> <ol> <li>Buat tampilan lupa password yang berisikan text field email dan tombol submit  </li> <li>Buat 1 tampilan Thanks You dimana halaman ini nantinya akan muncul setelah tombol submit di klik  </li> <li>Untuk proses lupa password url apinya ada di postman folder Auth &gt; lupa password  </li> </ol>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/7.%20Penyimpanan%20Shared%20Preferences/","title":"7. Penyimpanan Shared Preferences","text":"<p>Seringkali kita perlu menyimpan beberapa data bersama dengan sebuah aplikasi. <code>SharedPreferences</code> memberikan sebuah opsi penyimpanan yang mungkin cocok dengan data yang kita ingin simpan. Tutorial kali ini akan membahas bagaimana mengakses dan menyimpan data menggunakan <code>SharedPreferences</code>.</p> <p>Perlu dicatat bahwa <code>SharedPreferences</code> hanya bisa menyimpan bentuk data sederhana seperti String, Double, Integer, Boolean, atau Long. Jika data yang ingin disimpan lebih kompleks, gunakan sistem database lain seperti SQL.</p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/7.%20Penyimpanan%20Shared%20Preferences/#install-package","title":"Install Package","text":"<p>Install terlebih dahulu shared preferences</p> terminal<pre><code>pub add shared_preferences\n</code></pre> <p>Setelah menginstall package yang kita ingin gunakan selanjutnya kita akan memulai menerapkan shared_preferences.</p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/7.%20Penyimpanan%20Shared%20Preferences/#menerapkan-package-pada-introduction","title":"Menerapkan Package Pada Introduction","text":"<p>Kita akan membuat aksi untuk skip &amp; done. Jadi halaman introduction ini akan muncul ketika aplikasi baru pertama kali diinstall saja. Caranya adalah seperti berikut :</p> <ol> <li>Ubahlah class <code>Introduction</code> yang sebelumnya stateless menjadi state full dengan menekan lampu kuning pada class <code>Introduction</code></li> <li>Buatlah proses untuk menjalankan SharedPreferences nya</li> </ol> introduction.dart<pre><code>class _IntroductionState extends State&lt;Introduction&gt; {\nSaveAction() async {\nfinal SharedPreferences prefs = await SharedPreferences.getInstance();\nprefs.setBool('isIntro', true);\nNavigator.pushNamedAndRemoveUntil(context, '/login', (route) =&gt; false);\n}\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\n</code></pre> <ol> <li>Jalankan prosesnya pada aksi onskip &amp; ondone    introduction.dart<pre><code> showSkipButton: true,\nskip: const Text(\"Skip\", style: TextStyle(color: Colors.white)),\nnext: const Text(\"Next\", style: TextStyle(color: Colors.white)),\ndone: const Text(\"Done\",\nstyle:\nTextStyle(fontWeight: FontWeight.w700, color: Colors.white)),\nonDone: () =&gt; SaveAction(),\nonSkip: () =&gt; SaveAction(),\ndotsDecorator: DotsDecorator(\nsize: const Size.square(10.0),\nactiveSize: const Size(50.0, 10.0),\nactiveColor: const Color.fromARGB(255, 224, 214, 214),\ncolor: Colors.white,\nspacing: const EdgeInsets.symmetric(horizontal: 3.0),\nactiveShape: RoundedRectangleBorder(\nborderRadius: BorderRadius.circular(25.0)),\n),\n</code></pre></li> </ol> <p>Pada main.dart kita akan setting ketika mempunyai data <code>isIntro</code> yang bernilai true maka akan langsung dilarikan ke login &amp; jika belum ada data <code>isIntro</code> maka akan dilarikan ke introduction. Caranya adalah seperti berikut:</p> <ol> <li>Ubah class <code>MyApp</code> yang sebelumnya stateless menjadi state full dengan menekan lampu kuning pada class <code>MyApp</code></li> <li>Lalu kita akan membuat proses untuk pengecekan datanya yang sudah disimpan pada <code>SharedPreferences</code></li> </ol> <p>main.dart<pre><code>class _MyAppState extends State&lt;MyApp&gt; {\nbool? intro;\ncekData() async {\nfinal SharedPreferences prefs = await SharedPreferences.getInstance();\nsetState(() {\nif (prefs.getBool('isIntro') != null) {\nintro = prefs.getBool('isIntro');\n}\n});\n}\n@override\nvoid initState() {\ncekData();\nsuper.initState();\n}\n@override\nWidget build(BuildContext context) {\nreturn FutureBuilder(\n.....\n</code></pre> 3. Lalu pada root kita akan membuat kondisinya</p> main.dart<pre><code>return MaterialApp(\ntitle: 'Flutter Demo',\ndebugShowCheckedModeBanner: false,\ninitialRoute: intro == null || intro == false\n? \"/intro\"\n: \"/login\",\nroutes: {\n'/': (context) =&gt; Home(),\n'/splash': (context) =&gt; SplashScreen(),\n'/intro': (context) =&gt; Introduction(),\n'/login': (context) =&gt; Login(),\n'/register': (context) =&gt; Register(),\n},\n);\n</code></pre> <p>Keterangan</p> <ul> <li>Buat variabel untuk mengecek data yang nantinya kita panggil, dan kita berikan <code>?</code> agar bisa diisi dengan null terlebih dahulu  </li> <li><code>getInstance</code> : untuk mengambil data yang disimpan pada SharedPreferences  </li> <li>Lalu data tersebut kita cek jika data intro belum tersimpan maka variabel intro masih null dan jika sudah tersimpan maka variabel intro akan berisikan true  </li> <li><code>initState</code> : proses yang akan dijalankan sebelum tampilan di render / di tampilkan  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/7.%20Penyimpanan%20Shared%20Preferences/#latihan-shared-preferences","title":"Latihan Shared Preferences","text":"<ol> <li>Pada proses login buatlah variabel shared preferences untuk menyimpan data response login (buat variabel tersebut dengan nama <code>isLogin</code>)  </li> <li>Pada route buat aksi dimana ketika ada data <code>isLogin</code> akan diarahkan langsung ke home dan tidak perlu lagi ke login</li> </ol>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/8.%20Tampilan%20Home/","title":"8. Tampilan Home","text":"<p>Setelah selesai membuat tampilan depan sekarang kita akan membuat tampilan home. Pada tampilan home ini terdapat menu &amp; beberapa widget di tampilan ini berulang maka dari itu kita akan membuat beberapa custom widget.  </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/8.%20Tampilan%20Home/#1-persiapan-tampilan-home","title":"1. Persiapan Tampilan Home","text":"<ol> <li>Buat folder baru dengan nama widget untuk menampung custom widget yang akan di buat  </li> <li>Install package baru yang bernama <code>google_nav_bar</code> untuk membuat menu  </li> <li>Buat 4 file dengan nama <code>homePage.dart</code>, <code>bookingPage.dart</code>, <code>favoritPage.dart</code>, <code>profilePage.dart</code> </li> </ol>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/8.%20Tampilan%20Home/#2-membuat-menu","title":"2. Membuat Menu","text":"<p>Yang pertama yang akan kita buat adalah mengatur halaman home &amp; membuat menunya :  </p> <p>Tulislah kode ini pada 4 page yang baru saja di buat : homePage.dart<pre><code>import 'package:flutter/material.dart';\nclass HomePage extends StatefulWidget {\nconst HomePage({super.key});\n@override\nState&lt;HomePage&gt; createState() =&gt; _HomePageState();\n}\nclass _HomePageState extends State&lt;HomePage&gt; {\n@override\nWidget build(BuildContext context) {\nreturn Column(\ncrossAxisAlignment: CrossAxisAlignment.center,\nchildren: [\nCenter(\nchild: Text(\"Home Page\"),\n)\n],\n);\n}\n}\n</code></pre></p> <p>Selanjutnya lakukan hal yang sama pada 3 file lainnya. setelah itu kita akan mengaturnya pada <code>home.dart</code>:  </p> home.dart<pre><code>class _HomeState extends State&lt;Home&gt; {\nint menu = 0;\nList lsMenu = [HomePage(), BookingPage(), FavoritPage(), ProfilePage()];\n@override\nWidget build(BuildContext context) {\nreturn Scaffold(\nbody: lsMenu[menu],\nbottomNavigationBar: Container(\npadding: EdgeInsets.symmetric(horizontal: 15, vertical: 20),\nchild: GNav(\ntabBackgroundColor: Colors.black,\nactiveColor: Colors.white,\npadding: EdgeInsets.all(10),\ngap: 8,\nonTabChange: (value) {\nsetState(() {\nmenu = value;\n});\n},\ntabs: [\nGButton(icon: Icons.home, text: \"Home\"),\nGButton(icon: Icons.near_me, text: \"Booking\"),\nGButton(icon: Icons.favorite, text: \"Favorit\"),\nGButton(icon: Icons.person, text: \"Profile\"),\n]),\n),\n);\n}\n}\n</code></pre> <p>Keterangan</p> <ul> <li>Sekarang kalau dijalankan menu - menunya sudah dapat di klik dan akan membuka halamannya  </li> <li>list menu digunakan untuk menampung halaman - halaman yang akan di tampilkan seperti home, booking, favorit dan profile  </li> <li>body akan menampilkan tampilan sesuai dengan index yang sudah di tetapkan pada menu  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/8.%20Tampilan%20Home/#3-membuat-tampilan-atas","title":"3. Membuat Tampilan Atas","text":"<p>Sekarang kita akan membuat tampilannya mulai dari atasnya terlebih dahulu seperti ini:  </p> <p> </p> homePage.dart<pre><code>class _HomePageState extends State&lt;HomePage&gt; {\n@override\nWidget build(BuildContext context) {\nvar tinggi = MediaQuery.of(context).size.height;\nvar lebar = MediaQuery.of(context).size.width;\nreturn Container(\npadding: EdgeInsets.all(20),\nchild: SingleChildScrollView(\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\n//Start hello\nContainer(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: Row(\nmainAxisAlignment: MainAxisAlignment.spaceBetween,\nchildren: [\nRow(\nchildren: [\nContainer(\nmargin: EdgeInsets.only(right: 10),\nchild: CircleAvatar(\nbackgroundColor: Color.fromARGB(255, 252, 211, 64),\nchild: Icon(Icons.person),\n),\n),\nText(\"Hello, Jhon Doe\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 20, fontWeight: FontWeight.w500)))\n],\n),\nIcon(Icons.notifications)\n],\n),\n),\n//end hello\n//start explore\nContainer(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: Text(\"Where do you want to explore today?\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 37, fontWeight: FontWeight.w700))),\n),\n//end explore\n]\n)\n)\n);\n}\n}\n</code></pre>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/8.%20Tampilan%20Home/#4-membuat-tampilan-seacrh-kategori","title":"4. Membuat Tampilan Seacrh &amp; Kategori","text":"<p>Selanjutnya adalah kita membuat tampilan search &amp; kategori. Di tampilan kategori bisa kita lihat bahwasannya tampilannya berulang jika kita membuat dengan copas kode yang sudah di buat maka akan memperpanjang kode kita. Disini kita akan menerapkan <code>Custom Widget</code> tapi sebelumnya kita akan membuat tampilan search terlebih dahulu :  </p> homePage.dart<pre><code>//start search\nContainer(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: TextField(\ndecoration: InputDecoration(\nhintText: \"Search destination\",\nsuffixIcon: Icon(Icons.search),\nborder: OutlineInputBorder(\nborderRadius: BorderRadius.all(Radius.circular(15))),\nhintStyle: GoogleFonts.poppins(fontSize: 20)),\n),\n),\n//end search\n</code></pre> <p>Selanjutnya pada folder widget buat file baru dengan nama <code>kategori.dart</code> dan <code>judul.dart</code> lalu tuliskan kode - kode ini :  </p> widget judul.dart<pre><code>Widget Judul(String judul, String sub, tinggi) {\nreturn Container(\nmargin: EdgeInsets.only(bottom: tinggi * 0.02),\nchild: Row(\nmainAxisAlignment: MainAxisAlignment.spaceBetween,\nchildren: [\nText(judul,\nstyle: GoogleFonts.poppins(\ntextStyle:\nTextStyle(fontSize: 20, fontWeight: FontWeight.w600))),\nText(sub,\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(fontSize: 18, color: Colors.grey)))\n],\n),\n);\n}\n</code></pre> <p>Keterangan</p> <ul> <li>Nama custom widget yang kita buat adalah Judul (usahakan huruf depannya besar)  </li> <li>Pada widget ini mempunyai parameter (judul : untuk judul sectionnya, sub : untuk sub judul yang berada di sebelah kanan, dan tinggi : untuk mengatur tingginya)  </li> </ul> widget kategori.dart<pre><code>Widget Category(String name, String img, lebar) {\nreturn Container(\npadding: EdgeInsets.all(10),\ndecoration: BoxDecoration(\nborder: Border.all(color: Colors.grey),\nborderRadius: BorderRadius.circular(20)),\nchild: Row(\nchildren: [\nContainer(\nmargin: EdgeInsets.only(right: lebar * 0.01),\nchild: Image.network(img)),\nText(name,\nstyle: GoogleFonts.poppins(\ntextStyle:\nTextStyle(fontSize: 20, fontWeight: FontWeight.w600))),\n],\n),\n);\n}\n</code></pre> <p>Keterangan</p> <ul> <li>Nama custom widget yang kita buat adalah Category (usahakan huruf depannya besar)  </li> <li>Pada widget ini mempunyai parameter (name : untuk nama kategorinya, img : untuk gambar kategorinya, dan lebar : untuk mengatur lebarnya)  </li> </ul> <p>Lalu kita implementasikan widget yang telah kita buat ke dalam home page :  </p> homePage.dart<pre><code>//start category\nJudul(\"Choose Category\", \"See All\", tinggi),\nContainer(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: SingleChildScrollView(\nscrollDirection: Axis.horizontal,\nchild: Wrap(spacing: 20, children: [\nCategory(\"Beach\", \"assets/img/beach.png\", lebar),\nCategory(\"Mountain\", \"assets/img/mountains.png\", lebar),\nCategory(\"Religion\", \"assets/img/mosque.png\", lebar),\n]),\n)),\n//end category\n</code></pre> <p>Keterangan</p> <ul> <li>Agar bisa di geser ke kiri &amp; kanan disini kita memerlukan <code>SingleChildScrollView</code> dengan Axis horizontal  </li> <li><code>Wrap</code> : seperti di css flex wrap ini akan membuat widget didalamnya menjadi sejajar dan apabila tidak muat akan pindah ke bawah.</li> <li><code>spacing</code> : jarak kiri &amp; kanan antar widget  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/8.%20Tampilan%20Home/#5-membuat-tampilan-favorit-place","title":"5. Membuat Tampilan Favorit Place","text":"<p>Selanjutnya kita akan membuat tampilan dari Favorit Place dimana sama seperti sebelumnya yakni kita bisa menggunakan custom widget. maka dari itu buat file baru pada folder widget yang bernama <code>wisata.dart</code> lalu masukkan kodenya seperti ini :  </p> widget wisata.dart<pre><code>Widget Wisata(String img, String name, String place, String rating, tinggi,\nlebar, context) {\nreturn InkWell(\nonTap: () {},\nchild: Stack(\nchildren: [\nContainer(\nheight: tinggi * 0.35,\nwidth: lebar * 0.45,\ndecoration: BoxDecoration(\nimage: DecorationImage(image: AssetImage(img), fit: BoxFit.cover),\nborderRadius: BorderRadius.circular(20)),\n),\nContainer(\nheight: tinggi * 0.35,\nwidth: lebar * 0.45,\ndecoration: BoxDecoration(\ngradient: LinearGradient(\ncolors: [Colors.transparent, Colors.black26],\nbegin: Alignment.topCenter,\nend: Alignment.bottomCenter),\nborderRadius: BorderRadius.circular(20)),\nchild: Column(\nmainAxisAlignment: MainAxisAlignment.spaceBetween,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(top: 10, right: 10),\nalignment: Alignment.topRight,\nchild: CircleAvatar(\nbackgroundColor: Colors.white,\nchild: Icon(\nIcons.favorite,\ncolor: Colors.grey,\nsize: 20,\n),\n),\n),\nContainer(\npadding: EdgeInsets.symmetric(horizontal: 10),\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Text(name,\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 20,\nfontWeight: FontWeight.w600,\ncolor: Colors.white))),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Row(\nchildren: [\nContainer(\nmargin: EdgeInsets.only(right: 3),\nchild: Icon(Icons.place_outlined,\ncolor: Colors.white)),\nText(place,\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 15,\nfontWeight: FontWeight.w400,\ncolor: Colors.white)))\n],\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Wrap(\nspacing: 5,\nchildren: [\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64),\nsize: 20),\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64),\nsize: 20),\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64),\nsize: 20),\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64),\nsize: 20),\nIcon(Icons.star, color: Colors.white, size: 20),\nText(rating,\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 15,\nfontWeight: FontWeight.w400,\ncolor: Colors.white)))\n],\n),\n)\n],\n),\n)\n],\n),\n),\n],\n),\n);\n}\n</code></pre> <p>Kita langsung implementasikan pada <code>homePage.dart</code> </p> homePage.dart<pre><code>//start favorit\nJudul(\"Favorite Place\", \"Explore\", tinggi),\nContainer(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: SingleChildScrollView(\nscrollDirection: Axis.horizontal,\nchild: Wrap(spacing: 20, children: [\nWisata(\"assets/img/page1.jpg\", \"Tempat Wisata\",\n\"Jonggol, Indonesia\", \"4.8\", tinggi, lebar, context),\nWisata(\"assets/img/page2.jpg\", \"Tempat Wisata\",\n\"Jonggol, Indonesia\", \"4.8\", tinggi, lebar, context),\nWisata(\"assets/img/page3.jpg\", \"Tempat Wisata\",\n\"Jonggol, Indonesia\", \"4.8\", tinggi, lebar, context),\n]))),\n//end favorit\n</code></pre>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/8.%20Tampilan%20Home/#6-membuat-tampilan-popular-package","title":"6. Membuat Tampilan Popular Package","text":"<p>Tampilan yang terakhir kita akan membuat popular package. Kita buat file baru pada folder widget dengan nama <code>popular.dart</code> </p> widget popular.dart<pre><code>Widget Popular(String img, String name, String price, double rating,\nString desc, lebar, tinggi) {\nreturn Container(\nwidth: lebar,\nheight: tinggi * 0.25,\n// ignore: prefer_const_constructors\npadding: EdgeInsets.all(10),\ndecoration: BoxDecoration(\n// ignore: prefer_const_constructors\nborder: Border.all(color: Color.fromARGB(255, 205, 202, 202)),\nborderRadius: BorderRadius.circular(20)),\nchild: Row(\nchildren: [\nContainer(\nwidth: lebar * 0.3,\nheight: tinggi,\n// ignore: prefer_const_constructors\nmargin: EdgeInsets.only(right: 20),\ndecoration: BoxDecoration(\nimage: DecorationImage(image: AssetImage(img), fit: BoxFit.cover),\nborderRadius: BorderRadius.circular(20)),\n),\nContainer(\nwidth: lebar * 0.5,\nchild: Column(\ncrossAxisAlignment: CrossAxisAlignment.start,\nchildren: [\nContainer(\n// ignore: prefer_const_constructors\nmargin: EdgeInsets.only(bottom: 10),\nchild: Row(\nmainAxisAlignment: MainAxisAlignment.spaceBetween,\nchildren: [\nText(name,\nstyle: GoogleFonts.poppins(\n// ignore: prefer_const_constructors\ntextStyle: TextStyle(\nfontSize: 20, fontWeight: FontWeight.w600))),\n// ignore: prefer_const_constructors\nIcon(Icons.favorite_border,\ncolor: Color.fromARGB(255, 205, 202, 202))\n],\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Text(\"Rp. ${price}\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 17,\nfontWeight: FontWeight.w400,\ncolor: Colors.red))),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Wrap(\nspacing: 5,\nchildren: [\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64), size: 20),\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64), size: 20),\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64), size: 20),\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 252, 210, 64), size: 20),\nIcon(Icons.star,\ncolor: Color.fromARGB(255, 205, 202, 202), size: 20),\nText(rating.toString(),\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 15,\nfontWeight: FontWeight.w600,\n)))\n],\n),\n),\nContainer(\nmargin: EdgeInsets.only(bottom: 10),\nchild: Text(desc,\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 15,\nfontWeight: FontWeight.w400,\ncolor: Colors.grey))),\n)\n],\n),\n)\n],\n),\n);\n}\n</code></pre> <p>Selanjutnya kita implementasikan ke dalam homepage  </p> homePage.dart<pre><code>//start popular\nJudul(\"Popular Package\", \"See All\", tinggi),\nContainer(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: Wrap(\nrunSpacing: 30,\nchildren: [\nPopular(\n\"assets/img/page1.jpg\",\n\"Tempat Wisata\",\n\"500000\",\n4.8,\n\"Lorem ipsum dolor sit amet consectetur adipisicing elit...\",\nlebar,\ntinggi),\nPopular(\n\"assets/img/page2.jpg\",\n\"Tempat Wisata\",\n\"300000\",\n4.8,\n\"Lorem ipsum dolor sit amet consectetur adipisicing elit...\",\nlebar,\ntinggi),\nPopular(\n\"assets/img/page3.jpg\",\n\"Tempat Wisata\",\n\"800000\",\n4.8,\n\"Lorem ipsum dolor sit amet consectetur adipisicing elit...\",\nlebar,\ntinggi),\n],\n),\n)\n//end popular\n</code></pre>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/9.%20Get%20Username%20%26%20Kategori/","title":"9. Get Username & Kategori","text":"<p>Setelah kita berhasil membuat tampilan home sekarang kita akan membuat proses untuk menampilkan datanya menggunakan API yang sudah kita persiapkan  </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/9.%20Get%20Username%20%26%20Kategori/#1-create-model","title":"1. Create Model","text":"<p>A. Akses api dengan url <code>http://localhost:457/kategori/list</code> (api ini sudah terintegrasi JWT Token maka untuk mengakses API ini membutuhkan token) menggunakan postman B. Copy respon yang dikirim API C. Masukkan pada app.quicktype.io dengan nama model Kategori D. Buat file baru pada model dengan nama <code>kategori.dart</code> E. Pastekan model yang sudah digenerate quicktype ke <code>kategori.dart</code> F. Koneksikan dengan file induknya yakni <code>model.dart</code> G. Jika terdapat kata dummy (class yang memang sama dengan widget flutter atau namanya terkesan aneh contohnya Datum atau sejenisnya maka kita wajib menggantinya) seperti kode berikut ini :     kategori.dart<pre><code>part of \"model.dart\";\nKategori kategoriFromJson(String str) =&gt; Kategori.fromJson(json.decode(str));\nString kategoriToJson(Kategori data) =&gt; json.encode(data.toJson());\nclass Kategori {\nString status;\nString message;\nint count;\nList&lt;DataKategori&gt; data;\nPagination pagination;\nKategori({\nrequired this.status,\nrequired this.message,\nrequired this.count,\nrequired this.data,\nrequired this.pagination,\n});\nfactory Kategori.fromJson(Map&lt;String, dynamic&gt; json) =&gt; Kategori(\nstatus: json[\"status\"],\nmessage: json[\"message\"],\ncount: json[\"count\"],\ndata: List&lt;DataKategori&gt;.from(json[\"data\"].map((x) =&gt; DataKategori.fromJson(x))),\npagination: Pagination.fromJson(json[\"pagination\"]),\n);\nMap&lt;String, dynamic&gt; toJson() =&gt; {\n\"status\": status,\n\"message\": message,\n\"count\": count,\n\"data\": List&lt;dynamic&gt;.from(data.map((x) =&gt; x.toJson())),\n\"pagination\": pagination.toJson(),\n};\n}\nclass DataKategori {\nint id;\nString namaKategori;\nString gambarKategori;\nCreatedBy createdBy;\ndynamic updatedBy;\nDataKategori({\nrequired this.id,\nrequired this.namaKategori,\nrequired this.gambarKategori,\nrequired this.createdBy,\nrequired this.updatedBy,\n});\nfactory DataKategori.fromJson(Map&lt;String, dynamic&gt; json) =&gt; DataKategori(\nid: json[\"id\"],\nnamaKategori: json[\"nama_kategori\"],\ngambarKategori: json[\"gambar_kategori\"],\ncreatedBy: CreatedBy.fromJson(json[\"created_by\"]),\nupdatedBy: json[\"updated_by\"],\n);\nMap&lt;String, dynamic&gt; toJson() =&gt; {\n\"id\": id,\n\"nama_kategori\": namaKategori,\n\"gambar_kategori\": gambarKategori,\n\"created_by\": createdBy.toJson(),\n\"updated_by\": updatedBy,\n};\n}\nclass CreatedBy {\nint id;\nString nama;\nCreatedBy({\nrequired this.id,\nrequired this.nama,\n});\nfactory CreatedBy.fromJson(Map&lt;String, dynamic&gt; json) =&gt; CreatedBy(\nid: json[\"id\"],\nnama: json[\"nama\"],\n);\nMap&lt;String, dynamic&gt; toJson() =&gt; {\n\"id\": id,\n\"nama\": nama,\n};\n}\n</code></pre></p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/9.%20Get%20Username%20%26%20Kategori/#2-create-controller","title":"2. Create Controller","text":"<p>Setelah kita membuat model atau kerangka datanya sekarang kita akan membuat prosesnya untuk mendapatkan username &amp; kategori maka dari itu silahkan buat file baru pada folder controller dengan nama <code>homeController.dart</code>.  </p>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/9.%20Get%20Username%20%26%20Kategori/#3-get-username","title":"3. Get Username","text":"<p>Kita akan memulai proses yang pertama yaitu get username pada <code>homeController.dart</code> buatkan get username seperti dibawah ini : homeController.dart<pre><code>class HomeController {\nFuture getName() async {\nfinal SharedPreferences prefs = await SharedPreferences.getInstance();\nLogin dataUser = loginFromJson(prefs.getString(\"isLogin\").toString());\nreturn dataUser.data.nama;\n}\n}\n</code></pre></p> <p>Selanjutnya kita akan implementasikan pada <code>homePage.dart</code> </p> homePage.dart<pre><code>class _HomePageState extends State&lt;HomePage&gt; {\nString nama = \"Fullan\";\n@override\nvoid initState() {\nHomeController().getName().then((value) {\nsetState(() {\nnama = value;\n});\n});\nsuper.initState();\n}\n@override\n</code></pre> <pre><code>//Start hello\nContainer(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: Row(\nmainAxisAlignment: MainAxisAlignment.spaceBetween,\nchildren: [\nRow(\nchildren: [\nContainer(\nmargin: EdgeInsets.only(right: 10),\nchild: CircleAvatar(\nbackgroundColor: Color.fromARGB(255, 252, 211, 64),\nchild: Icon(Icons.person),\n),\n),\nText(\"Hello, ${nama}\",\nstyle: GoogleFonts.poppins(\ntextStyle: TextStyle(\nfontSize: 20, fontWeight: FontWeight.w500)))\n],\n),\nIcon(Icons.notifications)\n],\n),\n),\n//end hello\n</code></pre> <p>Keterangan</p> <ul> <li>untuk memanggil function yang telah kita buat di controller kita hanya perlu memanggil nama controllernya dan nama function yang kita sudah buat sebelumnya  </li> <li><code>then</code> adalah sebuah proses untuk mengecek return yang dihasilkan proses  </li> <li><code>initState</code> sebuah aktivitas yang dijalankan sebelum widget terbuat jadi sebelum widget terbuat proses akan berjalan terlebih dahulu  </li> </ul>"},{"location":"6.%20Flutter/3.%20Flutter%20Advanced/D.%20Project%20API/9.%20Get%20Username%20%26%20Kategori/#4-get-data-kategori","title":"4. Get Data Kategori","text":"<p>Setelah username kita telah dapatkan sekarang kita akan mengambil data kategori yang ada di database. Pada pengambilan data ini agar tampilannya menarik kita perlu menggunakan package <code>shimmer</code> (silahkan di add terlebih dahulu pada project). Selanjutnya kita akan mulai membuat prosesnya :  </p> homeController.dart<pre><code>Future getKategori() async {\nawait Future.delayed(Duration(seconds: 3));\nString url = \"${dotenv.env['IP']}/kategori/list\";\nUri urlData = Uri.parse(url);\nfinal SharedPreferences prefs = await SharedPreferences.getInstance();\nLogin dataUser = loginFromJson(prefs.getString(\"isLogin\").toString());\nString token = \"Bearer ${dataUser.data.accessToken}\";\nfinal respon = await http.get(urlData, headers: {\"Authorization\": token});\nif (respon.statusCode == 200) {\nKategori data = kategoriFromJson(respon.body);\nreturn data.data;\n} else {\nreturn null;\n}\n}\n</code></pre> <p>Lalu kita implementasikan pada tampilan home page:  </p> homePage.dart<pre><code>//start category\nJudul(\"Choose Category\", \"See All\", tinggi),\nFutureBuilder(\nfuture: HomeController().getKategori(),\nbuilder: (context, snapshot) {\nif (snapshot.connectionState == ConnectionState.done) {\nList&lt;DataKategori&gt; data = snapshot.data;\nreturn Container(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: SingleChildScrollView(\nscrollDirection: Axis.horizontal,\nchild: Wrap(\nspacing: 20,\nchildren: List.generate(data.length, (index) {\nreturn Category(data[index].namaKategori,\ndata[index].gambarKategori, lebar);\n})),\n));\n} else {\nreturn Shimmer.fromColors(\nbaseColor: Colors.grey.shade300,\nhighlightColor: Colors.grey.shade100,\nchild: Container(\nmargin: EdgeInsets.only(bottom: tinggi * 0.03),\nchild: SingleChildScrollView(\nscrollDirection: Axis.horizontal,\nchild: Wrap(\nspacing: 20,\nchildren: List.generate(3, (index) {\nreturn Category(\n\"Category\",\n\"https://i.ibb.co/vPnDfxZ/play-circle.png\",\nlebar);\n})),\n)));\n}\n},\n),\n//end category\n</code></pre> <p>Keterangan</p> <ul> <li>pada home controller kita menggunakan delay agar bisa mengecek proses shimmer (karena kita masih menggunakan API local yang loadingnya cepat maka kita berikan delay)  </li> <li>seperti yang dijelaskan di awal untuk mengakses API kategori kita membutuhkan token maka dari itu kita dapat mengambil token yang sudah tersimpan pada shared preferences  </li> <li>untuk metode get lakukan http.get, untuk token kita dapat mengirimkannya menggunakan header  </li> <li><code>FutureBuilder</code> : sebuah widget yang digunakan untuk perulangan dari proses <code>Future</code> yang memiliki 2 parameter yang harus diisi yakni. Future = prosesnya (harus function future) &amp; Builder = aksinya  </li> <li>Pada future builder disini ada 2 kondisi dimana ketika prosesnya belum selesai akan menampilkan loading yang berbentuk shimmer &amp; jika prosesnya sudah selesai maka akan menampilkan datanya </li> </ul>"},{"location":"Matematika/FASE%20F/Komposisi%20fungsi/komposisi/","title":"Komposisi fungsi dan Invers","text":""},{"location":"Matematika/FASE%20F/Komposisi%20fungsi/komposisi/#a-identitas-modul","title":"A. Identitas Modul","text":""},{"location":"Matematika/FASE%20F/Komposisi%20fungsi/komposisi/#b-tujuan-pembalajaran","title":"B. Tujuan Pembalajaran","text":"<p>2.1 Menggunakan Komposisi fungsi, fungsi invers dan transformasi fungsi dalam menyelesaikan masalah bidang teknologi informasi</p>"},{"location":"Matematika/FASE%20F/Komposisi%20fungsi/komposisi/#c-assesmen-awal","title":"C. Assesmen Awal","text":"<ol> <li>Apakah setiap relasi adalah fungsi? Jelaskan!</li> <li>Sebutkan jenis-jenis fungsi?</li> <li>adalah persamaan dalam teks: $ f(x) = x^2 + 1 $</li> </ol>"}]}